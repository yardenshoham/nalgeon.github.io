<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anton Zhiyanov</title><description>Everything about SQLite, Python, open data and awesome software.</description><link>https://antonz.org/</link><image><url>https://antonz.org/assets/favicon/favicon.png</url><title>Anton Zhiyanov</title><link>https://antonz.org/</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 May 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://antonz.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Rolling Aggregates with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-rolling-aggregates/</link><pubDate>Mon, 01 May 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-rolling-aggregates/</guid><description>Moving averages, cumulative totals and other sliding aggregates.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Previously we&rsquo;ve covered <a href="/sql-window-functions-ranking/">ranking</a>, <a href="/sql-window-functions-offset/">offset</a> and <a href="/sql-window-functions-aggregation/">aggregate</a> window functions.</p>
<p>​Rolling aggregates (also known as sliding or moving aggregates) are just totals — sum, average, count etc. But instead of calculating them across all elements, we take a different approach.</p>
<p>Let&rsquo;s look at some examples. We&rsquo;ll use the <code>expenses</code> table, which contains the monthly income and expenses of the company our employees work for. To make examples concise, we&rsquo;ll only consider the first nine months of 2020:</p>
<pre tabindex="0"><code>select
  year, month, income, expense
from expenses
where year = 2020 and month &lt;= 9
order by month;
</code></pre><pre tabindex="0"><code>┌──────┬───────┬────────┬─────────┐
│ year │ month │ income │ expense │
├──────┼───────┼────────┼─────────┤
│ 2020 │ 1     │ 94     │ 82      │
│ 2020 │ 2     │ 94     │ 75      │
│ 2020 │ 3     │ 94     │ 104     │
│ 2020 │ 4     │ 100    │ 94      │
│ 2020 │ 5     │ 100    │ 99      │
│ 2020 │ 6     │ 100    │ 105     │
│ 2020 │ 7     │ 100    │ 95      │
│ 2020 │ 8     │ 100    │ 110     │
│ 2020 │ 9     │ 104    │ 104     │
└──────┴───────┴────────┴─────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#moving-average">Moving average</a></li>
<li><a href="#frame">Frame</a></li>
<li><a href="#cumulative-total">Cumulative total</a></li>
<li><a href="#default-frame">Default frame</a></li>
<li><a href="#rolling-aggregates-functions">Rolling aggregates functions</a></li>
</ul>
<h2 id="moving-average">Moving average</h2>
<p>Judging by the data, the income is growing: 94 in January → 104 in September. But are the expenses growing as well? It&rsquo;s hard to tell right away: expenses vary from month to month. To smooth out these spikes, we&rsquo;ll use the &ldquo;3-month average&rdquo; — the average between the previous, current, and next month&rsquo;s expenses for each month:</p>
<ul>
<li>moving average for January = (January + February) / 2;</li>
<li>for February = (January + February + March) / 3;</li>
<li>for March = (February + March + April) / 3;</li>
<li>for April = (March + April + May) / 3;</li>
<li>and so on.</li>
</ul>
<p>Let&rsquo;s calculate the moving average for all months:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before moving average"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="avg-after.png" width="300" alt="After moving average"/></figure>
</div>
</div>
<p>The <code>roll_avg</code> column contains the expenses moving average for three months (previous, current, and following). Now it is clear that expenses are steadily growing.</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>Let&rsquo;s sort the table by month:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last. At each step, we will calculate the average among the previous, current, and next values from the <code>expense</code> column:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="avg/03.png" width="300" alt="Moving average step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="avg/04.png" width="300" alt="Moving average step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="avg/05.png" width="300" alt="Moving average step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="avg/06.png" width="300" alt="Moving average step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="avg/07.png" width="300" alt="Moving average step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="avg.gif" width="300" alt="Moving average animation"/>
</figure>
</div>
</div>
<p>The blue frame shifts down at each step — this is how we get the moving average. To describe this in SQL, we need to revisit the concept of <em>frames</em> that we encountered in the <a href="/sql-window-functions-offset/">Comparing by Offset</a> chapter:</p>
<ol>
<li>The window consists of one or more partitions (in our case, there is only one partition with the company&rsquo;s expenses).</li>
<li>Within the partition, records are ordered by specific columns (<code>order by year, month</code>).</li>
<li>Each record has its own frame.</li>
</ol>
<p>The frame at each step covers three records — previous, current and next:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expenses<br/>
    <figure><img src="current-row-1.png" width="300" alt="Current row 1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    expenses<br/>
    <figure><img src="current-row-2.png" width="300" alt="Current row 2"/></figure>
</div>
</div>
<p>Here&rsquo;s how to write it in SQL:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between 1 preceding and 1 following
)
</code></pre><p>The <code>rows</code> line is the frame definition. It literally says:</p>
<blockquote>
<p>Select rows from the previous one to the following one.</p>
</blockquote>
<p>We will deal with frames in detail in the next step, but for now, let&rsquo;s finish with our query.</p>
<p>Calculate the average expenses with the <code>avg()</code> function:</p>
<pre tabindex="0"><code>avg(expense) over w
</code></pre><p>Add rounding and bring everything together:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#000">round</span>(<span style="color:#a90d91">avg</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#1c01ce">1</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#1c01ce">1</span> <span style="color:#000">following</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>The expenses moving average is ready!</p>
<h2 id="frame">Frame</h2>
<p>In general, the frame is defined like this:</p>
<pre tabindex="0"><code>rows between X preceding and Y following
</code></pre><p>Where <code>X</code> is the number of rows before the current one, and <code>Y</code> is the number of rows after the current one:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-following-1.png" width="300" alt="Between 2 preceding and 1 following"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-following-2.png" width="300" alt="Between 1 preceding and 2 following"/></figure>
</div>
</div>
<p>If you specify the value <code>unbounded</code> instead of <code>X</code> or <code>Y</code> — this means &ldquo;from/to the partition boundary&rdquo;:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="unbounded-preceding.png" width="300" alt="Unbounded preceding"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="unbounded-following.png" width="300" alt="Unbounded following"/></figure>
</div>
</div>
<p>If you specify the value <code>current row</code> instead of <code>X preceding</code> or <code>Y following</code> — this means &ldquo;the current record&rdquo;:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-current.png" width="300" alt="Between 2 preceding and current row"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="current-following.png" width="300" alt="Between current row and 2 following"/></figure>
</div>
</div>
<p>The frame never goes beyond the partition boundaries. If the frame encounters a boundary, it is cut off:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="boundary-1.png" width="300" alt="Partition start"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="boundary-2.png" width="300" alt="Partition end"/></figure>
</div>
</div>
<p>Frames have much more capabilities, but we will limit ourselves to these for now. We will discuss the rest in the next part of the book — it is fully devoted to frames.</p>
<div class="boxed">
<h3>✎ Exercise: Frame definition (+2 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="cumulative-total">Cumulative total</h2>
<p>Thanks to the moving average, we know that income and expenses are growing. But how do they relate to each other? We want to understand whether the company is &ldquo;in the black&rdquo; or &ldquo;in the red&rdquo;, considering all the money earned and spent.</p>
<p>It is essential to see the values for each month, not only for the end of the year. If everything is OK at in September, but the company went negative in June — this is a potential problem (companies call this situation a &ldquo;cash gap&rdquo;).</p>
<p>Let&rsquo;s calculate income and expenses by month as a cumulative total:</p>
<ul>
<li>cumulative income for January = January;</li>
<li>for February = January + February;</li>
<li>for March = January + February + March;</li>
<li>for April = January + February + March + April;</li>
<li>and so on.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure>
  <img src="sum-after.png" width="450" alt="After cumulative sum"/>
</figure>
</div>
</div>
<p><code>t_</code> columns show cumulative values:</p>
<ul>
<li>income (<code>t_income</code>),</li>
<li>expenses (<code>t_expense</code>),</li>
<li>profit (<code>t_profit</code>).</li>
</ul>
<pre tabindex="0"><code>t_profit = t_income - t_expense
</code></pre><p>How do we calculate them?</p>
<p>Let&rsquo;s sort the table by month:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last. At each step, we will calculate the totals from the first row to the current row:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="sum/03.png" width="300" alt="Cumulative sum step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="sum/04.png" width="300" alt="Cumulative sum step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="sum/05.png" width="300" alt="Cumulative sum step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="sum/06.png" width="300" alt="Cumulative sum step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="sum/07.png" width="300" alt="Cumulative sum step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure>
  <img src="sum.gif" width="450" alt="Cumulative sum animation"/>
</figure>
</div>
</div>
<p>At each step, the frame covers rows from the first one to the current one. We already know how to define this frame in SQL:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between unbounded preceding and current row
)
</code></pre><p>Calculate total income and expenses with the <code>sum()</code> function:</p>
<pre tabindex="0"><code>sum(income) over w as t_income,
sum(expense) over w as t_expense,
</code></pre><p>Calculate profit as the difference between income and expenses:</p>
<pre tabindex="0"><code>(sum(income) over w) - (sum(expense) over w) as t_profit
</code></pre><p>All together:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  (<span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#000">-</span> (<span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">current</span> <span style="color:#a90d91">row</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>As you can see from <code>t_profit</code>, the company is doing well. In some months, expenses exceed income, but there is no gap due to the accumulated cash reserve.</p>
<div class="boxed">
<h3>✎ Exercise: Cumulative salary fund</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="default-frame">Default frame</h2>
<p>Let&rsquo;s take a query that calculates cumulative expenses:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">current</span> <span style="color:#a90d91">row</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>And remove the frame definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>You&rsquo;d expect the same <code>total</code> in all rows — total expenses for nine months. But instead, we&rsquo;ve got this:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expectation<br/>
                <pre><code>┌───────┬─────────┬───────┐
│ month │ expense │ total │
├───────┼─────────┼───────┤
│ 1     │ 82      │ 868   │
│ 2     │ 75      │ 868   │
│ 3     │ 104     │ 868   │
│ 4     │ 94      │ 868   │
│ 5     │ 99      │ 868   │
│ 6     │ 105     │ 868   │
│ 7     │ 95      │ 868   │
│ 8     │ 110     │ 868   │
│ 9     │ 104     │ 868   │
└───────┴─────────┴───────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-5">
    reality<br/>
                <pre><code>┌───────┬─────────┬───────┐
│ month │ expense │ total │
├───────┼─────────┼───────┤
│ 1     │ 82      │ 82    │
│ 2     │ 75      │ 157   │
│ 3     │ 104     │ 261   │
│ 4     │ 94      │ 355   │
│ 5     │ 99      │ 454   │
│ 6     │ 105     │ 559   │
│ 7     │ 95      │ 654   │
│ 8     │ 110     │ 764   │
│ 9     │ 104     │ 868   │
└───────┴─────────┴───────┘</code></pre>
</div>
</div>
<p>The query without a frame still calculated cumulative expenses — exactly as the query with a frame. How is this possible?</p>
<p>It&rsquo;s all about the presence of sorting in the window (<code>order by year, month</code>). The rule is as follows:</p>
<ul>
<li>if there is an <code>order by</code> in the window definition,</li>
<li>and an aggregation function is used,</li>
<li>and there is no frame definition,</li>
<li>then the default frame is used.</li>
</ul>
<p>The default frame in our query spreads from the first to the current record. Therefore, the results match the query with the explicit frame (<code>rows between unbounded preceding and current row</code>).</p>
<p>But it&rsquo;s not always the case. That&rsquo;s why I recommend specifying the frame explicitly until you understand the various frame types. Make your life easier — add a frame definition whenever you add an <code>order by</code> to the window.</p>
<p>If we remove the <code>order by</code> from the window, the aggregate turns from rolling into a regular one:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>No surprises here.</p>
<h2 id="rolling-aggregates-functions">Rolling aggregates functions</h2>
<p>Rolling aggregates use the same functions as regular ones:</p>
<ul>
<li><code>min()</code> and <code>max()</code>,</li>
<li><code>count()</code>, <code>avg()</code> and <code>sum()</code>,</li>
<li><code>group_concat()</code>.</li>
</ul>
<p>The only difference is the presence of a frame in rolling aggregates.</p>
<p class="align-center">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Over the course of four articles, we have seen four types of tasks commonly solved with window functions in SQL:</p>
<ul>
<li><a href="/sql-window-functions-ranking/">Ranking</a> (various ratings).</li>
<li><a href="/sql-window-functions-offset/">Comparing by offset</a> (neighbors and boundaries).</li>
<li><a href="/sql-window-functions-aggregation/">Aggregation</a> (count, sum, and average).</li>
<li>Rolling aggregates (moving average and cumulative total).</li>
</ul>
<p>To learn more about window functions or to get some practice — buy my book <em>SQL Window Functions Explained</em>.</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Aggregating Data with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-aggregation/</link><pubDate>Sun, 30 Apr 2023 18:30:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-aggregation/</guid><description>Comparing individual values with totals and averages.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Previously we&rsquo;ve covered <a href="/sql-window-functions-ranking/">ranking</a> and <a href="/sql-window-functions-offset/">offset</a> window functions.</p>
<p>Aggregation means counting totals or averages (or other <em>aggregates</em>). For example, the average salary per city. Or the total number of gold medals for each country in the Olympic Games standings.</p>
<p>We will aggregate records from the <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#partitioned-aggregates">Partitioned aggregates</a></li>
<li><a href="#filtering-and-execution-order">Filtering and execution order</a></li>
<li><a href="#window-definition">Window definition</a></li>
<li><a href="#aggregation-functions">Aggregation functions</a></li>
<li><a href="#keep-it-up">Keep it up</a></li>
</ul>
<h2 id="partitioned-aggregates">Partitioned aggregates</h2>
<p>Each department has a salary fund — money spent monthly on paying employees' salaries. Let&rsquo;s see what percentage of this fund represents each employee&rsquo;s salary:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before partition sum"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="sum-after.png" width="300" alt="After partition sum"/></figure>
</div>
</div>
<p>The <code>fund</code> column shows the department&rsquo;s salary fund, and the <code>perc</code> column shows the employee&rsquo;s salary share of that fund. As you can see, everything is more or less even in HR and Sales, but IT has a noticeable spread of salaries.</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table by department:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>, <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last, computing the following values along the way:</p>
<ul>
<li><code>fund</code> — total departmental salary;</li>
<li><code>perc</code> — employee&rsquo;s salary as a percentage of the <code>fund</code>.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="sum/03.png" width="300" alt="Partition sum step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="sum/04.png" width="300" alt="Partition sum step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="sum/05.png" width="300" alt="Partition sum step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="sum/06.png" width="300" alt="Partition sum step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="sum/07.png" width="300" alt="Partition sum step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="sum.gif" width="300" alt="Partition sum animation"/>
</figure>
</div>
</div>
<p>The window consists of several partitions, one partition per department. The order of records in a partition is not essential: we are counting the total <code>salary</code>, which does not depend on the order.</p>
<pre tabindex="0"><code>window w as (
  partition by department
)
</code></pre><p>We can use a regular <code>sum()</code> over the window to calculate the <code>fund</code>. And the <code>perc</code> will be calculated as <code>salary / fund</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>,
  <span style="color:#000">round</span>(<span style="color:#000">salary</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>sum()</code> function works without surprises — it counts the sum of values for the entire partition to which the current row belongs.</p>
<div class="boxed">
<h3>✎ Exercise: City salary fund (+1 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="filtering-and-execution-order">Filtering and execution order</h2>
<p>Let&rsquo;s get back to the query that calculated the salary fund by department:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Let&rsquo;s say we want to leave only London employees in the report. We&rsquo;ll add a filter:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The filter works. However, the <code>fund</code> values differ from the expected:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expectation<br/>
    <pre><code>┌───────┬────────┬──────┐
│ name  │ salary │ fund │
├───────┼────────┼──────┤
│ Diane │ 70     │ 148  │
│ Bob   │ 78     │ 148  │
│ Emma  │ 84     │ 502  │
│ Henry │ 104    │ 502  │
│ Dave  │ 96     │ 292  │
└───────┴────────┴──────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-5">
    reality<br/>
    <pre><code>┌───────┬────────┬──────┐
│ name  │ salary │ fund │
├───────┼────────┼──────┤
│ Diane │ 70     │ 148  │
│ Bob   │ 78     │ 148  │
│ Emma  │ 84     │ 188  │
│ Henry │ 104    │ 188  │
│ Dave  │ 96     │ 96   │
└───────┴────────┴──────┘</code></pre>
</div>
</div>
<p>It&rsquo;s all about the order of operations. Here is the order in which the DB engine executes the query:</p>
<ol>
<li>Take the tables (<code>from</code>) and join them if necessary (<code>join</code>).</li>
<li>Filter the rows (<code>where</code>).</li>
<li>Group the rows (<code>group by</code>).</li>
<li>Filter the aggregated results (<code>having</code>).</li>
<li>Take specific columns from the result (<code>select</code>).</li>
<li>Calculate the values of window functions (<code>function() over window</code>).</li>
<li>Sort the results (<code>order by</code>).</li>
</ol>
<p>Windows are processed at the next-to-last step, after filtering and grouping the results. Therefore, in our query, the <code>fund</code> represents not the sum of all department salaries but the sum only for London employees.</p>
<p>The solution is to use a subquery with a window and filter it in the main query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">emp</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#000">name</span>, <span style="color:#000">city</span>, <span style="color:#000">salary</span>,
    <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
  <span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">name</span>, <span style="color:#000">salary</span>, <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">emp</span> <span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span>;
</code></pre></div><h2 id="window-definition">Window definition</h2>
<p>So far, we have described the window in the <code>window</code> clause and referred to it in the <code>over</code> clause:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>There is another way. SQL allows to omit the <code>window</code> clause and define the window directly inside <code>over</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>I prefer the <code>window</code> clause — it is easier to read, and you can explicitly reuse the window. But the <code>over</code> option is common in the documentation and examples, so do not be surprised when you see it.</p>
<p>By the way, the window definition can be empty:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>An empty window includes all rows, so:</p>
<ul>
<li><code>emp_count</code> amounts to the total number of employees,</li>
<li><code>fund</code> amounts to the total salary for all employees.</li>
</ul>
<div class="boxed">
<h3>✎ Exercise: Execution order (+1 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="aggregation-functions">Aggregation functions</h2>
<p>Here are the aggregation window functions:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min(value)</code></td>
<td>returns the minimum <code>value</code> across all window rows</td>
</tr>
<tr>
<td><code>max(value)</code></td>
<td>returns the maximum <code>value</code></td>
</tr>
<tr>
<td><code>count(value)</code></td>
<td>returns the count of non-null <code>value</code>s</td>
</tr>
<tr>
<td><code>avg(value)</code></td>
<td>returns the average <code>value</code></td>
</tr>
<tr>
<td><code>sum(value)</code></td>
<td>returns the total <code>value</code></td>
</tr>
<tr>
<td><code>group_concat(value, separator)</code></td>
<td>returns a string combining <code>value</code>s using <code>separator</code> (SQLite and MySQL only)</td>
</tr>
<tr>
<td><code>string_agg(value, separator)</code></td>
<td>similar to <code>group_concat()</code> in PostgreSQL and MS SQL</td>
</tr>
</tbody>
</table>
<h2 id="keep-it-up">Keep it up</h2>
<p>You have learned how to calculate regular window aggregates. In the next chapter we will try <a href="/sql-window-functions-rolling-aggregates/">rolling aggregates</a>!</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>AI SQLite Assistant</title><link>https://antonz.org/sqlime-ai/</link><pubDate>Thu, 16 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/sqlime-ai/</guid><description>Ask AI to explain or troubleshoot your SQL query in a playground.</description><content:encoded><![CDATA[<p>While trying to trick AI into saying ethically questionable things may be fun for some of us, I prefer more practical and useful scenarios.</p>
<p>So, as of today, <a href="https://sqlime.org/">Sqlime</a> — an online SQLite playground — includes the &ldquo;Ask AI&rdquo; feature.</p>
<p>AI can explain, teach, and troubleshoot your SQL without leaving the playground:</p>
<ol>
<li>Write a question as a comment above the query.</li>
<li>Click &ldquo;Ask AI&rdquo;.</li>
<li>Receive a not-so-fast, but often useful answer from AI.</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./ask-ai-1.png" alt="Write a question" width="400" class="img-bordered-thin">
    <figcaption>ask a question<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./ask-ai-2.png" alt="Get an answer" width="400" class="img-bordered-thin">
    <figcaption>and receive an answer from AI<figcaption>
</figure>
</div>
</div>
<p>Try it out! All you need is an OpenAI API key.</p>
<p class="big">
<a href="https://sqlime.org/">Ask AI in Sqlime</a>
</p>
]]></content:encoded></item><item><title>ChatGPT Bot in Python</title><link>https://antonz.org/pokitoki/</link><pubDate>Sat, 11 Mar 2023 12:30:00 +0000</pubDate><guid>https://antonz.org/pokitoki/</guid><description>A Telegram chatbot that works via the official OpenAI API.</description><content:encoded><![CDATA[<p>In the last few months, people have been releasing a record number of AI-powered software. Of course I could not stay out of it.</p>
<p>And so the <a href="https://github.com/nalgeon/pokitoki"><strong>pokitoki</strong></a> project was born. It&rsquo;s a a Telegram chat bot built using the ChatGPT (GPT-3.5 or GPT-4) language model from OpenAI.</p>
<p>Notable features:</p>
<ul>
<li>Both one-on-one and group chats.</li>
<li>Direct questions, mentions, follow-ups.</li>
<li>Access external links (articles, code, data).</li>
<li>Shortcuts (custom AI commands).</li>
</ul>
<h2 id="personal-chats">Personal chats</h2>
<p>The bot acts as your personal assistant:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-1.png" alt="Sample chat" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>To allow other users to use the bot, list them in the <code>telegram_usernames</code> config property.</p>
<p>The bot has a terrible memory, so don&rsquo;t expect it to remember any chat context by default. You can, however, reply with a follow-up question (<code>Ctrl/Cmd + ↑</code>). Alternatively, use a plus sign to follow up:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-2.png" alt="Follow-up by reply" width="400" class="img-bordered-thin">
    <figcaption>follow up by replying<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-3.png" alt="Follow-up by plus sign" width="400" class="img-bordered-thin">
    <figcaption>or by writing a `+` sign<figcaption>
</figure>
</div>
</div>
<p>Available commands:</p>
<ul>
<li><code>/retry</code> - retry answering the last question</li>
<li><code>/help</code> - show help</li>
<li><code>/version</code> - show bot info</li>
</ul>
<h2 id="groups">Groups</h2>
<p>To get an answer from the bot in a group, mention it in a reply to a question, or ask a question directly:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-4.png" alt="Reply with mention" width="400" class="img-bordered-thin">
    <figcaption>reply with mention<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-5.png" alt="Direct question" width="400" class="img-bordered-thin">
    <figcaption>direct question<figcaption>
</figure>
</div>
</div>
<p>To make the bot reply to group members, list the group id in the <code>telegram_chat_ids</code> config property. Otherwise, the bot will ignore questions from group members unless they are listed in the <code>telegram_usernames</code> config property.</p>
<p>If you don&rsquo;t know the group id, run the <code>/version</code> bot command in a group to find it:</p>
<pre tabindex="0"><code>Chat information:
- id: -1001405001234
- title: My Favorite Group
- type: supergroup
...
</code></pre><h2 id="external-links">External links</h2>
<p>If you ask &ldquo;vanilla&rdquo; ChatGPT about external resources, it will either hallucinate or admit that it doesn&rsquo;t have access to remote content:</p>
<blockquote>
<p>Q: What is the content of <a href="https://sqlime.org/employees.sql?">https://sqlime.org/employees.sql?</a> Make no assumptions.</p>
<p>A: As an AI language model, I cannot access external URLs on the internet.</p>
</blockquote>
<p>The bot solves the problem by fetching the remote content and feeding it to the model:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-7.png" alt="External links" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>Currently only supports text content (articles, code, data), not PDFs, images or audio.</p>
<h2 id="shortcuts">Shortcuts</h2>
<p>Use short commands to save time and ask the bot to do something specific with your questions. For example, ask it to proofread your writing with a <code>!proofread</code> command:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-6.png" alt="Shortcuts" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>There are several built-in shortcuts:</p>
<ul>
<li><code>bugfix</code> fixes your code.</li>
<li><code>proofread</code> fixes your writing.</li>
<li><code>translate</code> translates your text into English.</li>
<li><code>summarize</code> gives a two paragraph summary of a text.</li>
</ul>
<p>You can add your own shortcuts. See <code>config.example.yml</code> for details.</p>
<h2 id="other-useful-features">Other useful features</h2>
<p>The convenience of working with a bot is made up of small details. Here are some situations where it can save you time and effort.</p>
<h3 id="forwarding">Forwarding</h3>
<p>Say you received a message from a colleague or read a post on a channel and want to ask a question. Simply forward the message to the bot and answer the clarifying question it asks:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-8.png" alt="Forwarding 1" width="400" class="img-bordered-thin">
    <figcaption>forward the message<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-9.png" alt="Forwarding 2" width="400" class="img-bordered-thin">
    <figcaption>and specify the task<figcaption>
</figure>
</div>
</div>
<h3 id="reply-with-attachment">Reply with attachment</h3>
<p>Sometimes the AI&rsquo;s reply exceeds the maximum message length set by Telegram. In this case, the bot will not fail or spam you with messages. Instead, it will send the answer as an attached markdown file:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-10.png" alt="Reply with attachment" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<h3 id="editing-questions">Editing questions</h3>
<p>To rephrase or add to the last question, edit it (<code>↑</code> shortcut). The bot will notice this and respond to the clarified question.</p>
<h2 id="bot-information">Bot information</h2>
<p>Use the <code>/version</code> commands to print detailed information about the current chat, bot, and AI model:</p>
<pre tabindex="0"><code>Chat information:
- id: -1001405001234
- title: My Favorite Group
- type: supergroup

Bot information:
- id: 5930739038
- name: @pokitokibot
- version: 70
- usernames: 6 users
- chat IDs: []
- access to messages: True

AI information:
- model: gpt-3.5-turbo
- history depth: 3
- shortcuts: ['bugfix', 'proofread', 'summarize', 'translate']
</code></pre><h2 id="setup">Setup</h2>
<ol>
<li>Get your <a href="https://openai.com/api/">OpenAI API</a> key</li>
<li>Get your Telegram bot token from <a href="https://t.me/BotFather">@BotFather</a></li>
<li>Copy <code>config.example.yml</code> to <code>config.yml</code> and specify your tokens there.</li>
<li>Start the bot:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker compose up --build --detach
</code></pre></div><p>To stop the bot:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker compose stop
</code></pre></div><p>For older Docker distributions, use <code>docker-compose</code> instead of <code>docker compose</code>.</p>
<p><a href="https://github.com/nalgeon/pokitoki">Source code on GitHub</a></p>
]]></content:encoded></item><item><title>Interactive SQL Examples in JavaScript</title><link>https://antonz.org/interactive-sql-examples/</link><pubDate>Sun, 05 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/interactive-sql-examples/</guid><description>Turn static SQL code in your articles into executable examples.</description><content:encoded><![CDATA[<p>Reading about SQL is fun, but trying out live examples is even better! So I created JavaScript widgets that turn static SQL code in your articles into interactive examples.</p>
<p>Here is a working example. Give it a try:</p>
<pre class="example"><code>select * from employees
limit 5;</code></pre>
<p>And here are the four steps to creating executable SQL examples in your own articles or documentation:</p>
<h2 id="1-include-the-widgets">1. Include the widgets</h2>
<p>You&rsquo;ll need three JavaScript files:</p>
<ul>
<li><code>sqlite3.js</code> — SQLite compiled for the browser.</li>
<li><code>sqlime-db.js</code> — the database web component.</li>
<li><code>sqlime-examples.js</code> — the interactive example web component.</li>
</ul>
<p>Include them from CDN or (better) download and host locally:</p>
<pre tabindex="0"><code>&lt;script src=&quot;https://unpkg.com/@antonz/sqlite@3.40.0/dist/sqlite3.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/sqlime@0.1.2/dist/sqlime-db.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/sqlime@0.1.2/dist/sqlime-examples.js&quot;&gt;&lt;/script&gt;
</code></pre><p>You&rsquo;ll also need to download and serve the SQLite WebAssembly file if you&rsquo;re hosting locally:</p>
<pre tabindex="0"><code>https://unpkg.com/@antonz/sqlite@3.40.0/dist/sqlite3.wasm
</code></pre><p><code>sqlite3.wasm</code> is used internally by the <code>sqlite3.js</code> script, so place them in the same folder.</p>
<p>I suggest you host SQLite locally because it weighs ≈1Mb, and CDNs tend to be quite slow with such large files.</p>
<p>You can install all of these using <code>npm</code>:</p>
<pre tabindex="0"><code>npm install @antonz/sqlite
npm install sqlime
</code></pre><blockquote>
<p><strong>Note</strong>. <code>@antonz/sqlite</code> is a copy of the official <a href="https://sqlite.org/wasm">SQLite Wasm</a> build, provided as an NPM package for convenience. You can download and use the build from the SQLite website if you prefer.</p>
</blockquote>
<h2 id="2-write-an-article-as-usual">2. Write an article as usual</h2>
<p>Suppose you are writing a short post about ranking data in SQL:</p>
<pre tabindex="0"><code>&lt;p&gt;To rank data in SQL, we use the
&lt;code&gt;rank()&lt;/code&gt; window function:&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;select
  rank() over w as &quot;rank&quot;,
  name, department, salary
from employees
window w as (order by salary desc)
order by &quot;rank&quot;, id;&lt;/pre&gt;

&lt;p&gt;the article goes on...&lt;/p&gt;
</code></pre><p>Which renders as ordinary HTML:</p>
<div class="boxed">
    <p>To rank data in SQL, we use the <code>rank()</code> window function:</p>
    <pre><code>select
  rank() over w as "rank",
  name, department, salary
from employees
window w as (order by salary desc)
order by "rank", id;</code></pre>
    <p>the article goes on...</p>
</div>
<h2 id="3-load-the-database">3. Load the database</h2>
<p>You can create a database from a binary SQLite file or SQL script. I&rsquo;ll go with the latter and use <a href="/sql-window-functions-book/employees.sql">employees.sql</a>, which creates the <code>employees</code> table and populates it with data.</p>
<p>Load the database using the <code>sqlime-db</code> web component:</p>
<pre tabindex="0"><code>&lt;sqlime-db name=&quot;employees&quot; path=&quot;./employees.sql&quot;&gt;&lt;/sqlime-db&gt;
</code></pre><ul>
<li><code>name</code> is the name we&rsquo;ll use later to refer to the database.</li>
<li><code>path</code> is the URL path to the SQL (or binary) database file.</li>
</ul>
<h2 id="4-init-the-examples">4. Init the examples</h2>
<p>The only thing left is to convert your HTML <code>pre</code> code snippets into interactive examples. Use the <code>sqlime-examples</code> web component to do this:</p>
<pre tabindex="0"><code>&lt;sqlime-examples db=&quot;employees&quot; selector=&quot;pre.example&quot; editable&gt;&lt;/sqlime-examples&gt;
</code></pre><ul>
<li><code>db</code> is the name of the database we defined earlier.</li>
<li><code>selector</code> is the CSS selector for your SQL code snippets.</li>
<li><code>editable</code> makes the examples editable (remove for read-only).</li>
</ul>
<p>And that&rsquo;s it!</p>
<div class="boxed">
    <p>To rank data in SQL, we use the <code>rank()</code> window function:</p>
    <pre class="example"><code>select
  rank() over w as "rank",
  name, department, salary
from employees
window w as (order by salary desc)
order by "rank", id;</code></pre>
    <p>the article goes on...</p>
</div>
<p><code>sqlime-examples</code> converts all the snippets with the specified selector, so you only need to include it once (unless you have multiple databases to run your examples on).</p>
<h2 id="summary">Summary</h2>
<p>Executable SQL examples are an excellent fit for any kind of documentation:</p>
<ul>
<li>They are more informative than static snippets.</li>
<li>They increase engagement and encourage experimentation,</li>
<li>They are lightweight, easy to set up, and do not require a server.</li>
</ul>
<p>Try adding interactive SQL to your articles, or ask a question <a href="https://github.com/nalgeon/sqlime">on GitHub</a> if you have one.</p>
<p>P.S. Want to see SQL examples in action? Check out my book — <a href="/sql-window-functions-book/">SQL Window Functions Explained</a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="pre.example" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Reading and Writing Files in SQLite</title><link>https://antonz.org/sqlean-fileio/</link><pubDate>Sun, 26 Feb 2023 15:00:00 +0000</pubDate><guid>https://antonz.org/sqlean-fileio/</guid><description>Working with files and traversing directories from SQL.</description><content:encoded><![CDATA[<p>Sometimes it&rsquo;s useful to load a dataset from an external file or export query results to a file.</p>
<p>SQLite does not support file I/O operations by default. However, you can easily enable them using the <code>sqlean-fileio</code> extension.</p>
<blockquote>
<p><strong>Note</strong>. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.</p>
</blockquote>
<p><code>sqlean-fileio</code> solves common import/export tasks such as:</p>
<ul>
<li>Loading a JSON document from a file.</li>
<li>Reading a text file line by line.</li>
<li>Streaming query results to a file.</li>
<li>Importing all files in a directory.</li>
</ul>
<p>Let&rsquo;s look at some examples.</p>
<h2 id="loading-a-json-document-from-a-file">Loading a JSON Document From a File</h2>
<p>Suppose we have a JSON file containing employee data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#000">&#34;employees&#34;</span>: [
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">11</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Diane&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">70</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">12</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Bob&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">78</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">21</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Emma&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">84</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">22</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Grace&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">90</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">23</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Henry&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">104</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">24</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Irene&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">104</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">25</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Frank&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">120</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">31</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Cindy&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">96</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">32</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Dave&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">96</span> },
        { <span style="color:#000">&#34;id&#34;</span>: <span style="color:#1c01ce">33</span>, <span style="color:#000">&#34;name&#34;</span>: <span style="color:#c41a16">&#34;Alice&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>: <span style="color:#1c01ce">100</span> }
    ]
}
</code></pre></div><p>And an <code>employees</code> table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">employees</span> (
  <span style="color:#000">id</span> <span style="color:#a90d91">integer</span> <span style="color:#a90d91">primary</span> <span style="color:#a90d91">key</span>,
  <span style="color:#000">name</span> <span style="color:#a90d91">text</span>,
  <span style="color:#000">salary</span> <span style="color:#a90d91">integer</span>
);
</code></pre></div><p>To import the JSON data into the table, we combine <code>fileo_read()</code> with <code>json_tree()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">employees</span>(<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>)
<span style="color:#a90d91">select</span>
  <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.id&#39;</span>),
  <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.name&#39;</span>),
  <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.salary&#39;</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">json_tree</span>(
  <span style="color:#000">fileio_read</span>(<span style="color:#c41a16">&#39;employees.json&#39;</span>)
)
<span style="color:#a90d91">where</span> <span style="color:#a90d91">type</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;object&#39;</span> <span style="color:#a90d91">and</span> <span style="color:#000">fullkey</span> <span style="color:#a90d91">like</span> <span style="color:#c41a16">&#39;$.employees%&#39;</span>;
</code></pre></div><p><code>fileio_read()</code> loads the file as a blob, while <code>json_tree()</code> iterates over it. When the query completes, the data is imported into the <code>employees</code> table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────┐
│ id │ name  │ salary │
├────┼───────┼────────┤
│ 11 │ Diane │ 70     │
│ 12 │ Bob   │ 78     │
│ 21 │ Emma  │ 84     │
│ 22 │ Grace │ 90     │
│ 23 │ Henry │ 104    │
│ 24 │ Irene │ 104    │
│ 25 │ Frank │ 120    │
│ 31 │ Cindy │ 96     │
│ 32 │ Dave  │ 96     │
│ 33 │ Alice │ 100    │
└────┴───────┴────────┘
</code></pre><h2 id="reading-a-text-file-line-by-line">Reading a Text File Line by Line</h2>
<p>Reading the whole file into memory, as we did with <code>employees.json</code>, may not be a good idea for very large files (e.g., logs with millions of lines). In this case, it is better to read the file line by line.</p>
<p>Suppose we have an <code>app.log</code> file with 1M lines:</p>
<pre tabindex="0"><code>ts=2023-02-26 13:00:00,level=INFO,message=begin processing
ts=2023-02-26 13:01:00,level=INFO,message=processed 1000 records
ts=2023-02-26 13:02:00,level=INFO,message=processed 2000 records
ts=2023-02-26 13:03:00,level=INFO,message=processed 3000 records
ts=2023-02-26 13:03:25,level=ERROR,message=invalid record data
ts=2023-02-26 13:03:25,level=INFO,message=processing failed
...
</code></pre><p>And an <code>app_log</code> table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">app_log</span> (
  <span style="color:#000">line</span> <span style="color:#a90d91">text</span>
);
</code></pre></div><p>Let&rsquo;s iterate over the log file with <code>fileio_scan()</code>, loading lines one by one, and inserting them into the table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">app_log</span>(<span style="color:#000">line</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">value</span> <span style="color:#a90d91">from</span> <span style="color:#000">fileio_scan</span>(<span style="color:#c41a16">&#39;app.log&#39;</span>);
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#a90d91">from</span> <span style="color:#000">app_log</span>;
<span style="color:#177500">-- 1000000
</span></code></pre></div><p>Now we can extract the individual fields using the <code>regexp_capture</code> function from the <a href="/sqlean-regexp/"><code>sqlean-regexp</code></a> extension:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#000">ts</span> <span style="color:#a90d91">text</span>;
<span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#a90d91">level</span> <span style="color:#a90d91">text</span>;
<span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#000">message</span> <span style="color:#a90d91">text</span>;

<span style="color:#a90d91">update</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">set</span> <span style="color:#000">ts</span> <span style="color:#000">=</span> <span style="color:#000">regexp_capture</span>(<span style="color:#000">line</span>, <span style="color:#c41a16">&#39;ts=([^,]+)&#39;</span>, <span style="color:#1c01ce">1</span>);
<span style="color:#a90d91">update</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">set</span> <span style="color:#a90d91">level</span> <span style="color:#000">=</span> <span style="color:#000">regexp_capture</span>(<span style="color:#000">line</span>, <span style="color:#c41a16">&#39;level=([^,]+)&#39;</span>, <span style="color:#1c01ce">1</span>);
<span style="color:#a90d91">update</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">set</span> <span style="color:#000">message</span> <span style="color:#000">=</span> <span style="color:#000">regexp_capture</span>(<span style="color:#000">line</span>, <span style="color:#c41a16">&#39;message=([^,]+)&#39;</span>, <span style="color:#1c01ce">1</span>);
</code></pre></div><p>Now each log field is stored in a separate column:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">ts</span>, <span style="color:#a90d91">level</span>, <span style="color:#000">message</span> <span style="color:#a90d91">from</span> <span style="color:#000">app_log</span> <span style="color:#a90d91">limit</span> <span style="color:#1c01ce">5</span>;
</code></pre></div><pre tabindex="0"><code>┌─────────────────────┬───────┬────────────────────────┐
│         ts          │ level │        message         │
├─────────────────────┼───────┼────────────────────────┤
│ 2023-02-26 13:00:00 │ INFO  │ begin processing       │
│ 2023-02-26 13:01:00 │ INFO  │ processed 1000 records │
│ 2023-02-26 13:02:00 │ INFO  │ processed 2000 records │
│ 2023-02-26 13:03:00 │ INFO  │ processed 3000 records │
│ 2023-02-26 13:03:25 │ ERROR │ invalid record data    │
└─────────────────────┴───────┴────────────────────────┘
</code></pre><p>Neat!</p>
<h2 id="streaming-query-results-to-a-file">Streaming Query Results to a File</h2>
<p>Suppose we want to export the ERROR log lines into a separate file. Let&rsquo;s use <code>fileio_append</code> for that:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#a90d91">sum</span>(
  <span style="color:#000">fileio_append</span>(<span style="color:#c41a16">&#39;error.log&#39;</span>, <span style="color:#000">printf</span>(<span style="color:#c41a16">&#39;%s: %s&#39;</span>, <span style="color:#000">ts</span>, <span style="color:#000">message</span>) <span style="color:#000">||</span> <span style="color:#a90d91">char</span>(<span style="color:#1c01ce">10</span>))
) <span style="color:#a90d91">from</span> <span style="color:#000">app_log</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">level</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;ERROR&#39;</span>;
</code></pre></div><p>This is <code>error.log</code> after the export:</p>
<pre tabindex="0"><code>2023-02-26 13:03:25: invalid record data
</code></pre><h2 id="importing-all-files-in-a-directory">Importing All Files in a Directory</h2>
<p>Suppose we have multiple log files:</p>
<pre tabindex="0"><code>app.log.1
app.log.2
app.log.3
...
</code></pre><p>Let&rsquo;s import them all at once using the <code>filio_ls()</code> function.</p>
<p>First, we&rsquo;ll look at the files to make sure we&rsquo;re loading the correct data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">fileio_ls</span>(<span style="color:#c41a16">&#39;logs&#39;</span>)
<span style="color:#a90d91">where</span> <span style="color:#000">name</span> <span style="color:#a90d91">like</span> <span style="color:#c41a16">&#39;logs/app.log%&#39;</span>;
</code></pre></div><pre tabindex="0"><code>┌────────────────┬───────┬────────────┬──────┐
│      name      │ mode  │   mtime    │ size │
├────────────────┼───────┼────────────┼──────┤
│ logs/app.log.2 │ 33188 │ 1677425479 │ 316  │
│ logs/app.log.3 │ 33188 │ 1677425496 │ 377  │
│ logs/app.log.1 │ 33188 │ 1677425467 │ 316  │
└────────────────┴───────┴────────────┴──────┘
</code></pre><p>Seems fine. Now let&rsquo;s import them into the <code>logs</code> table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">logs</span>(<span style="color:#000">fname</span> <span style="color:#a90d91">text</span>, <span style="color:#000">line</span> <span style="color:#a90d91">text</span>);
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">files</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#000">name</span> <span style="color:#a90d91">from</span> <span style="color:#000">fileio_ls</span>(<span style="color:#c41a16">&#39;logs&#39;</span>)
  <span style="color:#a90d91">where</span> <span style="color:#000">name</span> <span style="color:#a90d91">like</span> <span style="color:#c41a16">&#39;logs/app.log%&#39;</span>
)
<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">logs</span>(<span style="color:#000">fname</span>, <span style="color:#000">line</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">files</span>.<span style="color:#000">name</span>, <span style="color:#000">value</span> <span style="color:#a90d91">from</span> <span style="color:#000">fileio_scan</span>(<span style="color:#000">files</span>.<span style="color:#000">name</span>), <span style="color:#000">files</span>;
</code></pre></div><p>Let&rsquo;s double-check that all logs are imported:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">fname</span>, <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">logs</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">fname</span>;
</code></pre></div><pre tabindex="0"><code>┌────────────────┬──────────┐
│     fname      │ count(*) │
├────────────────┼──────────┤
│ logs/app.log.1 │ 5        │
│ logs/app.log.2 │ 5        │
│ logs/app.log.3 │ 6        │
└────────────────┴──────────┘
</code></pre><p>Looks fine!</p>
<h2 id="installation-and-usage">Installation and Usage</h2>
<ol>
<li>
<p>Download the <a href="https://github.com/nalgeon/sqlean/releases/latest">latest release</a></p>
</li>
<li>
<p>Use with SQLite command-line interface:</p>
</li>
</ol>
<pre tabindex="0"><code>sqlite&gt; .load ./fileio
sqlite&gt; select * from fileio_read('data.txt');
</code></pre><p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/install.md">How to Install an Extension</a> for usage with IDE, Python, etc.</p>
<p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/fileio.md">Extension Documentation</a> for reference.</p>
]]></content:encoded></item><item><title>Comparing by Offset with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-offset/</link><pubDate>Thu, 16 Feb 2023 14:00:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-offset/</guid><description>Comparing records with neighbors and boundaries.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Previously we&rsquo;ve covered <a href="/sql-window-functions-ranking/">ranking</a> window functions.</p>
<p>Comparing by offset means looking at the difference between neighboring values. For example, if you compare the countries ranked 5th and 6th in the world in terms of GDP, how different are they? What about 1st and 6th?</p>
<p>Sometimes we compare with boundaries instead of neighbors. For example, there are 50 top tennis players in the world, and Maria Sakkari is ranked 10th. How do her stats compare to Iga Swiatek, who is ranked 1st? How does she compare to Lin Zhou, who is ranked 50th?</p>
<p>We will compare records from the <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#comparing-with-neighbors">Comparing with neighbors</a></li>
<li><a href="#comparing-to-boundaries">Comparing to boundaries</a></li>
<li><a href="#window-partition-frame">Window, partition, frame</a></li>
<li><a href="#comparing-to-boundaries-revisited">Comparing to boundaries revisited</a></li>
<li><a href="#offset-functions">Offset functions</a></li>
<li><a href="#keep-it-up">Keep it up</a></li>
</ul>
<h2 id="comparing-with-neighbors">Comparing with neighbors</h2>
<p>Let&rsquo;s arrange employees by salary and see if the gap between neighbors is large:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before comparing with previous"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="lag-after-perc.png" width="300" alt="After comparing with previous"/></figure>
</div>
</div>
<p>The <code>diff</code> column shows how much the employee&rsquo;s salary differs from the previous colleague&rsquo;s salary. As you can see, there are no significant gaps. The largest ones are Diane and Bob (11%) and Irene and Frank (15%).</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table in ascending order of salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last, peeking at the salary of the previous employee at each step:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="lag/03.png" width="300" alt="Compare with previous step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="lag/04.png" width="300" alt="Compare with previous step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="lag/05.png" width="300" alt="Compare with previous step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="lag/06.png" width="300" alt="Compare with previous step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="lag/07.png" width="300" alt="Compare with previous step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="lag.gif" width="300" alt="Compare with previous animation"/>
</figure>
</div>
</div>
<p>As you can see, the window here covers the current and previous records. It shifts down at every step (slides). It&rsquo;s a reasonable interpretation; you can set a sliding window in SQL. But such windows have more complex syntax, so we will postpone them until a later chapter.</p>
<p>Instead, let&rsquo;s take a simpler and more familiar window — all records ordered in ascending order of <code>salary</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="lag-frame.png" width="300" alt="Window ordered by salary"/>
</figure>
</div>
</div>
<p>To peek at the previous employee&rsquo;s salary at each step, we will use the <code>lag()</code> window function:</p>
<pre tabindex="0"><code>lag(salary, 1) over w
</code></pre><p>The <code>lag()</code> function returns a value several rows back from the current one. In our case — the <code>salary</code> from the previous record.</p>
<p>Let&rsquo;s add a window and a window function to the original query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>prev</code> column shows the salary of the previous employee. Now all that remains is to calculate the difference between <code>prev</code> and <code>salary</code> as a percentage:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">emp</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
    <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
  <span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>)
)
<span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">round</span>((<span style="color:#000">salary</span> <span style="color:#000">-</span> <span style="color:#000">prev</span>)<span style="color:#000">*</span><span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#000">prev</span>) <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">emp</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>We can get rid of the intermediate <code>emp</code> table expression by substituting a window function call instead of <code>prev</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">round</span>(
    (<span style="color:#000">salary</span> <span style="color:#000">-</span> <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>)<span style="color:#000">*</span><span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Here we replaced <code>prev</code> → <code>lag(salary, 1) over w</code>. The database engine replaces the <code>function_name(...) over window_name</code> statement with the specific value that the function returned. So the window function can be called right inside the calculations, and you will often find such queries in the documentation and examples.</p>
<div class="boxed">
<h3>✎ Exercise: Sibling employee salary</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="comparing-to-boundaries">Comparing to boundaries</h2>
<p>Let&rsquo;s see how an employee&rsquo;s salary compares to the minimum and maximum wages in their department:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before partition boundaries"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="nth-after.png" width="300" alt="After partition boundaries"/></figure>
</div>
</div>
<p>For each employee, the <code>low</code> column shows the minimum salary of their department, and the <code>high</code> column shows the maximum.</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table by department, and each department — in ascending order of salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last, peeking at the smallest and largest salaries in the department at each step:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="nth/03.png" width="300" alt="Partition boundaries step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="nth/04.png" width="300" alt="Partition boundaries step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="nth/05.png" width="300" alt="Partition boundaries step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="nth/06.png" width="300" alt="Partition boundaries step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="nth/07.png" width="300" alt="Partition boundaries step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
    <img src="nth.gif" width="300" alt="Partition boundaries animation"/>
</figure>
</div>
</div>
<p>The window consists of three partitions. At each step, the partition covers the entire department of the employee. The records within the partition are ordered by salary. So the minimum and maximum salaries are always on the boundaries of the partition:</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary
)
</code></pre><p>It would be convenient to use the <code>lag()</code> and <code>lead()</code> functions to get the salary range in the department. But they look at a fixed number of rows backward or forward. We need something else:</p>
<ul>
<li><code>low</code> — salary of the first employee in the window partition;</li>
<li><code>high</code> — salary of the last employee in the partition.</li>
</ul>
<p>Fortunately, there are window functions precisely for this:</p>
<pre tabindex="0"><code>first_value(salary) over w as low,
last_value(salary) over w as high
</code></pre><p>Let&rsquo;s add a window and a window function to the original query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">first_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#000">last_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p><code>low</code> is calculated correctly, while <code>high</code> is obviously wrong. Instead of being equal to the department&rsquo;s maximum salary, it varies from employee to employee. We&rsquo;ll deal with it in a moment.</p>
<h2 id="window-partition-frame">Window, partition, frame</h2>
<p>So far, everything sounded reasonable:</p>
<ul>
<li>there is a window that consists of one or more partitions;</li>
<li>records inside the partition are ordered by a specific column.</li>
</ul>
<p>In the previous step, we divided the window into three partitions by departments and ordered the records within the partitions by salary:</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary
)
</code></pre><p>Let&rsquo;s say the engine executes our query, and the current record is Henry from the IT department. We expect <code>first_value()</code> to return the first record of the IT partition (<code>salary = 84</code>) and <code>last_value()</code> to return the last one (<code>salary = 120</code>). Instead, <code>last_value()</code> returns <code>salary = 104</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expectation<br/>
    <figure><img src="frame-expectation.png" width="300" alt="Frame expectation"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    reality<br/>
    <figure><img src="frame-reality.png" width="300" alt="Frame reality"/></figure>
</div>
</div>
<p>The reason is that the <code>first_value()</code> and <code>last_value()</code> functions do not work directly with a window partition. They work with a <em>frame</em> inside the partition:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure>
        <img src="frame-defaults.png" width="266" alt="Frame defaults"/>
    </figure>
</div>
</div>
<p>The frame is in the same partition as the current record (Henry):</p>
<ul>
<li>beginning of the frame = beginning of the partition (Emma);</li>
<li>end of the frame = last record with a <code>salary</code> value equal to the current record (Irene).</li>
</ul>
<div class="boxed">
<h3>Where the frame ends</h3>
<p>People often have questions about the frame end. Let's consider some examples to make it clearer. The current record in each example is Henry.</p>
<pre><code>Emma    84  ← frame start
Grace   90
Henry  104  ← current row
Irene  104  ← frame end
Frank  120</code></pre>
<p>The end of the frame is the last record with a salary value equal to the current record. The current record is Henry, with a salary of 104. The last record with a salary of 104 is Irene. Therefore, the end of the frame is Irene.</p>
<pre><code>Emma    84  ← frame start
Grace   90
Henry  104  ← current row and frame end
Irene  110
Frank  120</code></pre>
<p>Let's say Irene's salary increased to 110. The current record is Henry, with a salary of 104. The last record with a salary of 104 is also Henry. Therefore, the end of the frame is Henry.</p>
<pre><code>Emma    84  ← frame start
Grace   90
Henry  104  ← current row
Irene  104
Frank  104  ← frame end</code></pre>
<p>Let's say Franks's salary decreased to 104. The current record is Henry, with a salary of 104. The last record with a salary of 104 is Frank. Therefore, the end of the frame is Frank.</p>
</div>
<p>The partition is fixed, but the frame depends on the current record and is constantly changing:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <strong>Partition</strong><br/>
    <figure>
        <img src="partition.gif" width="300" alt="Partition"/>
    </figure>
</div>
<div class="col-xs-12 col-sm-5">
    <strong>Frame</strong><br/>
    <figure>
        <img src="frame.gif" width="300" alt="Frame"/>
    </figure>
</div>
</div>
<p><code>first_value()</code> returns the first row of the frame, not the partition. But since the beginning of the frame coincides with the beginning of the partition, the function performed as we expected.</p>
<p><code>last_value()</code> returns the last row of the frame, not the partition. That is why our query returned each employee&rsquo;s salary instead of the maximum salary for each department.</p>
<p>For <code>last_value()</code> to work as we expect, we will have to &ldquo;nail&rdquo; the frame boundaries to the partition boundaries. Then, for each partition, the frame will exactly match it:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
    <img src="frames.png" width="600" alt="Frames"/>
</figure>
</div>
</div>
<p>Let&rsquo;s summarize how <code>first_value()</code> and <code>last_value()</code> work:</p>
<ol>
<li>A window consists of one or more partitions (<code>partition by department</code>).</li>
<li>Records inside the partition are ordered by a specific column (<code>order by salary</code>).</li>
<li>Each record in the partition has its own frame. By default, the beginning of the frame coincides with the beginning of the partition, and the end is different for each record.</li>
<li>The end of the frame can be attached to the end of the partition, so that the frame exactly matches the partition.</li>
<li>The <code>first_value()</code> function returns the value from the first row of the frame.</li>
<li>The <code>last_value()</code> function returns the value from the last row of the frame.</li>
</ol>
<p>Now let&rsquo;s figure out how to nail the frame to the partition — and finish with a department salary range query.</p>
<blockquote>
<p><strong>Note</strong>. If you don&rsquo;t quite understand what a frame is and how it is formed, it&rsquo;s okay. Frames are one of the most challenging topics in SQL windows, and they cannot be fully explained in one go. We will study frames throughout the book and gradually sort everything out.</p>
</blockquote>
<h2 id="comparing-to-boundaries-revisited">Comparing to boundaries revisited</h2>
<p>Let&rsquo;s take our window:</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary
)
</code></pre><p>And configure it so that the frame exactly matches the partition (department):</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary
  rows between unbounded preceding and unbounded following
)
</code></pre><p>Let&rsquo;s not explore the <code>rows between</code> statement now — its time will come in a later chapter. Thanks to it, the frame matches the partition, which means <code>last_value()</code> will return the maximum salary for the department:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">first_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#000">last_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#000">unbounded</span> <span style="color:#000">following</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now the engine calculates <code>low</code> and <code>high</code> as we did it manually:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
    <img src="nth.gif" width="300" alt="Partition boundaries animation"/>
</figure>
</div>
</div>
<div class="boxed">
<h3>✎ Exercise: City salary ratio</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="offset-functions">Offset functions</h2>
<p>Here are the offset window functions:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lag(value, offset)</code></td>
<td>returns the <code>value</code> from the record that is <code>offset</code> rows behind the current one</td>
</tr>
<tr>
<td><code>lead(value, offset)</code></td>
<td>returns the <code>value</code> from the record that is <code>offset</code> rows ahead of the current one</td>
</tr>
<tr>
<td><code>first_value(value)</code></td>
<td>returns the <code>value</code> from the first row of the frame</td>
</tr>
<tr>
<td><code>last_value(value)</code></td>
<td>returns the <code>value</code> from the last row of the frame</td>
</tr>
<tr>
<td><code>nth_value(value, n)</code></td>
<td>returns the <code>value</code> from the <code>n</code>-th row of the frame</td>
</tr>
</tbody>
</table>
<p><code>lag()</code> and <code>lead()</code> act relative to the current row, looking forward or backward a certain number of rows.</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
    <img src="frame-lag-lead.png" width="266" alt="Lag/lead frame"/>
</figure>
</div>
</div>
<p><code>first_value()</code>, <code>last_value()</code>, and <code>nth_value()</code> act relative to the frame boundaries, selecting the specified row within the frame.</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure>
        <img src="frame-first-last.png" width="300" alt="First/last value frame"/>
    </figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure>
        <img src="frame-nth.png" width="300" alt="Nth value frame"/>
    </figure>
</div>
</div>
<p>For the frame boundaries to match the partition boundaries (or the window boundaries if there is only one partition), use the following statement in the window definition:</p>
<pre tabindex="0"><code>rows between unbounded preceding and unbounded following
</code></pre><h2 id="keep-it-up">Keep it up</h2>
<p>You have learned how to compare rows with neighbors and window boundaries. In the next chapter we will <a href="/sql-window-functions-aggregation/">aggregate data</a>!</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Building a Pivot Table in SQLite</title><link>https://antonz.org/sqlite-pivot-table/</link><pubDate>Thu, 09 Feb 2023 14:00:00 +0000</pubDate><guid>https://antonz.org/sqlite-pivot-table/</guid><description>Three ways to create a pivot table in plain SQL.</description><content:encoded><![CDATA[<p>Suppose we have a <code>sales</code> table with product incomes for the years 2020-2023:</p>
<pre tabindex="0"><code>┌─────────┬──────┬────────┐
│ product │ year │ income │
├─────────┼──────┼────────┤
│ alpha   │ 2020 │ 100    │
│ alpha   │ 2021 │ 120    │
│ alpha   │ 2022 │ 130    │
│ alpha   │ 2023 │ 140    │
│ beta    │ 2020 │ 10     │
│ beta    │ 2021 │ 20     │
│ beta    │ 2022 │ 40     │
│ beta    │ 2023 │ 80     │
│ gamma   │ 2020 │ 80     │
│ gamma   │ 2021 │ 75     │
│ gamma   │ 2022 │ 78     │
│ gamma   │ 2023 │ 80     │
└─────────┴──────┴────────┘
</code></pre><p><a href="https://sqlime.org/#gist:4a46833d948e8635593fec028eb178ba">playground</a> • <a href="./sales.sql">download</a></p>
<p>And we want to transform it into a so-called <em>pivot table</em>, where products serve as rows and years serve as columns:</p>
<pre tabindex="0"><code>┌─────────┬──────┬──────┬──────┬──────┐
│ product │ 2020 │ 2021 │ 2022 │ 2023 │
├─────────┼──────┼──────┼──────┼──────┤
│ alpha   │ 100  │ 120  │ 130  │ 140  │
│ beta    │ 10   │ 20   │ 40   │ 80   │
│ gamma   │ 80   │ 75   │ 78   │ 80   │
└─────────┴──────┴──────┴──────┴──────┘
</code></pre><p>Some DBMS, like SQL Server, have a custom <code>pivot</code> operator to do this. SQLite does not. Still, there are multiple ways to solve the problem. Let&rsquo;s examine them.</p>
<h2 id="1-filtered-totals">1. Filtered totals</h2>
<p>Let&rsquo;s manually extract each year in a separate column and calculate a filtered total income for that year:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">product</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2020&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2021</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2021&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2022</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2022&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2023</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2023&#34;</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span>;
</code></pre></div><p>Here is our pivot table:</p>
<pre tabindex="0"><code>┌─────────┬──────┬──────┬──────┬──────┐
│ product │ 2020 │ 2021 │ 2022 │ 2023 │
├─────────┼──────┼──────┼──────┼──────┤
│ alpha   │ 100  │ 120  │ 130  │ 140  │
│ beta    │ 10   │ 20   │ 40   │ 80   │
│ gamma   │ 80   │ 75   │ 78   │ 80   │
└─────────┴──────┴──────┴──────┴──────┘
</code></pre><p>This universal method works in every DBMS, not only SQLite. Even if your DB engine does not support <code>filter</code>, you can always resort to using <code>case</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">product</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#a90d91">case</span> <span style="color:#a90d91">when</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">then</span> <span style="color:#000">income</span> <span style="color:#a90d91">end</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2020&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#a90d91">case</span> <span style="color:#a90d91">when</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2021</span> <span style="color:#a90d91">then</span> <span style="color:#000">income</span> <span style="color:#a90d91">end</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2021&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#a90d91">case</span> <span style="color:#a90d91">when</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2022</span> <span style="color:#a90d91">then</span> <span style="color:#000">income</span> <span style="color:#a90d91">end</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2022&#34;</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#a90d91">case</span> <span style="color:#a90d91">when</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2023</span> <span style="color:#a90d91">then</span> <span style="color:#000">income</span> <span style="color:#a90d91">end</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2023&#34;</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span>;
</code></pre></div><details>
    <summary class="summary-ai">explain</summary>
    <div class="boxed">
        <p><strong><abbr title="Generated by AI, verified by human">Human-verified explanation</abbr></strong></p>
        <p>This SQL query shows the total income of each product for each year.</p>
        <p>The first line of the query selects the <code>product</code> column from the table.</p>
        <p>The next four lines use the <code>sum</code> function to calculate the total <code>income</code> for each year (2020, 2021, 2022, and 2023) using a <code>case</code> statement to only include income values where the <code>year</code> matches the specified year. The <code>as</code> keyword is used to give each calculated sum a column alias that corresponds to the year.</p>
        <p>The <code>from</code> clause specifies that the data is being selected from the <code>sales</code> table.</p>
        <p>The <code>group by</code> clause groups the data by <code>product</code>, which means that the query will return one row for each unique <code>product</code> value in the <code>sales</code> table.</p>
        <p>Finally, the <code>order by</code> clause orders the results by <code>product</code> in ascending order.</p>
    </div>
</details>
<p>Using <code>filter</code> is probably the easiest way when we know the columns in advance. But what if we don&rsquo;t?</p>
<h2 id="2-dynamic-sql">2. Dynamic SQL</h2>
<p>Let&rsquo;s build our query dynamically without hardcoding year values:</p>
<ol>
<li>Extract distinct year values.</li>
<li>Generate a <code>...filter (where year = X) as &quot;X&quot;</code> query line for each year.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">years</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#a90d91">year</span> <span style="color:#a90d91">as</span> <span style="color:#a90d91">year</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
),
<span style="color:#000">lines</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;select product &#39;</span> <span style="color:#a90d91">as</span> <span style="color:#000">part</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;, sum(income) filter (where year = &#39;</span> <span style="color:#000">||</span> <span style="color:#a90d91">year</span> <span style="color:#000">||</span> <span style="color:#c41a16">&#39;) as &#34;&#39;</span> <span style="color:#000">||</span> <span style="color:#a90d91">year</span> <span style="color:#000">||</span> <span style="color:#c41a16">&#39;&#34; &#39;</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">years</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;from sales group by product order by product;&#39;</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">group_concat</span>(<span style="color:#000">part</span>, <span style="color:#c41a16">&#39;&#39;</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">lines</span>;
</code></pre></div><p>This query returns the same SQL we wrote manually at the previous step (minus formatting):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">product</span> , <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2020&#34;</span> , <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2021</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2021&#34;</span> , <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2022</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2022&#34;</span> , <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">filter</span> (<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2023</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;2023&#34;</span> <span style="color:#a90d91">from</span> <span style="color:#000">sales</span> <span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span> <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">product</span>;
</code></pre></div><p>Now we have to execute it. For that, let&rsquo;s use the <code>eval(sql)</code> function available as part of the <a href="https://github.com/nalgeon/sqlean/blob/main/docs/define.md"><code>define</code></a> extension:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">load_extension</span>(<span style="color:#c41a16">&#39;./define&#39;</span>);

<span style="color:#a90d91">with</span> <span style="color:#000">years</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#a90d91">year</span> <span style="color:#a90d91">as</span> <span style="color:#a90d91">year</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
),
<span style="color:#000">lines</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;drop view if exists v_sales; &#39;</span> <span style="color:#a90d91">as</span> <span style="color:#000">part</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;create view v_sales as &#39;</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;select product &#39;</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;, sum(income) filter (where year = &#39;</span> <span style="color:#000">||</span> <span style="color:#a90d91">year</span> <span style="color:#000">||</span> <span style="color:#c41a16">&#39;) as &#34;&#39;</span> <span style="color:#000">||</span> <span style="color:#a90d91">year</span> <span style="color:#000">||</span> <span style="color:#c41a16">&#39;&#34; &#39;</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">years</span>
  <span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
  <span style="color:#a90d91">select</span> <span style="color:#c41a16">&#39;from sales group by product order by product;&#39;</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">eval</span>(<span style="color:#000">group_concat</span>(<span style="color:#000">part</span>, <span style="color:#c41a16">&#39;&#39;</span>))
<span style="color:#a90d91">from</span> <span style="color:#000">lines</span>;
</code></pre></div><details>
    <summary class="summary-ai">explain</summary>
    <div class="boxed">
        <p><strong><abbr title="Generated by AI, verified by human">Human-verified explanation</abbr></strong></p>
        <p>This SQL query creates a view named <code>v_sales</code> that shows the total income of each product for each year. The query uses a common table expression (CTE) to generate a list of distinct years from the <code>sales</code> table. Then, it defines another CTE named <code>lines</code> that contains a series of unioned select statements to generate the SQL commands to create the view.</p>
        <p>The first select statement in <code>lines</code> generates a <code>drop view if exists</code> command to ensure that any previous version of the view is removed before creating the new one.</p>
        <p>The second select statement generates a <code>create view</code> command to create the <code>v_sales</code> view.</p>
        <p>The third select statement generates a <code>select</code> command to select the product column from the <code>sales</code> table.</p>
        <p>The fourth select statement generates a <code>sum</code> command that sums the income for each product for a given year. It uses the <code>filter</code> clause to filter the sum by year. The year value is passed in from the <code>years</code> CTE using string concatenation.</p>
        <p>The fifth select statement specifies the <code>from</code> and <code>group by</code> clauses for the SQL statement. It groups the results by product and orders them by product.</p>
        <p>Finally, the last select statement concatenates all the SQL commands generated in the <code>lines</code> CTE using the <code>group_concat</code> function and evaluates the resulting SQL string using the <code>eval</code> function. The resulting SQL commands create the <code>v_sales</code> view with the desired structure.</p>
    </div>
</details>
<p>Here, we are building a <code>v_sales</code> view which executes the query we&rsquo;ve constructed previously. Let&rsquo;s select the data from it:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">v_sales</span>;
</code></pre></div><pre tabindex="0"><code>┌─────────┬──────┬──────┬──────┬──────┐
│ product │ 2020 │ 2021 │ 2022 │ 2023 │
├─────────┼──────┼──────┼──────┼──────┤
│ alpha   │ 100  │ 120  │ 130  │ 140  │
│ beta    │ 10   │ 20   │ 40   │ 80   │
│ gamma   │ 80   │ 75   │ 78   │ 80   │
└─────────┴──────┴──────┴──────┴──────┘
</code></pre><blockquote>
<p>Note: extensions do not work in the playground, so you&rsquo;ll have to use your local SQLite to reproduce this step.</p>
</blockquote>
<p>Nice!</p>
<h2 id="3-pivot-extension">3. Pivot extension</h2>
<p>If dynamic SQL seems too much for you, there is a more straightforward solution — the <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997052157"><code>pivotvtab</code></a> extension.</p>
<p>With it, we only have to provide three selects to build a pivot:</p>
<ol>
<li>Select row values.</li>
<li>Select column values.</li>
<li>Select cell values.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">load_extension</span>(<span style="color:#c41a16">&#39;./pivotvtab&#39;</span>);

<span style="color:#a90d91">create</span> <span style="color:#000">virtual</span> <span style="color:#a90d91">table</span> <span style="color:#000">v_sales</span> <span style="color:#a90d91">using</span> <span style="color:#000">pivot_vtab</span> (
  <span style="color:#177500">-- rows
</span><span style="color:#177500"></span>  (<span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#000">product</span> <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>),
  <span style="color:#177500">-- columns
</span><span style="color:#177500"></span>  (<span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">year</span> <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>),
  <span style="color:#177500">-- cells
</span><span style="color:#177500"></span>  (<span style="color:#a90d91">select</span> <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#a90d91">from</span> <span style="color:#000">sales</span> <span style="color:#a90d91">where</span> <span style="color:#000">product</span> <span style="color:#000">=</span> <span style="color:#000">?</span><span style="color:#1c01ce">1</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">?</span><span style="color:#1c01ce">2</span>)
);
</code></pre></div><details>
    <summary class="summary-ai">explain</summary>
    <div class="boxed">
        <p><strong><abbr title="Generated by AI, verified by human">Human-verified explanation</abbr></strong></p>
        <p>This SQL query creates a virtual table called <code>v_sales</code> using the <code>pivot_vtab</code> module from the <code>pivotvtab</code> extension. A virtual table is a special type of table that does not store data on disk, but rather generates it on the fly based on a query.</p>
        <p>The <code>pivot_vtab</code> command takes three arguments:</p>
        <ol>
            <li>A subquery that specifies the rows of the virtual table. In this case, the subquery selects all distinct values from the <code>product</code> column of the <code>sales</code> table.</li>
            <li>A subquery that specifies the columns of the virtual table. In this case, the subquery selects all distinct values from the <code>year</code> column of the <code>sales</code> table, and duplicates them. This is because the <code>pivot_vtab</code> module expects two values for each column, one for the column value and one for the column name. By duplicating the <code>year</code> value, we are effectively using it as both the value and name for the column.</li>
            <li>A subquery that specifies the values of the virtual table. In this case, the subquery selects the sum of the <code>income</code> column from the <code>sales</code> table for a specific <code>product</code> and <code>year</code> combination. The <code>?1</code> and <code>?2</code> placeholders in the subquery represent parameters that will be filled in at runtime with the actual values for <code>product</code> and <code>year</code>.</li>
        </ol>
        <p>Overall, this query creates a virtual table that pivots the data from the <code>sales</code> table, with the <code>product</code> values as rows, the <code>year</code> values as columns, and the sum of <code>income</code> as the cell values.</p>
    </div>
</details>
<p>The extension does the rest:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">v_sales</span>;
</code></pre></div><pre tabindex="0"><code>┌─────────┬──────┬──────┬──────┬──────┐
│ product │ 2020 │ 2021 │ 2022 │ 2023 │
├─────────┼──────┼──────┼──────┼──────┤
│ alpha   │ 100  │ 120  │ 130  │ 140  │
│ beta    │ 10   │ 20   │ 40   │ 80   │
│ gamma   │ 80   │ 75   │ 78   │ 80   │
└─────────┴──────┴──────┴──────┴──────┘
</code></pre><p>That&rsquo;s even easier than the <code>pivot</code> operator in SQL Server!</p>
<h2 id="summary">Summary</h2>
<p>There are three ways to build a pivot table in SQLite:</p>
<ol>
<li>Using plain SQL and <code>sum()</code> + <code>filter</code> expressions.</li>
<li>Building and executing a dynamic query with the <code>eval()</code> function.</li>
<li>Utilizing the <code>pivotvtab</code> extension.</li>
</ol>
<p>P.S. Interested in using SQL for data analytics? Check out my book — <a href="/sql-window-functions-book">SQL Window Functions Explained</a></p>
]]></content:encoded></item><item><title>Ranking Data with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-ranking/</link><pubDate>Wed, 08 Feb 2023 13:30:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-ranking/</guid><description>Making ratings and dividing data into partitions.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Ranking means coming up with all kinds of ratings, from the winners of the World Swimming Championships to the Forbes 500.</p>
<p>We will rank records from the toy <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#window-function">Window function</a></li>
<li><a href="#window-ordering-vs-result-ordering">Window ordering vs. result ordering</a></li>
<li><a href="#sorting-uniqueness">Sorting uniqueness</a></li>
<li><a href="#multiple-windows">Multiple windows</a></li>
<li><a href="#partitions">​Partitions</a></li>
<li><a href="#groups">Groups</a></li>
<li><a href="#ranking-functions">Ranking functions</a></li>
<li><a href="#keep-it-up">Keep it up</a></li>
</ul>
<div class="boxed">
<h3>Databases</h3>
<p>All modern relational databases support window functions to some extent. I tested this article on three of them:</p>
<ul>
  <li>MySQL 8.0.2+ (MariaDB 10.2+)</li>
  <li>PostgreSQL 11+</li>
  <li>SQLite 3.28+</li>
</ul>
<p>Windows are fully implemented in PostgreSQL, and almost fully in SQLite. MySQL has all the core features but lacks some of the advanced ones.</p>
<p>Oracle 11g+, MS SQL 2012+, and Google BigQuery are also fine. They lack certain advanced capabilities, just like MySQL. If you use one of them — the article will also be helpful.</p>
<p>You can use any of the mentioned DBMS if you have one available. Or an <a href="https://sqlime.org/#employees.db">online playground</a>.</p>
</div>
<h2 id="window-function">Window function</h2>
<p>Let&rsquo;s rank employees by salary:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before ranking"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="rank-after.png" width="300" alt="After ranking"/></figure>
</div>
</div>
<p>Note that employees with the same salary received the same rank (Henry and Irene, Cindy and Dave).</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table in descending order of salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s go from the first row to the last and calculate the rank of each record. We will start with one and increase the rank every time the salary value is less than the previous one:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="rank/03.png" width="300" alt="Ranking step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="rank/04.png" width="300" alt="Ranking step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="rank/05.png" width="300" alt="Ranking step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="rank/06.png" width="300" alt="Ranking step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="rank/07.png" width="300" alt="Ranking step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>To compute the rank, at each step we will look at the <code>salary</code> values, highlighted with a blue frame. Let&rsquo;s call these values a <em>window</em>.</p>
<p>Let&rsquo;s describe the window contents in plain English:</p>
<ol>
<li>These are the values of the salary column.</li>
<li>They are ordered from larger to smaller values.</li>
</ol>
<p>Let&rsquo;s express it in SQL:</p>
<pre tabindex="0"><code>window w as (order by salary desc)
</code></pre><ul>
<li><code>window</code> — a keyword announcing that the window definition will follow;</li>
<li><code>w</code> — the name of the window (could be anything);</li>
<li><code>(order by salary desc)</code> — the window definition (&ldquo;values of the salary column in descending order&rdquo;).</li>
</ul>
<p>Our goal is to calculate the rank over the window <code>w</code>. In SQL, this is written as <code>dense_rank() over w</code>.</p>
<p><code>dense_rank()</code> is a <em>window function</em> that counts the rank over the specified window. The logic of <code>dense_rank()</code> is the same as when we counted manually — start with one and increase the rank every time the next window value differs from the previous one.</p>
<p>Let&rsquo;s add the window definition and the window function to the original query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Here&rsquo;s how the engine executes this query:</p>
<ol>
<li>Take the table specified in <code>from</code>.</li>
<li>Select all records from it.</li>
<li>Calculate the value of <code>dense_rank()</code> for each record using the window <code>w</code>.</li>
<li>Sort the result as specified in <code>order by</code>.</li>
</ol>
<p>Here&rsquo;s an animation of how the engine executes step 3, where the rank is assigned:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="rank.gif" width="300" alt="Ranking animation"/>
</figure>
</div>
</div>
<p>The <code>window</code> clause itself does not affect query results. It only defines the window that we can use in the query. If we remove the <code>dense_rank()</code> call, the query will work as if there is no window:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The window starts working only when a window function in <code>select</code> uses it.</p>
<div class="boxed">
<h3>Window queries in Oracle and MS SQL Server databases</h3>
<p>Neither Oracle nor SQL Server support the <code>window</code> clause. To make a window query work in these databases, move the window definition inside the <code>over</code> clause.</p>
<p>Instead of this:</p>
<pre><code>select
  dense_rank() over w as "rank",
  name, department, salary
from employees
window w as (order by salary desc)
order by "rank", id;
</code></pre>
<p>Do this:</p>
<pre><code>select
  dense_rank() over (
    order by salary desc
  ) as "rank",
  name, department, salary
from employees
order by "rank", id;</code></pre>
</div>
<h2 id="window-ordering-vs-result-ordering">Window ordering vs. result ordering</h2>
<p>People often have questions about window sorting. Let&rsquo;s break them down.</p>
<p>Here is a query that calculates a salary rating:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Let&rsquo;s leave the <code>order by</code> in the window but remove it from the main query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>);
</code></pre></div><p>Nothing has changed. So why use <code>order by</code> in the main query?</p>
<p>The window&rsquo;s <code>order by</code> defines the window sorting, while the main query&rsquo;s <code>order by</code> defines the final result sorting after the rest of the query is complete.</p>
<p>Let&rsquo;s say we want to assign a rank in descending order of salary but sort in the opposite, ascending order:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">asc</span>;
</code></pre></div><p>As you can see, the rank is assigned according to the window sorting (<code>salary desc</code>), and the results are ordered according to the main query sorting (<code>salary asc</code>).</p>
<p>If the query&rsquo;s <code>order by</code> clause is not specified, the result order is undefined. Sometimes it might work out (as in the example with the ascending salary ranking), and sometimes it might not. It&rsquo;s not worth relying on luck, so always specify the order of results explicitly.</p>
<h2 id="sorting-uniqueness">Sorting uniqueness</h2>
<p>Another common question is why to include the <code>id</code> column in the result ordering:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Why use <code>order by rank, id</code> instead of <code>order by rank</code>? To know how to sort employees with the same rank. Without the <code>id</code>, the order of records &ldquo;Henry-Irene&rdquo; and &ldquo;Cindy-Dave&rdquo; is undefined, and the DB engine can arrange them in any order. But with the <code>id</code>, everything is clear: &ldquo;Henry, then Irene&rdquo; and &ldquo;Cindy, then Dave&rdquo;.</p>
<div class="boxed">
<h3>✎ Exercise: Ranking by name</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="multiple-windows">Multiple windows</h2>
<p>Another common question (not related to sorting) is how to define multiple windows in a query.</p>
<p>The answer is to write them in a comma-separated fashion in the <code>window</code> clause:</p>
<pre tabindex="0"><code>select ...
from ...
where ...
window
  w1 as (...),
  w2 as (...),
  w3 as (...)
;
</code></pre><p>For example, let&rsquo;s rank employees by salary both in ascending and descending order:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w1</span> <span style="color:#a90d91">as</span> <span style="color:#000">r_asc</span>,
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w2</span> <span style="color:#a90d91">as</span> <span style="color:#000">r_desc</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span>
  <span style="color:#000">w1</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">asc</span>),
  <span style="color:#000">w2</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><h2 id="partitions">​Partitions</h2>
<p>Let&rsquo;s rank employees by salary for each department independently:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before partitioned ranking"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="partition-after.png" width="300" alt="After partitioned ranking"/></figure>
</div>
</div>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table by department. Within the same department, let&rsquo;s sort in descending order of salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s go from the first row to the last and calculate the rank of each record. We will start with one and increase the rank every time the <code>salary</code> value is less than the previous one. When switching between departments, we will reset the rank back to 1:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="partition/03.png" width="300" alt="Partitioned ranking step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="partition/04.png" width="300" alt="Partitioned ranking step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="partition/05.png" width="300" alt="Partitioned ranking step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="partition/06.png" width="300" alt="Partitioned ranking step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="partition/07.png" width="300" alt="Partitioned ranking step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>To compute the rank, at each step we will look at the <code>salary</code> values, highlighted with a blue frame. It is the <em>window</em> in this case.</p>
<p>The window changes depending on which department the current record belongs to. Let&rsquo;s describe it in plain English:</p>
<ol>
<li>The window is split into several independent partitions — one for each department.</li>
<li>Inside each partition, records are ordered by decreasing salary.</li>
</ol>
<p>Let&rsquo;s express it in SQL:</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary desc
)
</code></pre><ul>
<li><code>partition by department</code> specifies how to split the window into partitions;</li>
<li><code>order by salary desc</code> sets the sorting within the partition.</li>
</ul>
<p>The rank calculation function remains the same — <code>dense_rank()</code>.</p>
<p>Let&rsquo;s add the window definition and the window function to the original query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Here&rsquo;s an animation showing how the engine calculates the rank for each record:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
    <img src="partition.gif" width="300" alt="Partitioned ranking animation"/>
</figure>
</div>
</div>
<div class="boxed">
<h3>✎ Exercise: Salary rating by city</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="groups">Groups</h2>
<p>Let&rsquo;s divide the employees into three groups according to their salary:</p>
<ul>
<li>high-paid,</li>
<li>medium-paid,</li>
<li>low-paid.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before tiles"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="ntile-after.png" width="300" alt="After tiles"/></figure>
</div>
</div>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table in descending order of salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>There are 10 records and 3 groups — which means two groups of 3 records and one of 4 records. For example:</p>
<pre tabindex="0"><code>┌──────┬───────┬────────────┬────────┐
│ tile │ name  │ department │ salary │
├──────┼───────┼────────────┼────────┤
│      │ Frank │ it         │ 120    │
│      │ Henry │ it         │ 104    │
│      │ Irene │ it         │ 104    │
│      │ Alice │ sales      │ 100    │
├──────┼───────┼────────────┼────────┤
│      │ Cindy │ sales      │ 96     │
│      │ Dave  │ sales      │ 96     │
│      │ Grace │ it         │ 90     │
├──────┼───────┼────────────┼────────┤
│      │ Emma  │ it         │ 84     │
│      │ Bob   │ hr         │ 78     │
│      │ Diane │ hr         │ 70     │
└──────┴───────┴────────────┴────────┘
</code></pre><p>To draw the boundaries between the groups, we must analyze all the salaries, sorted in descending order. Therefore, the window is the same as we used for salary rating:</p>
<pre tabindex="0"><code>window w as (order by salary desc)
</code></pre><p>But the function is different — <code>ntile(n)</code>, where <code>n</code> is the number of groups. In our case <code>n = 3</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p><code>ntile(n)</code> splits all records into <code>n</code> groups and returns the group number for each record. If the total number of records (10 in our case) is not divisible by the group size (3), then the former groups will be larger than the latter.</p>
<p><code>ntile()</code> always tries to split the data so that the groups are of the same size. So records with the same salary value may end up in different (adjacent) groups:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">2</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">tile</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬────────────┬────────┐
│ tile │ name  │ department │ salary │
├──────┼───────┼────────────┼────────┤
│ 1    │ Frank │ it         │ 120    │
│ ...  │ ...   │ ...        │ ...    │
│ 1    │ Cindy │ sales      │ 96     │ &lt;-- (!)
├──────┼───────┼────────────┼────────┤
│ 2    │ Dave  │ sales      │ 96     │ &lt;-- (!)
│ ...  │ ...   │ ...        │ ...    │
│ 2    │ Diane │ hr         │ 70     │
└──────┴───────┴────────────┴────────┘
</code></pre><div class="boxed">
<h3>✎ Exercises: Salary groups in cities (+1 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises; that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, though — let's continue.</p>
</div>
<h2 id="ranking-functions">Ranking functions</h2>
<p>Here are the ranking window functions:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row_number()</code></td>
<td>returns the row ordinal number</td>
</tr>
<tr>
<td><code>dense_rank()</code></td>
<td>returns row rank</td>
</tr>
<tr>
<td><code>rank()</code></td>
<td>returns row rank with possible gaps (see below)</td>
</tr>
<tr>
<td><code>ntile(n)</code></td>
<td>splits all rows into <code>n</code> groups and returns the index of the group that the row belongs to</td>
</tr>
</tbody>
</table>
<p>We have already seen <code>dense_rank()</code> and <code>ntile()</code>.</p>
<p><code>row_number()</code> numbers the rows in the order specified in <code>order by</code>. No surprises here.</p>
<p><code>rank()</code> is similar to <code>dense_rank()</code>, and the difference is easier to explain with an example.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">•••</span> <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Let&rsquo;s try substituting <code>•••</code> with <code>dense_rank()</code> and <code>rank()</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
dense_rank<br/>
<pre><code>┌──────┬───────┬────────┐
│ rank │ name  │ salary │
├──────┼───────┼────────┤
│ 1    │ Frank │ 120    │
│ 2    │ Henry │ 104    │
│ 2    │ Irene │ 104    │
│ 3    │ Alice │ 100    │ (!)
│ 4    │ Cindy │ 96     │
│ 4    │ Dave  │ 96     │
│ 5    │ Grace │ 90     │ (!)
│ 6    │ Emma  │ 84     │
│ 7    │ Bob   │ 78     │
│ 8    │ Diane │ 70     │
└──────┴───────┴────────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-6">
rank<br/>
<pre><code>┌──────┬───────┬────────┐
│ rank │ name  │ salary │
├──────┼───────┼────────┤
│ 1    │ Frank │ 120    │
│ 2    │ Henry │ 104    │
│ 2    │ Irene │ 104    │
│ 4    │ Alice │ 100    │ (!)
│ 5    │ Cindy │ 96     │
│ 5    │ Dave  │ 96     │
│ 7    │ Grace │ 90     │ (!)
│ 8    │ Emma  │ 84     │
│ 9    │ Bob   │ 78     │
│ 10   │ Diane │ 70     │
└──────┴───────┴────────┘</code></pre>
</div>
</div>
<p><code>dense_rank()</code> assigns Alice the third place, while <code>rank()</code> assigns the fourth because Henry and Irene already occupied the second and third. It is the same with Grace after Cindy and Dave. That&rsquo;s the whole difference.</p>
<h2 id="keep-it-up">Keep it up</h2>
<p>You have learned what &ldquo;window&rdquo; and &ldquo;window functions&rdquo; are and how to use them to rank data. In the next chapter, we will deal with <a href="/sql-window-functions-offset/">window offsets</a> and comparisons!</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Cherry-Picked Features from Go 1.20</title><link>https://antonz.org/go-1-20/</link><pubDate>Tue, 07 Feb 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/go-1-20/</guid><description>Multi-errors, context cancellation cause, new date formats, and other notable changes.</description><content:encoded><![CDATA[<p>Go 1.20 brought a lot of new features and improvements. In this post, I&rsquo;d like to review the ones that caught my eye. This is by no means an exhaustive list; for that, see the official <a href="https://tip.golang.org/doc/go1.20">release notes</a>.</p>
<p>These are the topics for review:</p>
<ul>
<li><a href="#multi-errors">Multi-errors</a></li>
<li><a href="#context-canceled-cause">&lsquo;Context Canceled&rsquo; Cause</a></li>
<li><a href="#new-date-formats">New Date Formats</a></li>
<li><a href="#slice-to-array-conversion">Slice to Array Conversion</a></li>
<li><a href="#other-notable-changes">Other Notable Changes</a></li>
</ul>
<p>Each section has a playground link, so check those out.</p>
<h2 id="multi-errors">Multi-errors</h2>
<p>The &ldquo;errors as values&rdquo; concept (as opposed to exceptions) has gained renewed popularity in modern languages such as Go and Rust. You know this well because it&rsquo;s impossible to take a step without tripping over an error value in Go.</p>
<p>Go 1.20 has brought us new joy — the combination of errors through <code>errors.Join()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">errRaining</span> <span style="color:#000">:=</span> <span style="color:#000">errors</span>.<span style="color:#000">New</span>(<span style="color:#c41a16">&#34;it&#39;s raining&#34;</span>)
<span style="color:#000">errWindy</span> <span style="color:#000">:=</span> <span style="color:#000">errors</span>.<span style="color:#000">New</span>(<span style="color:#c41a16">&#34;it&#39;s windy&#34;</span>)
<span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">errors</span>.<span style="color:#000">Join</span>(<span style="color:#000">errRaining</span>, <span style="color:#000">errWindy</span>)
</code></pre></div><p>Now <code>err</code> is both <code>errRaining</code> and <code>errWindy</code> at the same time. The standard functions <code>errors.Is()</code> and <code>errors.As()</code> can work with this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">if</span> <span style="color:#000">errors</span>.<span style="color:#000">Is</span>(<span style="color:#000">err</span>, <span style="color:#000">errRaining</span>) {
    <span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#c41a16">&#34;ouch!&#34;</span>)
}
<span style="color:#177500">// ouch!
</span></code></pre></div><p><code>fmt.Errorf()</code> has also learned to combine errors:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">fmt</span>.<span style="color:#000">Errorf</span>(
    <span style="color:#c41a16">&#34;reasons to skip work: %w, %w&#34;</span>,
    <span style="color:#000">errRaining</span>,
    <span style="color:#000">errWindy</span>,
)
</code></pre></div><p>To accept multiple errors in your own error type, return <code>[]error</code> from the <code>Unwrap()</code> method:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">type</span> <span style="color:#000">RefusalErr</span> <span style="color:#a90d91">struct</span> {
    <span style="color:#000">reasons</span> []<span style="color:#a90d91">error</span>
}

<span style="color:#a90d91">func</span> (<span style="color:#000">e</span> <span style="color:#000">RefusalErr</span>) <span style="color:#000">Unwrap</span>() []<span style="color:#a90d91">error</span> {
    <span style="color:#a90d91">return</span> <span style="color:#000">e</span>.<span style="color:#000">reasons</span>
}

<span style="color:#a90d91">func</span> (<span style="color:#000">e</span> <span style="color:#000">RefusalErr</span>) <span style="color:#000">Error</span>() <span style="color:#a90d91">string</span> {
    <span style="color:#a90d91">return</span> <span style="color:#000">fmt</span>.<span style="color:#000">Sprintf</span>(<span style="color:#c41a16">&#34;refusing: %v&#34;</span>, <span style="color:#000">e</span>.<span style="color:#000">reasons</span>)
}
</code></pre></div><p>If you love errors, this change will definitely be to your liking. If not&hellip; well, you always have panic :)</p>
<p><a href="https://go.dev/play/p/CftXuesNA1q">playground</a></p>
<h2 id="context-canceled-cause">&lsquo;Context Canceled&rsquo; Cause</h2>
<p>A <code>context.Canceled</code> error occurs when the context is canceled. This is no news:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">ctx</span>, <span style="color:#000">cancel</span> <span style="color:#000">:=</span> <span style="color:#000">context</span>.<span style="color:#000">WithCancel</span>(<span style="color:#000">context</span>.<span style="color:#000">Background</span>())
<span style="color:#000">cancel</span>()

<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">ctx</span>.<span style="color:#000">Err</span>())
<span style="color:#177500">// context canceled
</span></code></pre></div><p>Starting from 1.20, we can create a context using <code>context.WithCancelCause()</code>. Then <code>cancel()</code> will take one parameter — the root <em>cause</em> of the error:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">ctx</span>, <span style="color:#000">cancel</span> <span style="color:#000">:=</span> <span style="color:#000">context</span>.<span style="color:#000">WithCancelCause</span>(<span style="color:#000">context</span>.<span style="color:#000">Background</span>())
<span style="color:#000">cancel</span>(<span style="color:#000">errors</span>.<span style="color:#000">New</span>(<span style="color:#c41a16">&#34;the night is dark&#34;</span>))
</code></pre></div><p><code>context.Cause()</code> extracts the cause of the error from the context:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">ctx</span>.<span style="color:#000">Err</span>())
<span style="color:#177500">// context canceled
</span><span style="color:#177500"></span>
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">context</span>.<span style="color:#000">Cause</span>(<span style="color:#000">ctx</span>))
<span style="color:#177500">// the night is dark
</span></code></pre></div><p>You may ask — why <code>context.Cause()</code>? It seems logical to add the <code>Cause()</code> method to the context itself, similar to the <code>Err()</code> method.</p>
<p>Sure. But <code>Context</code> is an interface. And any change to the interface breaks backward compatibility. That&rsquo;s why it was done differently.</p>
<p><a href="https://go.dev/play/p/oDLOGfzSUvS">playground</a></p>
<h2 id="new-date-formats">New Date Formats</h2>
<p><em>Please don&rsquo;t be offended by this section if you are a North American. We love you people, but sometimes your view of the world can be a bit&hellip; biased.</em></p>
<p>You surely know that the Go authors chose a quite unorthodox format for the date and time layout.</p>
<p>For example, parsing the date <code>2023-01-25 09:30</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">const</span> <span style="color:#000">layout</span> = <span style="color:#c41a16">&#34;2006-01-02 15:04&#34;</span>
<span style="color:#000">t</span>, <span style="color:#000">_</span> <span style="color:#000">:=</span> <span style="color:#000">time</span>.<span style="color:#000">Parse</span>(<span style="color:#000">layout</span>, <span style="color:#c41a16">&#34;2023-01-25 09:30&#34;</span>)
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">t</span>)
<span style="color:#177500">// 2023-01-25 09:30:00 +0000 UTC
</span></code></pre></div><p>While <code>01/02 03:04:05PM '06</code> may be a nice mnemonic in the US, it&rsquo;s entirely cryptic for the European (or Asian) eye.</p>
<p>The Go authors have thoughtfully provided 12 standard date/time masks, of which only <code>RFC3339</code> and <code>RFC3339Nano</code> are suitable for non-Americans. Others are as mysterious as the imperial measurement system:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">Layout</span>      = <span style="color:#c41a16">&#34;01/02 03:04:05PM &#39;06 -0700&#34;</span>
<span style="color:#000">ANSIC</span>       = <span style="color:#c41a16">&#34;Mon Jan _2 15:04:05 2006&#34;</span>
<span style="color:#000">UnixDate</span>    = <span style="color:#c41a16">&#34;Mon Jan _2 15:04:05 MST 2006&#34;</span>
<span style="color:#000">RubyDate</span>    = <span style="color:#c41a16">&#34;Mon Jan 02 15:04:05 -0700 2006&#34;</span>
<span style="color:#000">RFC822</span>      = <span style="color:#c41a16">&#34;02 Jan 06 15:04 MST&#34;</span>
<span style="color:#000">RFC822Z</span>     = <span style="color:#c41a16">&#34;02 Jan 06 15:04 -0700&#34;</span>
<span style="color:#000">RFC850</span>      = <span style="color:#c41a16">&#34;Monday, 02-Jan-06 15:04:05 MST&#34;</span>
<span style="color:#000">RFC1123</span>     = <span style="color:#c41a16">&#34;Mon, 02 Jan 2006 15:04:05 MST&#34;</span>
<span style="color:#000">RFC1123Z</span>    = <span style="color:#c41a16">&#34;Mon, 02 Jan 2006 15:04:05 -0700&#34;</span>
<span style="color:#000">Kitchen</span>     = <span style="color:#c41a16">&#34;3:04PM&#34;</span>
</code></pre></div><p>Ten years have passed, and the Go development team began to suspect something. They learned that there are several other popular date formats worldwide. And, starting with version 1.20, they added three new masks:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">DateTime</span> = <span style="color:#c41a16">&#34;2006-01-02 15:04:05&#34;</span>
<span style="color:#000">DateOnly</span> = <span style="color:#c41a16">&#34;2006-01-02&#34;</span>
<span style="color:#000">TimeOnly</span> = <span style="color:#c41a16">&#34;15:04:05&#34;</span>
</code></pre></div><p>Now we can finally do this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">t</span>, <span style="color:#000">_</span> <span style="color:#000">:=</span> <span style="color:#000">time</span>.<span style="color:#000">Parse</span>(<span style="color:#000">time</span>.<span style="color:#000">DateOnly</span>, <span style="color:#c41a16">&#34;2023-01-25&#34;</span>)
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">t</span>)
<span style="color:#177500">// 2023-01-25 00:00:00 +0000 UTC
</span></code></pre></div><p>Nice!</p>
<p><a href="https://go.dev/play/p/d3Vfyt43c0v">playground</a></p>
<h2 id="slice-to-array-conversion">Slice to Array Conversion</h2>
<p>Starting from version 1.17, we can get a pointer to an array under the slice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">s</span> <span style="color:#000">:=</span> []<span style="color:#a90d91">int</span>{<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>}
<span style="color:#000">arrp</span> <span style="color:#000">:=</span> (<span style="color:#000">*</span>[<span style="color:#1c01ce">3</span>]<span style="color:#a90d91">int</span>)(<span style="color:#000">s</span>)
</code></pre></div><p>By changing the array through the pointer, we are also changing the slice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">arrp</span>[<span style="color:#1c01ce">2</span>] = <span style="color:#1c01ce">42</span>
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">s</span>)
<span style="color:#177500">// [1 2 42]
</span></code></pre></div><p>In Go 1.20, we can also get a copy of the array under the slice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">s</span> <span style="color:#000">:=</span> []<span style="color:#a90d91">int</span>{<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>}
<span style="color:#000">arr</span> <span style="color:#000">:=</span> [<span style="color:#1c01ce">3</span>]<span style="color:#a90d91">int</span>(<span style="color:#000">s</span>)
</code></pre></div><p>Changes in such an array are not reflected in the slice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">arr</span>[<span style="color:#1c01ce">2</span>] = <span style="color:#1c01ce">42</span>
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">arr</span>)
<span style="color:#177500">// [1 2 42]
</span><span style="color:#177500"></span><span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">s</span>)
<span style="color:#177500">// [1 2 3]
</span></code></pre></div><p>This is, in essence, syntactic sugar because we could get a copy of the array before:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">s</span> <span style="color:#000">:=</span> []<span style="color:#a90d91">int</span>{<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>}
<span style="color:#000">arr</span> <span style="color:#000">:=</span> <span style="color:#000">*</span>(<span style="color:#000">*</span>[<span style="color:#1c01ce">3</span>]<span style="color:#a90d91">int</span>)(<span style="color:#000">s</span>)
</code></pre></div><p>The new notation is cleaner, of course.</p>
<p><a href="https://go.dev/play/p/9eTgSj2MO4V">playground</a></p>
<h2 id="other-notable-changes">Other Notable Changes</h2>
<p><strong>bytes.Clone()</strong> function clones a byte slice:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">b</span> <span style="color:#000">:=</span> []<span style="color:#a90d91">byte</span>(<span style="color:#c41a16">&#34;abc&#34;</span>)
<span style="color:#000">clone</span> <span style="color:#000">:=</span> <span style="color:#000">bytes</span>.<span style="color:#000">Clone</span>(<span style="color:#000">b</span>)
</code></pre></div><p><strong>math/rand</strong> package now automatically initializes the random number generator with a random starting value, so there is no need for a separate <code>rand.Seed()</code> call.</p>
<p><strong>strings.CutPrefix()</strong> and <code>strings.CutSuffix()</code> functions trim a prefix/suffix from a string similarly to <code>TrimPrefix</code>/<code>TrimSuffix</code>, but they also indicate whether the prefix was present in the string:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">s</span> <span style="color:#000">:=</span> <span style="color:#c41a16">&#34;&gt; go!&#34;</span>
<span style="color:#000">s</span>, <span style="color:#000">found</span> <span style="color:#000">:=</span> <span style="color:#000">strings</span>.<span style="color:#000">CutPrefix</span>(<span style="color:#000">s</span>, <span style="color:#c41a16">&#34;&gt; &#34;</span>)
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">s</span>, <span style="color:#000">found</span>)
<span style="color:#177500">// go! true
</span></code></pre></div><p><strong>sync.Map</strong> now has atomic methods <code>Swap</code>, <code>CompareAndSwap</code>, and <code>CompareAndDelete</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">var</span> <span style="color:#000">m</span> <span style="color:#000">sync</span>.<span style="color:#000">Map</span>
<span style="color:#000">m</span>.<span style="color:#000">Store</span>(<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;Alice&#34;</span>)
<span style="color:#000">prev</span>, <span style="color:#000">ok</span> <span style="color:#000">:=</span> <span style="color:#000">m</span>.<span style="color:#000">Swap</span>(<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;Bob&#34;</span>)
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">prev</span>, <span style="color:#000">ok</span>)
<span style="color:#177500">// Alice true
</span></code></pre></div><p><strong>time.Compare()</strong> function compares two times and returns -1/0/1 based on the comparison results:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">t1</span> <span style="color:#000">:=</span> <span style="color:#000">time</span>.<span style="color:#000">Now</span>()
<span style="color:#000">t2</span> <span style="color:#000">:=</span> <span style="color:#000">t1</span>.<span style="color:#000">Add</span>(<span style="color:#1c01ce">10</span> <span style="color:#000">*</span> <span style="color:#000">time</span>.<span style="color:#000">Minute</span>)
<span style="color:#000">cmp</span> <span style="color:#000">:=</span> <span style="color:#000">t2</span>.<span style="color:#000">Compare</span>(<span style="color:#000">t1</span>)
<span style="color:#000">fmt</span>.<span style="color:#000">Println</span>(<span style="color:#000">cmp</span>)
<span style="color:#177500">// 1
</span></code></pre></div><p>Overall, a great release! Looking forward to trying everything in production.</p>
]]></content:encoded></item></channel></rss>