<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anton Zhiyanov</title><description>Everything about SQLite, Python, open data and awesome software.</description><link>https://antonz.org/</link><image><url>https://antonz.org/assets/favicon/favicon.png</url><title>Anton Zhiyanov</title><link>https://antonz.org/</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 May 2022 11:30:00 +0000</lastBuildDate><atom:link href="https://antonz.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Storing state in the URL</title><link>https://antonz.org/storing-state/</link><pubDate>Sun, 08 May 2022 11:30:00 +0000</pubDate><guid>https://antonz.org/storing-state/</guid><description>So that the app does not reset to zero after page refresh.</description><content:encoded><![CDATA[<p>If you are developing a web application, sooner or later you will face the problem of saving the local system state for the user.</p>
<p>Imagine you sell elite potatoes over the Internet. The buyer visits the website and enters the search criteria:</p>
<ul>
<li>strictly from Bolivia or South Africa,</li>
<li>harvest of 2022,</li>
<li>tuber size from 3 to 7 cm,</li>
<li>preferably in the form of a sea seal.</li>
</ul>
<p>The buyer then receives a list of 300 items (seal-shaped potatoes are quite popular in South Africa), split into 6 pages of 50 items each. They load the third page, open the potato card and freeze in silent admiration for a few seconds. And then accidentally refresh the page. What will your application do?</p>
<h2 id="dont-store-state-at-all">Don&rsquo;t store state at all</h2>
<p>Let&rsquo;s say you didn&rsquo;t bother with the state or store it in memory. Then after page reload the current context will be lost. The user will be redirected to the main page, where they will stare in disbelief at the giant &ldquo;ELITE POTATOES&rdquo; heading.</p>
<p>This is how Google calendar used to behave. No matter how you navigate around the calendar, no matter what filters you apply, the URL always stayed the same:</p>
<pre><code>https://www.google.com/calendar/render
</code></pre>
<p>Refresh the page — and the calendar happily resets to the current week. Ouch.</p>
<h2 id="store-state-locally">Store state locally</h2>
<p>Most services understand that it is not OK to lose context after page refresh. They store the state on the client side (using Web Storage, IndexedDB or other means). This solves the problem with page refreshes, but still won&rsquo;t help with bookmarking.</p>
<p>Plus, such approach creates a problem with conflicting state changes. I opened two browser tabs, went to your potato website, searched for &ldquo;young potatoes&rdquo; in the first tab and for &ldquo;bushy leaves&rdquo; in the second one. Which query will the app remember?</p>
<h2 id="store-a-set-of-get-parameters">Store a set of GET parameters</h2>
<p>Ever since the days when the dynamic nature of websites was limited to the <code>&lt;blink&gt;</code> tag, some considered a best practice to store the state in the URL. Such URL is great for emailing or bookmarking — there is no problem restoring the context:</p>
<pre><code>https://potato.shop/catalog/?search=wild+potatoes&amp;country=bo,za&amp;size=3-7&amp;page=5
</code></pre>
<p>URL state makes each browser tab completely independent. No shared data in the local storage means no conflicts. It simplifies developer&rsquo;s life, and the user does not have to scratch their head over the mysterious system glitches.</p>
<h2 id="store-serialized-state">Store serialized state</h2>
<p>GET parameters do an excellent job with scalar values (strings, numbers, booleans). But they are less suitable for collections and more complex structures. That&rsquo;s why programmers sometimes do this:</p>
<ul>
<li>represent the state in the form of a dictionary;</li>
<li>serialize it to Base64;</li>
<li>pass it as the single URL parameter.</li>
</ul>
<p>For example, for this state:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#000">&#34;search&#34;</span>: <span style="color:#c41a16">&#34;wild potatoes&#34;</span>,
    <span style="color:#000">&#34;country&#34;</span>: [<span style="color:#c41a16">&#34;bo&#34;</span>, <span style="color:#c41a16">&#34;za&#34;</span>],
    <span style="color:#000">&#34;size&#34;</span>: { <span style="color:#000">&#34;min&#34;</span>: <span style="color:#1c01ce">3</span>, <span style="color:#000">&#34;max&#34;</span>: <span style="color:#1c01ce">7</span> },
    <span style="color:#000">&#34;page&#34;</span>: <span style="color:#1c01ce">5</span>
}
</code></pre></div><p>One will get this URL:</p>
<pre><code>https://potato.shop/catalog/?state=eyJzZWFyY2giOiJ3aWxkIHBvdGF0b2VzIiwiY291bnRyeSI6WyJibyIsInphIl0sInNpemUiOnsibWluIjozLCJtYXgiOjd9LCJwYWdlIjo1fQ==
</code></pre>
<h2 id="hybrid-approaches">Hybrid approaches</h2>
<p>One can store only the main parameters in the URL, and additional ones in the local storage:</p>
<pre><code>https://potato.shop/catalog/?search=wild+potatoes&amp;page=10
</code></pre>
<p>One can pass the main parameters explicitly, and the additional ones as the serialized blob:</p>
<pre><code>https://potato.shop/catalog/?search=wild+potatoes&amp;state=eyJjb3VudHJ5IjpbImJvIiwiemEiXSwic2l6ZSI6eyJtaW4iOjMsIm1heCI6N30sInBhZ2UiOjV9
</code></pre>
<p>There are also more creative options.</p>
<p>For example, one can store the state of the potato list locally. When a visitor requests a specific potato item, open it in a new tab — to not bother restoring the list state later.</p>
<p>Or one can implement an URL shortener of sorts. Store the full state on the server, generate a unique link like <code>https://potato.shop/catalog/xKda7</code> and serve it to the client.</p>
<h2 id="summary">Summary</h2>
<p>The main ways of storing the local state on the web are:</p>
<ul>
<li>no storage at all;</li>
<li>local storage;</li>
<li>URL parameters;</li>
<li>serialized dictionary.</li>
</ul>
<p>Personally, I prefer URL parameters. But whatever approach you choose — make sure to save and restore the context transparently for the user.</p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>Generated columns in SQLite</title><link>https://antonz.org/generated-columns/</link><pubDate>Sat, 07 May 2022 17:10:00 +0000</pubDate><guid>https://antonz.org/generated-columns/</guid><description>Simplify queries without storing additional data.</description><content:encoded><![CDATA[<p>Sometimes an SQL query field is calculated based on other table columns. Imagine a table with <code>income</code> and <code>tax_rate</code> columns:</p>
<pre tabindex="0"><code>┌────────┬──────────┐
│ income │ tax_rate │
├────────┼──────────┤
│ 70     │ 0.22     │
│ 84     │ 0.22     │
│ 90     │ 0.24     │
└────────┴──────────┘
</code></pre><p>You can calculate the annual tax:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">id</span>,
  <span style="color:#000">income</span> <span style="color:#000">*</span> <span style="color:#000">tax_rate</span> <span style="color:#a90d91">as</span> <span style="color:#000">tax</span>
<span style="color:#a90d91">from</span> <span style="color:#000">people</span>;
</code></pre></div><p>In order not to repeat these calculations everywhere, it is convenient to create a virtual <em>generated column</em>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">people</span>
<span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#000">tax</span> <span style="color:#a90d91">real</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">income</span> <span style="color:#000">*</span> <span style="color:#000">tax_rate</span>
);
</code></pre></div><p>After that, the column can be used in queries in the same way as regular columns:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">tax</span>
<span style="color:#a90d91">from</span> <span style="color:#000">people</span>;
</code></pre></div><p>Virtual columns are not stored in the database and are calculated on the fly. But you can build an index on them to speed up data retrieval.</p>
<blockquote>
<p>Strictly speaking, SQLite has <em>virtual</em> generated columns and <em>stored</em> ones. The latter are stored on disk, but it is impossible to create them via <code>alter table</code>, so people mostly use virtual ones.</p>
</blockquote>
<p>In general, the syntax is as follows:</p>
<pre tabindex="0"><code>alter table TABLE
add column COLUMN TYPE as (EXPRESSION);
</code></pre><p>Generated column expression can include any table columns, but not other tables or subquery results. It&rsquo;s for the best: for more complex combinations, there are <em>views</em> and <em>temp tables</em>. Let&rsquo;s talk about them some other time.</p>
<p><a href="https://sqlite.org/gencol.html">Documentation</a> • <a href="https://sqlime.org/#gist:5208177f89a0e38ccfae8ead90a35631">Playground</a></p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>Page iterator in Python</title><link>https://antonz.org/page-iterator/</link><pubDate>Mon, 02 May 2022 13:00:00 +0000</pubDate><guid>https://antonz.org/page-iterator/</guid><description>Traverse dataset in pages for faster batch processing.</description><content:encoded><![CDATA[<p>Suppose you are counting stats for a huge dataset of toys sold across the country over the past year:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">reader</span> <span style="color:#000">=</span> <span style="color:#000">fetch_toys</span>()
<span style="color:#a90d91">for</span> <span style="color:#000">item</span> <span style="color:#000">in</span> <span style="color:#000">reader</span>:
    <span style="color:#000">process_single</span>(<span style="color:#000">item</span>)
</code></pre></div><p><code>process_single()</code> takes 10 ms, so 400 million toys will be processed in 46 days 😱</p>
<p>After a number of intense conversations, you manage to convince the developers that it&rsquo;s not very fast. <code>process_batch()</code> function enters the scene. It processes 10,000 toys in 1 second. It means 11 hours for all the toys — much nicer.</p>
<p>Now we need to iterate over the dataset in batches of 10 thousand records. This is where the page iterator comes in handy!</p>
<h2 id="naive-paginator">Naive paginator</h2>
<p>Let&rsquo;s go through the initial sequence, gradually filling the page. As soon as it is filled, return it through <code>yield</code> and start filling in the next one. Continue until the original sequence is exhausted:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">paginate</span>(<span style="color:#000">iterable</span>, <span style="color:#000">page_size</span>):
    <span style="color:#000">page</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">for</span> <span style="color:#000">item</span> <span style="color:#000">in</span> <span style="color:#000">iterable</span>:
        <span style="color:#000">page</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">item</span>)
        <span style="color:#a90d91">if</span> <span style="color:#a90d91">len</span>(<span style="color:#000">page</span>) <span style="color:#000">==</span> <span style="color:#000">page_size</span>:
            <span style="color:#a90d91">yield</span> <span style="color:#000">page</span>
            <span style="color:#000">page</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">yield</span> <span style="color:#000">page</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">reader</span> <span style="color:#000">=</span> <span style="color:#000">fetch_toys</span>()
<span style="color:#000">page_size</span> <span style="color:#000">=</span> <span style="color:#1c01ce">10_000</span>
<span style="color:#a90d91">for</span> <span style="color:#000">page</span> <span style="color:#000">in</span> <span style="color:#000">paginate</span>(<span style="color:#000">reader</span>, <span style="color:#000">page_size</span>):
    <span style="color:#000">process_batch</span>(<span style="color:#000">page</span>)
</code></pre></div><p>The implementation is working, but there is a problem. Such page-by-page traversal is noticeably slower than the one-by-one iteration.</p>
<h2 id="iteration-speed">Iteration speed</h2>
<p>Let&rsquo;s compare two traversals — one-by-one and paginated:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">one_by_one</span>(<span style="color:#000">a</span>, <span style="color:#000">b</span>):
    <span style="color:#c41a16">&#34;&#34;&#34;Processes records one-by-one, without pagination&#34;&#34;&#34;</span>
    <span style="color:#000">rdr</span> <span style="color:#000">=</span> <span style="color:#000">reader</span>(<span style="color:#000">a</span>, <span style="color:#000">b</span>)
    <span style="color:#a90d91">for</span> <span style="color:#000">record</span> <span style="color:#000">in</span> <span style="color:#000">rdr</span>:
        <span style="color:#000">process_single</span>(<span style="color:#000">record</span>)

<span style="color:#a90d91">def</span> <span style="color:#000">batch</span>(<span style="color:#000">page_size</span>, <span style="color:#000">a</span>, <span style="color:#000">b</span>):
    <span style="color:#c41a16">&#34;&#34;&#34;Processes records in batches, with pagination&#34;&#34;&#34;</span>
    <span style="color:#000">rdr</span> <span style="color:#000">=</span> <span style="color:#000">reader</span>(<span style="color:#000">a</span>, <span style="color:#000">b</span>)
    <span style="color:#a90d91">for</span> <span style="color:#000">page</span> <span style="color:#000">in</span> <span style="color:#000">paginate</span>(<span style="color:#000">rdr</span>, <span style="color:#000">page_size</span>):
        <span style="color:#000">process_batch</span>(<span style="color:#000">page</span>)

<span style="color:#000">times</span> <span style="color:#000">=</span> <span style="color:#1c01ce">10</span>

<span style="color:#000">page_size</span> <span style="color:#000">=</span> <span style="color:#1c01ce">10_000</span>
<span style="color:#000">a</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1_000_000</span>
<span style="color:#000">b</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2_000_000</span>

<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#000">one_by_one</span>(<span style="color:#000">a</span>, <span style="color:#000">b</span>)
<span style="color:#000">total</span> <span style="color:#000">=</span> <span style="color:#000">timeit</span><span style="color:#000">.</span><span style="color:#000">timeit</span>(<span style="color:#000">fn</span>, <span style="color:#000">number</span><span style="color:#000">=</span><span style="color:#000">times</span>)
<span style="color:#000">it_time</span> <span style="color:#000">=</span> <span style="color:#a90d91">round</span>(<span style="color:#000">total</span> <span style="color:#000">*</span> <span style="color:#1c01ce">1000</span> <span style="color:#000">/</span> <span style="color:#000">times</span>)
<span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;One-by-one (baseline): </span><span style="color:#c41a16">{</span><span style="color:#000">it_time</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> ms&#34;</span>)

<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#000">batch</span>(<span style="color:#000">page_size</span>, <span style="color:#000">a</span>, <span style="color:#000">b</span>)
<span style="color:#000">total</span> <span style="color:#000">=</span> <span style="color:#000">timeit</span><span style="color:#000">.</span><span style="color:#000">timeit</span>(<span style="color:#000">fn</span>, <span style="color:#000">number</span><span style="color:#000">=</span><span style="color:#000">times</span>)
<span style="color:#000">it_time</span> <span style="color:#000">=</span> <span style="color:#a90d91">round</span>(<span style="color:#000">total</span> <span style="color:#000">*</span> <span style="color:#1c01ce">1000</span> <span style="color:#000">/</span> <span style="color:#000">times</span>)
<span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;Fill page with append(): </span><span style="color:#c41a16">{</span><span style="color:#000">it_time</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> ms&#34;</span>)
</code></pre></div><p>Here is the result for 1 million records and a page size of 10 thousand:</p>
<pre tabindex="0"><code>One-by-one (baseline):   161 ms
Fill page with append(): 227 ms
</code></pre><p>Page-by-page iteration is almost 1.5 times slower!</p>
<p>At each iteration of the loop, we create a new empty list and then gradually fill it in. Python has to constantly increase the size of the underlying array, and this is an expensive operation — O(n) of the number of elements in the list.</p>
<h2 id="fixed-page-size">Fixed page size</h2>
<p>Let&rsquo;s create a list of the required size in advance and use it for all pages:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">paginate</span>(<span style="color:#000">iterable</span>, <span style="color:#000">page_size</span>):
    <span style="color:#000">page</span> <span style="color:#000">=</span> [<span style="color:#a90d91">None</span>] <span style="color:#000">*</span> <span style="color:#000">page_size</span>
    <span style="color:#000">idx</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>
    <span style="color:#a90d91">for</span> <span style="color:#000">item</span> <span style="color:#000">in</span> <span style="color:#000">iterable</span>:
        <span style="color:#000">page</span>[<span style="color:#000">idx</span>] <span style="color:#000">=</span> <span style="color:#000">item</span>
        <span style="color:#000">idx</span> <span style="color:#000">+=</span> <span style="color:#1c01ce">1</span>
        <span style="color:#a90d91">if</span> <span style="color:#000">idx</span> <span style="color:#000">==</span> <span style="color:#000">page_size</span>:
            <span style="color:#a90d91">yield</span> <span style="color:#000">page</span>
            <span style="color:#000">idx</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>
    <span style="color:#a90d91">yield</span> <span style="color:#000">page</span>[:<span style="color:#000">idx</span>]
</code></pre></div><p>Compare once again:</p>
<pre tabindex="0"><code>One-by-one (baseline):   161 ms
Fill page with append(): 227 ms
Use fixed-size page:     162 ms
</code></pre><p>Much faster! Fixed page algorithm is as fast as the ordinary one-by-one traversal.</p>
<h2 id="slicing-iterator">Slicing iterator</h2>
<p>Can we do even better? Algorithmically, no. But practically, yes — if we move most of the operations from Python code to C library code. The <code>itertools()</code> module and its <code>islice()</code> function may help:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">paginate</span>(<span style="color:#000">iterable</span>, <span style="color:#000">page_size</span>):
    <span style="color:#000">it</span> <span style="color:#000">=</span> <span style="color:#a90d91">iter</span>(<span style="color:#000">iterable</span>)
    <span style="color:#000">slicer</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#a90d91">list</span>(<span style="color:#000">itertools</span><span style="color:#000">.</span><span style="color:#000">islice</span>(<span style="color:#000">it</span>, <span style="color:#000">page_size</span>))
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">iter</span>(<span style="color:#000">slicer</span>, [])
</code></pre></div><p>Here is what&rsquo;s going on:</p>
<ul>
<li><code>islice()</code> creates an iterator (let&rsquo;s call it a slicer) that traverses the passed sequence until it yields <code>page_size</code> elements;</li>
<li><code>list()</code> fetches elements from the slicer, thus creating a page;</li>
<li>since <code>islice()</code> runs on top of the main iterator, the next time it is called, it will continue from the same place where it left off before;</li>
<li>the <code>iter(slicer, [])</code> expression creates an iterator that calls the slicer at each step;</li>
<li>thus, the <code>paginate()</code> function returns an iterator, which at each step yields the next page through the slicer, traversing the main sequence until it ends.</li>
</ul>
<p>Look how good this implementation is:</p>
<pre tabindex="0"><code>One-by-one (baseline):   161 ms
Fill page with append(): 227 ms
Use fixed-size page:     162 ms
Use islice:               93 ms
</code></pre><p>40% faster than the one-by-one iterator!</p>
<h2 id="summary">Summary</h2>
<p>Page-by-page traversal works fine whenever a batch operation is much faster than a sequence of single operations. In order not to implement such traversal every time from scratch, it is convenient to use a <em>page iterator</em>.</p>
<p>Filling the page with <code>.append()</code> is slow due to array resizing. It is better to use a fixed-size list, or even better, iteration based on <code>itertools.islice()</code></p>
<p>Totally recommend it.</p>
<p><a href="https://replit.com/@antonz/page-iterator#main.py">Playground</a></p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>Multi-line queries in SQLite shell</title><link>https://antonz.org/sqlite-multiline/</link><pubDate>Sun, 24 Apr 2022 21:30:00 +0000</pubDate><guid>https://antonz.org/sqlite-multiline/</guid><description>How to edit a big query without leaving the CLI</description><content:encoded><![CDATA[<p>Just after writing that debugging multi-line queries <a href="/sqlite-history/">in SQLite shell</a> is not easy, I discovered a cool trick on the sqlite forum:</p>
<p>Use <code>Ctrl+V</code>, <code>Ctrl+J</code> instead of <code>Enter</code> for new lines. After that, edit the query with the <code>↑</code> button.</p>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure>
  <img alt="SQLite shell" src="multiline.png" class="img-bordered-thin">
</figure>
</div>
</div>
<p>And here are some more ways to edit multi-line queries:</p>
<ul>
<li>Use external editor (<code>.shell &lt;editor&gt; &lt;file&gt;</code>)</li>
<li>Run query from file (<code>.read &lt;file&gt;</code>)</li>
<li>Consider DBeaver, DataGrip or other UI tool</li>
</ul>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>Caching slow functions in Python</title><link>https://antonz.org/functools-cache/</link><pubDate>Sat, 23 Apr 2022 19:10:00 +0000</pubDate><guid>https://antonz.org/functools-cache/</guid><description>With @lru_cache and @cache from the functools module</description><content:encoded><![CDATA[<p>Suppose you wrote a function that returns the user&rsquo;s email:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">get_user_email</span>(<span style="color:#000">user_id</span>):
    <span style="color:#000">user</span> <span style="color:#000">=</span> <span style="color:#000">find_by_id</span>(<span style="color:#000">user_id</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">user</span>[<span style="color:#c41a16">&#34;email&#34;</span>]
</code></pre></div><p>But there is a problem. <code>find_by_id()</code> calls a terribly slow legacy system:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">find_by_id</span>(<span style="color:#000">user_id</span>):
    <span style="color:#177500"># simulate a slow network request,</span>
    <span style="color:#177500"># returning a user by their id</span>
    <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">sleep</span>(<span style="color:#1c01ce">1</span>)
    <span style="color:#a90d91">return</span> { <span style="color:#c41a16">&#34;email&#34;</span>: <span style="color:#c41a16">&#34;...&#34;</span> }
</code></pre></div><p>100 calls for <code>get_user_email(42)</code> result in 100 slow requests. A single one should be quite enough, so let&rsquo;s attach a simple cache:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">cache</span> <span style="color:#000">=</span> {}

<span style="color:#a90d91">def</span> <span style="color:#000">get_user_email</span>(<span style="color:#000">user_id</span>):
    <span style="color:#a90d91">if</span> <span style="color:#000">user_id</span> <span style="color:#000">not</span> <span style="color:#000">in</span> <span style="color:#000">cache</span>:
        <span style="color:#000">user</span> <span style="color:#000">=</span> <span style="color:#000">find_by_id</span>(<span style="color:#000">user_id</span>)
        <span style="color:#000">cache</span>[<span style="color:#000">user_id</span>] <span style="color:#000">=</span> <span style="color:#000">user</span>[<span style="color:#c41a16">&#34;email&#34;</span>]
    <span style="color:#a90d91">return</span> <span style="color:#000">cache</span>[<span style="color:#000">user_id</span>]
</code></pre></div><p>Nothing too complicated (apart from the issue of cache expiration, let&rsquo;s not touch it). But imagine that there are a lot of slow functions, and you have to implement caching for every one of them. Not too inspiring.</p>
<p>Fortunately, there is an <code>@lru_cache</code> decorator in the <code>functools</code> module. That&rsquo;s what we need. Add one line to the original function, and be done with it:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">@functools</span><span style="color:#000">.</span><span style="color:#000">lru_cache</span>(<span style="color:#000">maxsize</span><span style="color:#000">=</span><span style="color:#1c01ce">256</span>)
<span style="color:#a90d91">def</span> <span style="color:#000">get_user_email</span>(<span style="color:#000">user_id</span>):
    <span style="color:#000">user</span> <span style="color:#000">=</span> <span style="color:#000">find_by_id</span>(<span style="color:#000">user_id</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">user</span>[<span style="color:#c41a16">&#34;email&#34;</span>]
</code></pre></div><p>Now repeated calls to <code>get_user_email()</code> with the same <code>user_id</code> return the cached result without requesting <code>find_by_id()</code>.</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-5">
<figure>
  <img alt="Don't write your own cache" src="cache-1.png" class="img-bordered-thin">
  <figcaption>Don't write your own cache...</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6 col-md-5">
<figure>
  <img alt="Use functools @lru_cache" src="cache-2.png" class="img-bordered-thin">
  <figcaption>Use functools @lru_cache instead!</figcaption>
</figure>
</div>
</div>
<p><code>@lru_cache</code> automatically evicts old entries from the cache when there are more than <code>maxsize</code> entries. So the cache won&rsquo;t eat up all the memory.</p>
<p>Python 3.9 received another decorator — <code>@functools.cache</code>. It&rsquo;s similar to <code>@lru_cache</code>, only without the cache entry limit (which makes it work a little faster).</p>
<p>One can manage the cache — view hits/misses stats or clean it:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># cache management</span>

<span style="color:#000">stats</span> <span style="color:#000">=</span> <span style="color:#000">get_user_email</span><span style="color:#000">.</span><span style="color:#000">cache_info</span>()
<span style="color:#a90d91">print</span>(<span style="color:#000">stats</span>)
<span style="color:#177500"># CacheInfo(hits=2, misses=3, maxsize=256, currsize=3)</span>

<span style="color:#000">get_user_email</span><span style="color:#000">.</span><span style="color:#000">cache_clear</span>()
<span style="color:#177500"># CacheInfo(hits=0, misses=0, maxsize=256, currsize=0)</span>
</code></pre></div><p>The cache works in-process and will die with it. So if you need something more scalable, look at Redis or other external cache.</p>
<p><a href="https://devdocs.io/python/library/functools#functools.lru_cache">Documentation</a> •
<a href="https://replit.com/@antonz/functools-cache#main.py">Playground</a></p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>SQLite CLI command history</title><link>https://antonz.org/sqlite-history/</link><pubDate>Sun, 17 Apr 2022 14:50:00 +0000</pubDate><guid>https://antonz.org/sqlite-history/</guid><description>Search for the query instead of typing it by hand.</description><content:encoded><![CDATA[<p>SQLite command line tool (<code>sqlite3</code> or <code>sqlite3.exe</code>) remembers the last 2000 executed commands. To repeat the last command, just press the <code>↑</code> key, to search for older ones — use <code>Ctrl+R</code> shortcut.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="History search" src="search.jpg">
  <figcaption>It's faster to find a query than to type it again</figcaption>
</figure>
</div>
</div>
<p>By default, SQLite stores the history file in the user&rsquo;s home directory and names it <code>.sqlite_history</code>. It&rsquo;s in plain text, so you can view it in your favorite editor. If you prefer to save it elsewhere, specify the full path in the <code>SQLITE_HISTORY</code> environment variable.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="History file" src="history.jpg">
  <figcaption>Sync the history file (via Dropbox etc.) to search for queries on all devices</figcaption>
</figure>
</div>
</div>
<p>SQLite writes the history to a file when the console exits normally, so in case of the computer or CLI crash the commands executed since the last <code>sqlite3</code> launch will be lost.</p>
<p>History recording is not the only feature of the console. SQLite CLI makes it easy to import and export data or work with several databases at the same time. Debugging <a href="/sqlite-multiline/">multi-line queries</a> is quite a challenge, though.</p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>The ultimate SQLite extension set</title><link>https://antonz.org/sqlean/</link><pubDate>Tue, 04 Jan 2022 13:00:00 +0000</pubDate><guid>https://antonz.org/sqlean/</guid><description>Regexes, math, file IO and over 100 other functions.</description><content:encoded><![CDATA[<p>I really like SQLite. It&rsquo;s a miniature embedded database, perfect for both exploratory data analysis and as a storage for small apps (I&rsquo;ve <a href="/sqlite-is-not-a-toy-database/">blogged about that</a> previously).</p>
<p>It has a minor drawback though. There are few built-in functions compared to PostgreSQL or Oracle. Fortunately, the authors provided an extension mechanism, which allows doing almost anything. As a result, there are a lot of SQLite extensions out there, but they are incomplete, inconsistent and scattered across the internet.</p>
<p>I wanted more consistency. So I started the <strong>sqlean</strong> project, which brings the extensions together, neatly packaged into domain modules, documented, tested, and built for Linux, Windows and macOS. Something like a standard library in Python or Go, only for SQLite.</p>
<p>I plan to write in detail about each module in a separate article, but for now — here&rsquo;s a brief overview.</p>
<h2 id="the-main-set">The main set</h2>
<p>These are the most popular functions missing in SQLite:</p>
<ul>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/crypto.md">crypto</a>: cryptographic hashes like MD5 or SHA-256.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/fileio.md">fileio</a>: read and write files and catalogs.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/fuzzy.md">fuzzy</a>: fuzzy string matching and phonetics.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/ipaddr.md">ipaddr</a>: IP address manipulation.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/json1.md">json1</a>: JSON functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/math.md">math</a>: math functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/re.md">re</a>: regular expressions.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/stats.md">stats</a>: math statistics — median, percentiles, etc.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/text.md">text</a>: string functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/unicode.md">unicode</a>: Unicode support.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/uuid.md">uuid</a>: Universally Unique IDentifiers.</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md">vsv</a>: CSV files as virtual tables.</li>
</ul>
<p>There are <a href="https://github.com/nalgeon/sqlean/releases/latest">precompiled binaries</a> for Windows, Linix and macOS.</p>
<h2 id="the-incubator">The incubator</h2>
<p>These extensions haven&rsquo;t yet made their way to the main set. They may be too broad, too narrow, or without a well-thought API. I&rsquo;m gradually refactoring and merging them into the main set:</p>
<ul>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004109889">array</a>: one-dimensional arrays.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-999732640">besttype</a>: convert string value to numeric.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002267134">bloom</a>: a fast way to tell if a value is already in a table.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004896027">btreeinfo</a>, <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007421989">memstat</a>, <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-999732907">recsize</a> and <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007654407">stmt</a>: various database introspection features.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-996605444">cbrt</a> and <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-999128539">math2</a>: additional math functions and bit arithmetics.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001239676">classifier</a>: binary classifier via logistic regression.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004931771">closure</a>: navigate hierarchic tables with parent/child relationships.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000937999">compress</a> and <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000938046">sqlar</a>: compress / uncompress data.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997427979">cron</a>: match dates against cron patterns.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1006791300">dbdump</a>: export database as SQL.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007348326">decimal</a>, <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997482625">fcmp</a> and <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007375162">ieee754</a>: decimal and floating-point arithmetic.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1004347222">define</a>: create scalar and table-valued functions from SQL.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997423609">envfuncs</a>: read environment variables.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-996432840">eval</a>: run arbitrary SQL statements.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-998138191">isodate</a>: additional date and time functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997417836">pearson</a>: Pearson correlation coefficient between two data sets.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997052157">pivotvtab</a>: pivot tables.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007464840">prefixes</a>: generate string prefixes.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007500659">rotate</a>: string obfuscation.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002297477">spellfix</a>: search a large vocabulary for close matches.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1000902666">stats2</a> and <a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1002703581">stats3</a>: additional math statistics functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1003105288">text2</a>: additional string functions.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001232670">uint</a>: natural string sorting and comparison.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997432989">unhex</a>: reverse for <code>hex()</code>.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007687162">unionvtab</a>: union similar tables into one.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-997018486">xmltojson</a>: convert XML to JSON string.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1001190336">zipfile</a>: read and write zip files.</li>
<li><a href="https://github.com/nalgeon/sqlean/issues/27#issuecomment-1007733209">zorder</a>: map multidimensional data to a single dimension.</li>
</ul>
<p><a href="https://github.com/nalgeon/sqlean/issues/27">Vote for your favorites</a>! Popular ones will make their way into the main set faster.</p>
<p>Incubator extensions are also available <a href="https://github.com/nalgeon/sqlean/releases/tag/incubator">for download</a>.</p>
<h2 id="how-to-load-an-extension">How to load an extension</h2>
<p>There are three ways to do it. If you are using SQLite CLI (<code>sqlite.exe</code>):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">sqlite</span><span style="color:#000">&gt;</span> .<span style="color:#a90d91">load</span> .<span style="color:#000">/</span><span style="color:#000">stats</span>
<span style="color:#000">sqlite</span><span style="color:#000">&gt;</span> <span style="color:#a90d91">select</span> <span style="color:#000">median</span>(<span style="color:#000">value</span>) <span style="color:#a90d91">from</span> <span style="color:#000">generate_series</span>(<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">99</span>);
</code></pre></div><p>If you are using a tool like DB Browser for SQLite, SQLite Expert or DBeaver:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">load_extension</span>(<span style="color:#c41a16">&#39;c:\Users\anton\sqlite\stats.dll&#39;</span>);
<span style="color:#a90d91">select</span> <span style="color:#000">median</span>(<span style="color:#000">value</span>) <span style="color:#a90d91">from</span> <span style="color:#000">generate_series</span>(<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">99</span>);
</code></pre></div><p>If you are using Python (other languages provide similar means):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">sqlite3</span>

<span style="color:#000">connection</span> <span style="color:#000">=</span> <span style="color:#000">sqlite3</span><span style="color:#000">.</span><span style="color:#000">connect</span>(<span style="color:#c41a16">&#34;:memory:&#34;</span>)
<span style="color:#000">connection</span><span style="color:#000">.</span><span style="color:#000">enable_load_extension</span>(<span style="color:#a90d91">True</span>)
<span style="color:#000">connection</span><span style="color:#000">.</span><span style="color:#000">load_extension</span>(<span style="color:#c41a16">&#34;./stats.so&#34;</span>)
<span style="color:#000">connection</span><span style="color:#000">.</span><span style="color:#000">execute</span>(<span style="color:#c41a16">&#34;select median(value) from generate_series(1, 99)&#34;</span>)
<span style="color:#000">connection</span><span style="color:#000">.</span><span style="color:#000">close</span>()
</code></pre></div><h2 id="next-steps">Next steps</h2>
<p>If you feel that you are missing some function in SQLite, check the <a href="https://github.com/nalgeon/sqlean"><strong>sqlean</strong></a> repository — you&rsquo;ll probably find one.</p>
<p>If you want to participate, submit <a href="https://github.com/nalgeon/sqlean/blob/incubator/docs/submit.md">your own</a> or <a href="https://github.com/nalgeon/sqlean/blob/incubator/docs/external.md">third-party</a> extensions.</p>
<p>I keep adding new extensions to the incubator. I also refactor the extensions from the incubator and merge them into the main set. I plan to write a separate article for each main module, so stay tuned.</p>
<p>SQLite FTW!</p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>What's new in SQLite 3.37</title><link>https://antonz.org/sqlite-3-37/</link><pubDate>Sun, 28 Nov 2021 15:25:00 +0000</pubDate><guid>https://antonz.org/sqlite-3-37/</guid><description>Strict tables, any type and a new pragma.</description><content:encoded><![CDATA[<p>Unlike <a href="/sqlite-3-35/">3.35</a>, release 3.37 didn&rsquo;t bring many changes. But among them is one of the most important in the history of SQLite: the &ldquo;strict&rdquo; table mode, in which the engine makes sure that the data in the column matches the type.</p>
<p>Perhaps now SQLite will no longer be called &ldquo;the JavaScript of the DBMS world&rdquo; ツ But let&rsquo;s take it one piece at a time.</p>
<h2 id="the-problem-with-types">The problem with types</h2>
<p>SQLite supports 5 data types:</p>
<ul>
<li><code>INTEGER</code> — integers,</li>
<li><code>REAL</code> — real numbers,</li>
<li><code>TEXT</code> — strings,</li>
<li><code>BLOB</code> — binary data,</li>
<li><code>NULL</code> — empty value.</li>
</ul>
<p>But, unlike other DBMSs, SQLite can store any type of data in a given cell — regardless of the column type.</p>
<blockquote>
<p>SQLite stores the type not only on the column itself, but also on each value in that column. That is why a given column can store values of different types without any problems. The type on the column is used as a hint: when inserting, SQLite tries to cast the value to the column type, but when it fails, it will save the value &ldquo;as is&rdquo;.</p>
</blockquote>
<p>On the one hand, it is convenient for exploratory data analysis — you can import everything first, and then use SQL to deal with problematic values. Any other DBMS will give an error when importing and force you to crunch the data with scripts or manually.</p>
<p>On the other hand, it causes a constant flow of criticism against SQLite: you can write things into the production database that you will never be able to sort out.</p>
<p>And now, in version 3.37, the problem is solved!</p>
<h2 id="strict-tables">STRICT tables</h2>
<p>Now the table can be declared &ldquo;strict&rdquo;. Strict tables do not allow saving arbitrary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">employees</span> (
    <span style="color:#000">id</span> <span style="color:#a90d91">integer</span> <span style="color:#a90d91">primary</span> <span style="color:#a90d91">key</span>,
    <span style="color:#000">name</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">salary</span> <span style="color:#a90d91">integer</span>
) <span style="color:#a90d91">STRICT</span>;
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">employees</span> (<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>)
<span style="color:#a90d91">values</span> (<span style="color:#1c01ce">22</span>, <span style="color:#c41a16">&#39;Emma&#39;</span>, <span style="color:#c41a16">&#39;hello&#39;</span>);
<span style="color:#177500">-- Error: stepping, cannot store TEXT value in INTEGER column employees.salary (19)
</span></code></pre></div><p>Emma clearly has a problem with her salary, which is what SQLite indicates. Someone has been waiting for this for twenty years ツ</p>
<p>At the same time, the engine still tries to convert the value to the column type, and if it succeeds — there will be no error:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">employees</span> (<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>)
<span style="color:#a90d91">values</span> (<span style="color:#1c01ce">22</span>, <span style="color:#c41a16">&#39;Emma&#39;</span>, <span style="color:#c41a16">&#39;85&#39;</span>);

<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
<span style="color:#000">┌────┬───────┬────────┐</span>
<span style="color:#000">│</span> <span style="color:#000">id</span> <span style="color:#000">│</span> <span style="color:#000">name</span>  <span style="color:#000">│</span> <span style="color:#000">salary</span> <span style="color:#000">│</span>
<span style="color:#000">├────┼───────┼────────┤</span>
<span style="color:#000">│</span> <span style="color:#1c01ce">22</span> <span style="color:#000">│</span> <span style="color:#000">Emma</span>  <span style="color:#000">│</span> <span style="color:#1c01ce">85</span>     <span style="color:#000">│</span>
<span style="color:#000">└────┴───────┴────────┘</span>
</code></pre></div><p>See <a href="https://sqlite.org/stricttables.html">STRICT Tables</a> for details.</p>
<h2 id="the-any-datatype">The ANY datatype</h2>
<p><code>ANY</code> type provides the means to save arbitrary values into STRICT tables:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">employees</span> (
    <span style="color:#000">id</span> <span style="color:#a90d91">integer</span> <span style="color:#a90d91">primary</span> <span style="color:#a90d91">key</span>,
    <span style="color:#000">name</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">stuff</span> <span style="color:#a90d91">any</span>
) <span style="color:#a90d91">strict</span>;

<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">employees</span> (<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">stuff</span>)
<span style="color:#a90d91">values</span>
(<span style="color:#1c01ce">21</span>, <span style="color:#c41a16">&#39;Emma&#39;</span>, <span style="color:#1c01ce">84</span>),
(<span style="color:#1c01ce">22</span>, <span style="color:#c41a16">&#39;Grace&#39;</span>, <span style="color:#c41a16">&#39;hello&#39;</span>),
(<span style="color:#1c01ce">23</span>, <span style="color:#c41a16">&#39;Henry&#39;</span>, <span style="color:#000">randomblob</span>(<span style="color:#1c01ce">8</span>));

<span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">typeof</span>(<span style="color:#000">stuff</span>) <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
<span style="color:#000">┌────┬───────┬───────────────┐</span>
<span style="color:#000">│</span> <span style="color:#000">id</span> <span style="color:#000">│</span> <span style="color:#000">name</span>  <span style="color:#000">│</span> <span style="color:#000">typeof</span>(<span style="color:#000">stuff</span>) <span style="color:#000">│</span>
<span style="color:#000">├────┼───────┼───────────────┤</span>
<span style="color:#000">│</span> <span style="color:#1c01ce">21</span> <span style="color:#000">│</span> <span style="color:#000">Emma</span>  <span style="color:#000">│</span> <span style="color:#a90d91">integer</span>       <span style="color:#000">│</span>
<span style="color:#000">│</span> <span style="color:#1c01ce">22</span> <span style="color:#000">│</span> <span style="color:#000">Grace</span> <span style="color:#000">│</span> <span style="color:#a90d91">text</span>          <span style="color:#000">│</span>
<span style="color:#000">│</span> <span style="color:#1c01ce">23</span> <span style="color:#000">│</span> <span style="color:#000">Henry</span> <span style="color:#000">│</span> <span style="color:#a90d91">blob</span>          <span style="color:#000">│</span>
<span style="color:#000">└────┴───────┴───────────────┘</span>
</code></pre></div><p>The STRICT table stores ANY value without any transformations. In a regular table, ANY works almost the same way, but converts strings to numbers whenever possible.</p>
<p>See <a href="https://sqlite.org/stricttables.html#the_any_datatype">The ANY datatype</a> for details.</p>
<h2 id="table_list-pragma">table_list pragma</h2>
<p><code>table_list</code> pragma statement lists tables and views in the database:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">pragma</span> <span style="color:#000">table_list</span>;
<span style="color:#000">┌────────┬────────────────────┬───────┬──────┬────┬────────┐</span>
<span style="color:#000">│</span> <span style="color:#a90d91">schema</span> <span style="color:#000">│</span>        <span style="color:#000">name</span>        <span style="color:#000">│</span> <span style="color:#a90d91">type</span>  <span style="color:#000">│</span> <span style="color:#000">ncol</span> <span style="color:#000">│</span> <span style="color:#000">wr</span> <span style="color:#000">│</span> <span style="color:#a90d91">strict</span> <span style="color:#000">│</span>
<span style="color:#000">├────────┼────────────────────┼───────┼──────┼────┼────────┤</span>
<span style="color:#000">│</span> <span style="color:#000">main</span>   <span style="color:#000">│</span> <span style="color:#000">expenses</span>           <span style="color:#000">│</span> <span style="color:#a90d91">table</span> <span style="color:#000">│</span> <span style="color:#1c01ce">4</span>    <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>  <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>      <span style="color:#000">│</span>
<span style="color:#000">│</span> <span style="color:#000">main</span>   <span style="color:#000">│</span> <span style="color:#000">employees</span>          <span style="color:#000">│</span> <span style="color:#a90d91">table</span> <span style="color:#000">│</span> <span style="color:#1c01ce">5</span>    <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>  <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>      <span style="color:#000">│</span>
<span style="color:#000">│</span> <span style="color:#000">main</span>   <span style="color:#000">│</span> <span style="color:#000">sqlite_schema</span>      <span style="color:#000">│</span> <span style="color:#a90d91">table</span> <span style="color:#000">│</span> <span style="color:#1c01ce">5</span>    <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>  <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>      <span style="color:#000">│</span>
<span style="color:#000">│</span> <span style="color:#000">temp</span>   <span style="color:#000">│</span> <span style="color:#000">sqlite_temp_schema</span> <span style="color:#000">│</span> <span style="color:#a90d91">table</span> <span style="color:#000">│</span> <span style="color:#1c01ce">5</span>    <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>  <span style="color:#000">│</span> <span style="color:#1c01ce">0</span>      <span style="color:#000">│</span>
<span style="color:#000">└────────┴────────────────────┴───────┴──────┴────┴────────┘</span>
</code></pre></div><p>Previously, one had to query the <code>sqlite_schema</code> table for this. The pragma is more convenient.</p>
<p>See <a href="https://sqlite.org/pragma.html#pragma_table_list">PRAGMA table_list</a> for details.</p>
<h2 id="cli-changes">CLI changes</h2>
<p>The CLI tool (<code>sqlite.exe</code>) now supports switching between multiple database connections using the dot command <code>.connection</code>:</p>
<pre tabindex="0"><code>sqlite&gt; .connection
ACTIVE 0: :memory:
</code></pre><pre tabindex="0"><code>sqlite&gt; .open employees.ru.db
sqlite&gt; .connection
ACTIVE 0: employees.ru.db
</code></pre><pre tabindex="0"><code>sqlite&gt; .connection 1
sqlite&gt; .open employees.en.db
sqlite&gt; .connection
       0: employees.ru.db
ACTIVE 1: employees.en.db
</code></pre><p>See <a href="https://sqlite.org/cli.html#dotconn">Working With Multiple Database Connections</a> for details.</p>
<p>Also, there is now a <code>--safe</code> launch option. It disables commands that can make changes anywhere other than a specific database. Safe mode disables <code>.open</code>, <code>.shell</code>, <code>.import</code> and other &ldquo;dangerous&rdquo; commands.</p>
<p>See <a href="https://sqlite.org/cli.html#safemode">The &ndash;safe command-line option</a> for details.</p>
<h2 id="and-a-few-more-little-things">And a few more little things</h2>
<ul>
<li>The query scheduler ignores <code>order by</code> on subqueries unless they change the overall semantics of the query.</li>
<li>Function <code>generate_series(start, stop, step)</code> always requires the <code>start</code> parameter (<code>stop</code> and <code>step</code> remain optional).</li>
<li>Some changes in C API.</li>
</ul>
<p>Overall, a great release! Strict tables offer a long-awaited alternative to flexible typing, <code>any</code> type makes flexibility explicit, and <code>table_list</code> pragma is just nice to have.</p>
<p><a href="https://sqlite.org/releaselog/3_37_0.html">Official release notes</a> | <a href="https://sqlite.org/download.html">Download</a></p>
<p><em>Follow <strong><a href="https://twitter.com/ohmypy">@ohmypy</a></strong> on Twitter to keep up with new posts 🚀</em></p>
]]></content:encoded></item><item><title>How Python list really works</title><link>https://antonz.org/list-internals/</link><pubDate>Fri, 12 Nov 2021 17:55:00 +0000</pubDate><guid>https://antonz.org/list-internals/</guid><description>And why some methods take constant time while others take linear.</description><content:encoded><![CDATA[<p><em>This post is largely about the arrays — the #1 data structure in the world. If you are not a data structure guru yet, I guarantee that you will better understand Python lists, their advantages and limitations. If you already know everything — there is no harm in refreshing the key points.</em></p>
<p>Everybody knows how to work with lists in Python:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">guests</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Frank&#34;</span>, <span style="color:#c41a16">&#34;Claire&#34;</span>, <span style="color:#c41a16">&#34;Zoe&#34;</span>]
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">guests</span>[<span style="color:#1c01ce">1</span>]
<span style="color:#c41a16">&#39;Claire&#39;</span>
</code></pre></div><p>Surely you know that selecting an item by index — <code>guests[idx]</code> — works instantly even on a million elements list. More precisely, selection by index takes constant time O(1) — that is, it does not depend on the number of items in the list.</p>
<p>Do you know why it works so fast? Let&rsquo;s find out.</p>
<h2 id="list--array">List = array?</h2>
<p>The list is based on an array. An array is a set of elements ① of the same size, ② located in memory one after another, without gaps.</p>
<p>Since elements are the same size and placed contiguously, it is easy to get an array item by index. All we need is the memory address of the very first element (the &ldquo;head&rdquo; of the array).</p>
<p>Let&rsquo;s say the head is located at the address <code>0×00001234</code>, and each item occupies 8 bytes. Then the element with the <code>idx</code> index is located at <code>0×00001234 + idx*8</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="List = array" src="array-1.png" class="img-bordered-thin">
</figure>
</div>
</div>
<p>Since the &ldquo;get value by address&rdquo; memory operation takes constant time, selecting an array item by index also takes O(1).</p>
<p>Roughly speaking, this is how Python list works. It stores a pointer to the head of the array and the number of items in the array. The item count is stored separately so that the <code>len()</code> function also performs in O(1) time, and does not have to count the elements each time.</p>
<p>So far so good. But there are a couple of problems:</p>
<ul>
<li>All array elements are the same size, but the list should be able to store items of different sizes (true/false, numbers, strings of different lengths).</li>
<li>The array has a fixed length, but the list should be able to store an arbitrary number of items.</li>
</ul>
<p>We&rsquo;ll tackle them a bit later.</p>
<h2 id="a-very-primitive-list">A very primitive list</h2>
<p>The best way to master a data structure is to implement it from scratch. Unfortunately, Python is not well suited for such low-level structures as arrays, because it doesn&rsquo;t support explicit pointers (addresses in memory).</p>
<p>This is probably as close as we can get:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">OhMyList</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">__init__</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">capacity</span> <span style="color:#000">=</span> <span style="color:#1c01ce">8</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span> <span style="color:#000">=</span> (<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">capacity</span> <span style="color:#000">*</span> <span style="color:#000">ctypes</span><span style="color:#000">.</span><span style="color:#000">py_object</span>)()

    <span style="color:#a90d91">def</span> <span style="color:#000">append</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">item</span>):
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span>[<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span>] <span style="color:#000">=</span> <span style="color:#000">item</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span> <span style="color:#000">+=</span> <span style="color:#1c01ce">1</span>

    <span style="color:#a90d91">def</span> <span style="color:#000">__len__</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#a90d91">return</span> <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span>

    <span style="color:#a90d91">def</span> <span style="color:#000">__getitem__</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">idx</span>):
        <span style="color:#a90d91">return</span> <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span>[<span style="color:#000">idx</span>]
</code></pre></div><p>Our custom list has a fixed capacity (<code>capacity</code> = 8 items) and stores the elements in the <code>array</code> array.</p>
<p>The <code>ctypes</code> module gives access to the low-level structures on which the standard library is built. In this case, we use it to create a C-style array of <code>capacity</code> elements.</p>
<h2 id="list--array-of-pointers">List = array of pointers</h2>
<p>The list instantly retrieves an item by index, because it has an array inside. And the array is so fast because all the elements are the same size.</p>
<p>But list items can be of different sizes:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#000">guests</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Frank&#34;</span>, <span style="color:#c41a16">&#34;Claire&#34;</span>, <span style="color:#c41a16">&#34;Zoe&#34;</span>, <span style="color:#a90d91">True</span>, <span style="color:#1c01ce">42</span>]
</code></pre></div><p>To solve this problem, someone came up with the idea of storing item <em>pointers</em> instead of item <em>values</em>. Each element of the array is a memory address, and if you follow this address — you will get the actual value:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="List = array of pointers" src="array-2.png" class="img-bordered-thin">
  <figcaption>The array stores pointers adjacently. But the values they refer to can be stored anywhere in memory.</figcaption>
</figure>
</div>
</div>
<p>Since pointers are fixed size (8 bytes on modern 64-bit processors), everything works fine. Instead of one operation (get the value from the array cell), we&rsquo;ve now got two:</p>
<ol>
<li>Get the address from the array cell.</li>
<li>Get the value at that address.</li>
</ol>
<p>But it&rsquo;s still constant time O(1).</p>
<h2 id="list--dynamic-array">List = dynamic array</h2>
<p>If there are empty spaces left in the array underneath the list, then the <code>.append(item)</code> runs in constant time. All it takes is to write a new value to a free cell and increase the element counter by 1:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#a90d91">def</span> <span style="color:#000">append</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">item</span>):
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span>[<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span>] <span style="color:#000">=</span> <span style="color:#000">item</span>
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span> <span style="color:#000">+=</span> <span style="color:#1c01ce">1</span>
</code></pre></div><p>But what if the array is already full?</p>
<p>Python has to allocate memory for a new, bigger array and copy all the old items to the new one:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="List = dynamic array" src="array-3.png" class="img-bordered-thin">
  <figcaption>When there is no more space in the old array, it's time to create a new one.</figcaption>
</figure>
</div>
</div>
<p>Here we go:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#a90d91">def</span> <span style="color:#000">append</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">item</span>):
    <span style="color:#a90d91">if</span> <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span> <span style="color:#000">==</span> <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">capacity</span>:
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">_resize</span>(<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">capacity</span><span style="color:#000">*</span><span style="color:#1c01ce">2</span>)
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span>[<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span>] <span style="color:#000">=</span> <span style="color:#000">item</span>
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span> <span style="color:#000">+=</span> <span style="color:#1c01ce">1</span>

<span style="color:#a90d91">def</span> <span style="color:#000">_resize</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">new_cap</span>):
    <span style="color:#000">new_arr</span> <span style="color:#000">=</span> (<span style="color:#000">new_cap</span> <span style="color:#000">*</span> <span style="color:#000">ctypes</span><span style="color:#000">.</span><span style="color:#000">py_object</span>)()
    <span style="color:#a90d91">for</span> <span style="color:#000">idx</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">length</span>):
        <span style="color:#000">new_arr</span>[<span style="color:#000">idx</span>] <span style="color:#000">=</span> <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span>[<span style="color:#000">idx</span>]
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">array</span> <span style="color:#000">=</span> <span style="color:#000">new_arr</span>
    <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">capacity</span> <span style="color:#000">=</span> <span style="color:#000">new_cap</span>
</code></pre></div><p><code>._resize()</code> is a costly operation, so the new array should be significantly larger than the old one. In the example above, the new array is twice as large. Python uses a more modest coefficient — about 1.12.</p>
<p>If you remove more than half of the items from the list via <code>.pop()</code>, Python will shrink it. It&rsquo;ll allocate a new, smaller array and move the elements into it.</p>
<p>Thus, the list juggles arrays all the time so that we don&rsquo;t have to do it ツ</p>
<h2 id="appending-an-item-to-the-list">Appending an item to the list</h2>
<p>Selecting from the list by index takes O(1) time — we have sorted that out. The <code>.append(item)</code> method is also O(1) until Python has to extend the array under the list. But array extension is an O(n) operation. So how long does <code>.append()</code> take after all?</p>
<p>It would be wrong to measure a single append — as we found out, sometimes it takes O(1), sometimes O(n). So computer scientists came up with <em>amortized analysis</em>. To get an amortized operation time, one estimates the total time that a sequence of K operations will take, then divide it by K.</p>
<p>Without going into details, I will say that the amortized time for <code>.append(item)</code> turns out to be constant — O(1). So appending to the list works very fast.</p>
<div class="boxed">
<h3>Why amortized append time is O(1)</h3>
<p>Let's say the list is empty and want to append <code>n</code> items. For simplicity, we'll use the expansion factor of 2. Let's count the number of atomic operations:</p>
<ul>
  <li>1st item: 1 (copy) + 1 (insert)</li>
  <li>another 2: 2 (copy) + 2 (insert)</li>
  <li>another 4: 4 (copy) + 4 (insert)</li>
  <li>another 8: 8 (copy) + 8 (insert)</li>
  <li>...</li>
</ul>
<p>For <code>n</code> items there will be <code>n</code> insertions.</p>
<p>As for copy:</p>
<pre><code>1 + 2 + 4 + ... log(n) = 
= 2**log(n) * 2 - 1 =
= 2n - 1</code></pre>
<p>operations.</p>
<p>So for <code>n</code> items there will be <code>3n - 1</code> atomic operations.</p>
<p><code>O((3n - 1) / n)</code> = <code>O(1)</code></p>
</div>
<p>Summing up, the following operations are guaranteed to be fast:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#177500"># O(1)</span>
<span style="color:#000">lst</span>[<span style="color:#000">idx</span>]

<span style="color:#177500"># O(1)</span>
<span style="color:#a90d91">len</span>(<span style="color:#000">lst</span>)

<span style="color:#177500"># amortized O(1)</span>
<span style="color:#000">lst</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">item</span>)
<span style="color:#000">lst</span><span style="color:#000">.</span><span style="color:#000">pop</span>()
</code></pre></div><h2 id="summary">Summary</h2>
<p>As we found out, these operations are O(1):</p>
<ul>
<li>select an item by index <code>lst[idx]</code></li>
<li>count items <code>len(lst)</code></li>
<li>add an item to the end of the list <code>.append(item)</code></li>
<li>remove an item from the end of the list <code>.pop()</code></li>
</ul>
<p>Other operations are &ldquo;slow&rdquo;:</p>
<ul>
<li>Insert or delete an item by index. <code>.insert(idx, item)</code> and <code>.pop(idx)</code> take linear time O(n) because they shift all the elements after the target one.</li>
<li>Search or delete an item by value. <code>item in lst</code>, <code>.index(item)</code> and <code>.remove(item)</code> take linear time O(n) because they iterate over all the elements.</li>
<li>Select a slice of <code>k</code> elements. <code>lst[from:to]</code> takes O(k).</li>
</ul>
<p>Does this mean that you should not use &ldquo;slow&rdquo; operations? Of course not. If you have a list of 1000 items, the difference between O(1) and O(n) for a single operation is insignificant.</p>
<p>On the other hand, if you perform a &ldquo;slow&rdquo; operation on a list of 1000 items a million times — this is quite significant. The same goes if you invoke a single &ldquo;slow&rdquo; operation on a list of a million items.</p>
<p>Therefore, it is useful to know which list methods take constant time and which take linear time — to make a conscious decision in a specific situation.</p>
<p>I hope you&rsquo;ll see Python lists in a new way after this article. Thanks for reading!</p>
<p><em>Follow <a href="https://twitter.com/ohmypy">@ohmypy</a> on Twitter to keep up with new posts 🚀</em></p>
<p><a href="https://news.ycombinator.com/item?id=29217038">Comments on Hacker News</a></p>
]]></content:encoded></item><item><title>SQLite playground in the browser</title><link>https://antonz.org/sqlite-playground/</link><pubDate>Mon, 04 Oct 2021 10:40:00 +0000</pubDate><guid>https://antonz.org/sqlite-playground/</guid><description>I have built an online SQL playground with vanilla JS and a bit of GitHub API. Here's how.</description><content:encoded><![CDATA[<p>What I&rsquo;ve always lacked is something similar to JSFiddle, but for SQLite. An online playground to quickly test an SQL query and share it with others.</p>
<p>Here is what I wanted:</p>
<ul>
<li>Binary database import, not just SQL schema.</li>
<li>Support both local and remote databases (by url).</li>
<li>Save the database and queries in the cloud.</li>
<li>Free of charge, no sign-up required.</li>
<li>The latest version of SQLite.</li>
<li>Minimalistic and mobile friendly.</li>
</ul>
<p>So I&rsquo;ve built <strong><a href="https://sqlime.org/">SQLime</a></strong> — an online SQLite playground for debugging and sharing SQL snippets.</p>
<p><img src="sqlime.jpg" alt="SQLime - SQLite Playground"></p>
<p>First I&rsquo;ll show the results, then describe how everything works:</p>
<ul>
<li><a href="https://sqlime.org/">empty playground</a>;</li>
<li><a href="https://sqlime.org/#gist:e012594111ce51f91590c4737e41a046">sample database</a>;</li>
<li><a href="https://github.com/nalgeon/sqlime">source code</a>.</li>
</ul>
<p>Now the details.</p>
<h2 id="sqlite-in-the-browser">SQLite in the browser</h2>
<p>All browsers — both mobile and desktop — have an excellent DBMS is already built-in — <a href="https://sqlite.org/">SQLite</a>. It implements the SQL-92 standard (and a large part of later standards). Seems only logical to access it through the browser API.</p>
<p>Many browser vendors thought so at the end of the 00s. That&rsquo;s how Web SQL standard appeared, supported by Apple (Safari), Google (Chrome), and Opera (popular at the time). Not by Mozilla (Firefox), though. As a result, Web SQL was killed in 2010. After that, browser data storage went along the NoSQL path (Indexed Database, Cache API).</p>
<p>In 2019, Ophir Lojkine compiled SQLite sources into WebAssembly (the &lsquo;native&rsquo; browser binary format) for the <a href="https://github.com/sql-js/sql.js">sql.js</a> project. It is a full-fledged SQLite instance that works in the browser (and quite a small one — the binary takes about 1Mb).</p>
<p>sql.js is the perfect engine for an online playground. So I used it.</p>
<h2 id="loading-the-database-from-a-file">Loading the database from a file</h2>
<p>Get the file from the user via <code>input[type=file]</code>, read it with the <code>FileReader</code>, convert into an 8-bit array, and upload to SQLite:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> <span style="color:#000">file</span> <span style="color:#000">=</span> <span style="color:#000">event</span>.<span style="color:#000">target</span>.<span style="color:#000">files</span>[<span style="color:#1c01ce">0</span>];
<span style="color:#a90d91">const</span> <span style="color:#000">reader</span> <span style="color:#000">=</span> <span style="color:#a90d91">new</span> <span style="color:#000">FileReader</span>();
<span style="color:#000">reader</span>.<span style="color:#000">onload</span> <span style="color:#000">=</span> <span style="color:#a90d91">function</span> () {
    <span style="color:#a90d91">const</span> <span style="color:#000">arr</span> <span style="color:#000">=</span> <span style="color:#a90d91">new</span> <span style="color:#000">Uint8Array</span>(<span style="color:#000">reader</span>.<span style="color:#000">result</span>);
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">new</span> <span style="color:#000">SQL</span>.<span style="color:#000">Database</span>(<span style="color:#000">arr</span>);
};
<span style="color:#000">reader</span>.<span style="color:#000">readAsArrayBuffer</span>(<span style="color:#000">file</span>);
</code></pre></div><h2 id="loading-the-database-by-url">Loading the database by URL</h2>
<p>Upload the file using <code>fetch()</code>, read the answer into <code>ArrayBuffer</code>, then proceed as with a regular file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> <span style="color:#000">resp</span> <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">fetch</span>(<span style="color:#000">url</span>);
<span style="color:#a90d91">const</span> <span style="color:#000">buffer</span> <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">response</span>.<span style="color:#000">arrayBuffer</span>();
<span style="color:#a90d91">const</span> <span style="color:#000">arr</span> <span style="color:#000">=</span> <span style="color:#a90d91">new</span> <span style="color:#000">Uint8Array</span>(<span style="color:#000">buffer</span>);
<span style="color:#a90d91">return</span> <span style="color:#a90d91">new</span> <span style="color:#000">SQL</span>.<span style="color:#000">Database</span>(<span style="color:#000">arr</span>);
</code></pre></div><p>Works equally well with local and remote URLs. Also handles databases hosted on GitHub — just use the <code>raw.githubusercontent.com</code> domain instead of <code>github.com</code>:</p>
<pre tabindex="0"><code>https://github.com/nalgeon/sqliter/blob/main/employees.en.db
→ https://raw.githubusercontent.com/nalgeon/sqliter/main/employees.en.db
</code></pre><h2 id="querying-the-database">Querying the database</h2>
<p>Perhaps the simplest part, as sql.js provides a convenient query API:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#177500">// execute one or more queries
</span><span style="color:#177500">// and return the last result
</span><span style="color:#177500"></span><span style="color:#a90d91">const</span> <span style="color:#000">result</span> <span style="color:#000">=</span> <span style="color:#000">db</span>.<span style="color:#000">exec</span>(<span style="color:#000">sql</span>);
<span style="color:#a90d91">if</span> (<span style="color:#000">!</span><span style="color:#000">result</span>.<span style="color:#000">length</span>) {
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">null</span>;
}
<span style="color:#a90d91">return</span> <span style="color:#000">result</span>[<span style="color:#000">result</span>.<span style="color:#000">length</span> <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>];
</code></pre></div><h2 id="exporting-the-database-to-sql">Exporting the database to SQL</h2>
<p>It is not hard to get the binary database content — sql.js provides a method:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> <span style="color:#000">buffer</span> <span style="color:#000">=</span> <span style="color:#000">db</span>.<span style="color:#a90d91">export</span>();
<span style="color:#a90d91">const</span> <span style="color:#000">blob</span> <span style="color:#000">=</span> <span style="color:#a90d91">new</span> <span style="color:#000">Blob</span>([<span style="color:#000">buffer</span>]);
<span style="color:#a90d91">const</span> <span style="color:#000">link</span> <span style="color:#000">=</span> <span style="color:#a90d91">document</span>.<span style="color:#000">createElement</span>(<span style="color:#c41a16">&#34;a&#34;</span>);
<span style="color:#000">link</span>.<span style="color:#000">href</span> <span style="color:#000">=</span> <span style="color:#a90d91">window</span>.<span style="color:#000">URL</span>.<span style="color:#000">createObjectURL</span>(<span style="color:#000">blob</span>);
<span style="color:#177500">// ...
</span><span style="color:#177500"></span><span style="color:#000">link</span>.<span style="color:#000">click</span>();
</code></pre></div><p>But I wanted a full SQL script with table schema and contents instead of a binary file. Such script is easier to understand and upload to PostgreSQL or another DBMS.</p>
<p>To export the database, I used the algorithm from the <a href="https://github.com/simonw/sqlite-dump">sqlite-dump</a> project. The code is not very concise, so I will not show it here (see <a href="https://github.com/nalgeon/sqlime/blob/main/js/dumper.js">dumper.js</a> if interested). In short:</p>
<ol>
<li>Get a list of tables from the system <code>sqlite_schema</code> table, extract <code>create table...</code> queries.</li>
<li>For each table, get a list of columns from the virtual table <code>table_info(name)</code>.</li>
<li>Select data from each table and generate <code>insert into...</code> queries.</li>
</ol>
<p>It produces a readable script:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#a90d91">if</span> <span style="color:#a90d91">not</span> <span style="color:#a90d91">exists</span> <span style="color:#000">employees</span> (
    <span style="color:#000">id</span> <span style="color:#a90d91">integer</span> <span style="color:#a90d91">primary</span> <span style="color:#a90d91">key</span>,
    <span style="color:#000">name</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">city</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">department</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">salary</span> <span style="color:#a90d91">integer</span>
);
<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#c41a16">&#34;employees&#34;</span> <span style="color:#a90d91">values</span>(<span style="color:#1c01ce">11</span>,<span style="color:#c41a16">&#39;Diane&#39;</span>,<span style="color:#c41a16">&#39;London&#39;</span>,<span style="color:#c41a16">&#39;hr&#39;</span>,<span style="color:#1c01ce">70</span>);
<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#c41a16">&#34;employees&#34;</span> <span style="color:#a90d91">values</span>(<span style="color:#1c01ce">12</span>,<span style="color:#c41a16">&#39;Bob&#39;</span>,<span style="color:#c41a16">&#39;London&#39;</span>,<span style="color:#c41a16">&#39;hr&#39;</span>,<span style="color:#1c01ce">78</span>);
<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#c41a16">&#34;employees&#34;</span> <span style="color:#a90d91">values</span>(<span style="color:#1c01ce">21</span>,<span style="color:#c41a16">&#39;Emma&#39;</span>,<span style="color:#c41a16">&#39;London&#39;</span>,<span style="color:#c41a16">&#39;it&#39;</span>,<span style="color:#1c01ce">84</span>);
...
</code></pre></div><h2 id="saving-to-the-cloud">Saving to the cloud</h2>
<p>The database and queries need to be stored somewhere so that you can share a link to the prepared playground. The last thing I wanted was to implement the backend with authorization and storage. That way the service could not stay free, not to mention an extra signup headache.</p>
<p>Fortunately, there is a GitHub Gist API that perfectly fits all criteria:</p>
<ul>
<li>many developers already have GitHub accounts;</li>
<li>API allows CORS (allowed to make requests from my domain);</li>
<li>nice user interface;</li>
<li>free and reliable.</li>
</ul>
<p>I integrated the Gist API via the ordinary <code>fetch()</code>: <code>GET</code> to load the gist, <code>POST</code> to save it.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#177500">// produce an SQL script with db schema and contents
</span><span style="color:#177500"></span><span style="color:#a90d91">const</span> <span style="color:#000">data</span> <span style="color:#000">=</span> <span style="color:#a90d91">export</span>(<span style="color:#000">db</span>);
<span style="color:#177500">// save as gist
</span><span style="color:#177500"></span><span style="color:#000">fetch</span>(<span style="color:#c41a16">&#34;https://api.github.com/gists&#34;</span>, {
    <span style="color:#000">method</span><span style="color:#000">:</span> <span style="color:#c41a16">&#34;post&#34;</span>,
    <span style="color:#000">headers</span><span style="color:#000">:</span> {
        <span style="color:#000">Accept</span><span style="color:#000">:</span> <span style="color:#c41a16">&#34;application/json&#34;</span>,
        <span style="color:#c41a16">&#34;Content-Type&#34;</span><span style="color:#000">:</span> <span style="color:#c41a16">&#34;application/json&#34;</span>,
        <span style="color:#000">Authorization</span><span style="color:#000">:</span> <span style="color:#c41a16">`Token </span><span style="color:#c41a16">${</span><span style="color:#000">token</span><span style="color:#c41a16">}</span><span style="color:#c41a16">`</span>
    },
    <span style="color:#000">body</span><span style="color:#000">:</span> <span style="color:#000">JSON</span>.<span style="color:#000">stringify</span>(<span style="color:#000">data</span>),
});
</code></pre></div><p>All the user needs is to specify the Github API token. Conveniently, the token is scoped exclusively to work with gists — it has no access to repositories, so is guaranteed to do no harm.</p>
<h2 id="user-interface">User Interface</h2>
<p>Modern frontend projects are full of tooling and infrastructure stuff. Honestly, I&rsquo;m not interested in it at all (I&rsquo;m not a JS developer). So I deliberately did not use UI frameworks and did everything with vanilla HTML + CSS + JS. It seems to be quite acceptable for a small project.</p>
<figure>
    <img alt="SQLime on mobile" src="mobile.jpg">
    <figcaption class="align-center">I took care of the mobile layout: the playground is perfectly usable on the phone. And there are command shortcuts for the desktop.</figcaption>
</figure>
<p>At the same time, the code turned out to be quite modular, thanks to native JS modules and web components — they are supported by all modern browsers. A real frontend developer will wince probably, but I&rsquo;m fine.</p>
<p>The playground is hosted on GitHub Pages, and the deployment is a basic <code>git push</code>. Since there is no build stage, I didn&rsquo;t even have to set up GitHub Actions.</p>
<h2 id="summary">Summary</h2>
<p>Try <a href="https://sqlime.org/">SQLime</a> for yourself — see if you find it useful. Or, perhaps, you&rsquo;ll adopt the approach of creating serverless tools with vanilla JS and GitHub API. Constructive critique is also welcome, of course ツ</p>
<p><em>Follow <a href="https://twitter.com/ohmypy">@ohmypy</a> on Twitter to keep up with new posts 🚀</em></p>
<p><a href="https://news.ycombinator.com/item?id=28669703">Comments on Hacker News</a></p>
]]></content:encoded></item></channel></rss>