<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Anton Zhiyanov</title>
    <link>https://antonz.org/tags/python/</link>
    <description>Recent content in python on Anton Zhiyanov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jun 2021 11:00:00 +0000</lastBuildDate><atom:link href="https://antonz.org/tags/python/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Good Code Criterion</title>
      <link>https://antonz.org/good-code/</link>
      <pubDate>Wed, 02 Jun 2021 11:00:00 +0000</pubDate>
      
      <guid>https://antonz.org/good-code/</guid>
      <description>Good code is understandable and non-greedy. Let&amp;rsquo;s talk about it.
Time to understanding The main criterion for good code is the time T it takes for a non-author to understand the code. Not &amp;ldquo;I sorta get it&amp;rdquo;, but understand deep enough to make changes and not break anything.
The smaller the T, the better the code.
Let&amp;rsquo;s say Alice and Bob implemented the same feature, and you want to modify it.</description>
    </item>
    
    <item>
      <title>How to make an awesome Python package in 2021</title>
      <link>https://antonz.org/python-packaging/</link>
      <pubDate>Tue, 06 Apr 2021 20:30:00 +0300</pubDate>
      
      <guid>https://antonz.org/python-packaging/</guid>
      <description>If you are like me, every once in a while you write a useful python utility and want to share it with your colleagues. The best way to do this is to make a package: it easy to install and saves from copy-pasting.
If you are like me, you might be thinking that creating packages is a real headache. Well, that&amp;rsquo;s not the case anymore. And I am going to prove it with this step-by-step guide.</description>
    </item>
    
    <item>
      <title>Automate your Python project with Makefile</title>
      <link>https://antonz.org/makefile-automation/</link>
      <pubDate>Tue, 16 Mar 2021 17:15:00 +0000</pubDate>
      
      <guid>https://antonz.org/makefile-automation/</guid>
      <description>When working on a library or application, certain tasks tend to show up over and over again:
 checking the code with linters, running tests with coverage, deploying with Docker, &amp;hellip;  JS developers are lucky (ha!): their package.json has a special scripts section for this stuff:
{ ... &amp;quot;scripts&amp;quot;: { &amp;quot;format&amp;quot;: &amp;quot;prettier --write \&amp;quot;src/**/*.ts\&amp;quot;&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;tslint -p tsconfig.json&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest --coverage --config jestconfig.json&amp;quot;, }, ... } Nothing like this is provided with Python.</description>
    </item>
    
  </channel>
</rss>
