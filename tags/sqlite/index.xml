<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sqlite on Anton Zhiyanov</title><link>https://antonz.org/tags/sqlite/</link><description>Recent content in sqlite on Anton Zhiyanov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 07 May 2022 17:10:00 +0000</lastBuildDate><atom:link href="https://antonz.org/tags/sqlite/index.xml" rel="self" type="application/rss+xml"/><item><title>Generated columns in SQLite</title><link>https://antonz.org/generated-columns/</link><pubDate>Sat, 07 May 2022 17:10:00 +0000</pubDate><guid>https://antonz.org/generated-columns/</guid><description>Sometimes an SQL query field is calculated based on other table columns. Imagine a table with income and tax_rate columns:
┌────────┬──────────┐ │ income │ tax_rate │ ├────────┼──────────┤ │ 70 │ 0.22 │ │ 84 │ 0.22 │ │ 90 │ 0.24 │ └────────┴──────────┘ You can calculate the annual tax:
select id, income * tax_rate as tax from people; In order not to repeat these calculations everywhere, it is convenient to create a virtual generated column:</description></item><item><title>Multi-line queries in SQLite shell</title><link>https://antonz.org/sqlite-multiline/</link><pubDate>Sun, 24 Apr 2022 21:30:00 +0000</pubDate><guid>https://antonz.org/sqlite-multiline/</guid><description>Just after writing that debugging multi-line queries in SQLite shell is not easy, I discovered a cool trick on the sqlite forum:
Use Ctrl+V, Ctrl+J instead of Enter for new lines. After that, edit the query with the ↑ button.
And here are some more ways to edit multi-line queries:
Use external editor (.shell &amp;lt;editor&amp;gt; &amp;lt;file&amp;gt;) Run query from file (.read &amp;lt;file&amp;gt;) Consider DBeaver, DataGrip or other UI tool Follow @ohmypy on Twitter to keep up with new posts 🚀</description></item><item><title>SQLite CLI command history</title><link>https://antonz.org/sqlite-history/</link><pubDate>Sun, 17 Apr 2022 14:50:00 +0000</pubDate><guid>https://antonz.org/sqlite-history/</guid><description>SQLite command line tool (sqlite3 or sqlite3.exe) remembers the last 2000 executed commands. To repeat the last command, just press the ↑ key, to search for older ones — use Ctrl+R shortcut.
It's faster to find a query than to type it again By default, SQLite stores the history file in the user&amp;rsquo;s home directory and names it .sqlite_history. It&amp;rsquo;s in plain text, so you can view it in your favorite editor.</description></item><item><title>The ultimate SQLite extension set</title><link>https://antonz.org/sqlean/</link><pubDate>Tue, 04 Jan 2022 13:00:00 +0000</pubDate><guid>https://antonz.org/sqlean/</guid><description>I really like SQLite. It&amp;rsquo;s a miniature embedded database, perfect for both exploratory data analysis and as a storage for small apps (I&amp;rsquo;ve blogged about that previously).
It has a minor drawback though. There are few built-in functions compared to PostgreSQL or Oracle. Fortunately, the authors provided an extension mechanism, which allows doing almost anything. As a result, there are a lot of SQLite extensions out there, but they are incomplete, inconsistent and scattered across the internet.</description></item><item><title>What's new in SQLite 3.37</title><link>https://antonz.org/sqlite-3-37/</link><pubDate>Sun, 28 Nov 2021 15:25:00 +0000</pubDate><guid>https://antonz.org/sqlite-3-37/</guid><description>Unlike 3.35, release 3.37 didn&amp;rsquo;t bring many changes. But among them is one of the most important in the history of SQLite: the &amp;ldquo;strict&amp;rdquo; table mode, in which the engine makes sure that the data in the column matches the type.
Perhaps now SQLite will no longer be called &amp;ldquo;the JavaScript of the DBMS world&amp;rdquo; ツ But let&amp;rsquo;s take it one piece at a time.
The problem with types SQLite supports 5 data types:</description></item><item><title>SQLite playground in the browser</title><link>https://antonz.org/sqlite-playground/</link><pubDate>Mon, 04 Oct 2021 10:40:00 +0000</pubDate><guid>https://antonz.org/sqlite-playground/</guid><description>What I&amp;rsquo;ve always lacked is something similar to JSFiddle, but for SQLite. An online playground to quickly test an SQL query and share it with others.
Here is what I wanted:
Binary database import, not just SQL schema. Support both local and remote databases (by url). Save the database and queries in the cloud. Free of charge, no sign-up required. The latest version of SQLite. Minimalistic and mobile friendly. So I&amp;rsquo;ve built SQLime — an online SQLite playground for debugging and sharing SQL snippets.</description></item><item><title>SQLite is not a toy database</title><link>https://antonz.org/sqlite-is-not-a-toy-database/</link><pubDate>Thu, 25 Mar 2021 09:00:00 +0000</pubDate><guid>https://antonz.org/sqlite-is-not-a-toy-database/</guid><description>English • Russian • Spanish
Whether you are a developer, data analyst, QA engineer, DevOps person, or product manager - SQLite is a perfect tool for you. Here is why.
A few well-known facts to get started:
SQLite is the most common DBMS in the world, shipped with all popular operating systems. SQLite is serverless. For developers, SQLite is embedded directly into the app. For everyone else, there is a convenient database console (REPL), provided as a single file (sqlite3.</description></item><item><title>How to create a 1M record table with a single query</title><link>https://antonz.org/random-table/</link><pubDate>Sun, 21 Mar 2021 21:15:00 +0000</pubDate><guid>https://antonz.org/random-table/</guid><description>Let&amp;rsquo;s say you want to check how a query behaves on a large table - but there is no such table at hand. This is not a problem if your DBMS supports SQL recursion: lots of data can be generated with a single query. The WITH RECURSIVE clause comes to the rescue.
I&amp;rsquo;m going to use SQLite, but the same (or similar) queries will work for PostgreSQL and other DBMSs. Specifically, WITH RECURSIVE is supported in MariaDB 10.</description></item><item><title>SQLite is not so easy to compile</title><link>https://antonz.org/sqlite-is-not-so-easy-to-compile/</link><pubDate>Mon, 15 Mar 2021 11:45:00 +0000</pubDate><guid>https://antonz.org/sqlite-is-not-so-easy-to-compile/</guid><description>SQLite shell is quite easy to compile, right?
curl -L http://sqlite.org/2021/sqlite-amalgamation-3350000.zip --output src.zip unzip src.zip mv sqlite-amalgamation-3350000 src gcc src/shell.c src/sqlite3.c -o sqlite3 -lpthread -ldl Well, unless you want all the cool features which are not included in the default build. Or unless you are using Windows and prefer 64-bit binary to 32-bit. Or unless you do not have gcc installed.
I found myself in these situations a couple of times.</description></item><item><title>What's new in SQLite 3.35</title><link>https://antonz.org/sqlite-3-35/</link><pubDate>Fri, 12 Mar 2021 19:10:16 +0000</pubDate><guid>https://antonz.org/sqlite-3-35/</guid><description>SQLite developers often prefer to work on database internals. For an external observer nothing really changes. 2020 was a pleasant exception - SQLite received a bunch of nice features for ordinary users, such as generated columns, UPDATE FROM and fantastic .mode box in the shell.
There&amp;rsquo;s every chance that 2021 will continue the tradition. Here&amp;rsquo;s what shipped in the 3.35 release today:
Math functions ‼️ Column removal ❗ RETURNING processed rows for DELETE, INSERT and UPDATE.</description></item></channel></rss>