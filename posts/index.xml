<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>All posts on Anton Zhiyanov</title><link>https://antonz.org/posts/</link><description>Recent content in All posts on Anton Zhiyanov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Feb 2023 13:30:00 +0000</lastBuildDate><atom:link href="https://antonz.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL Window Functions: Ranking</title><link>https://antonz.org/sql-window-functions-ranking/</link><pubDate>Wed, 08 Feb 2023 13:30:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-ranking/</guid><description>This is an excerpt from my book SQL Window Functions Explained. The book is a clear and visual introduction to the topic with lots of practical exercises.
Ranking means coming up with all kinds of ratings, starting from the winners of the World Swimming Championships and ending with the Forbes 500.
We will rank records from the toy employees table:
┌────┬───────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼───────┼────────┼────────────┼────────┤ │ 11 │ Diane │ London │ hr │ 70 │ │ 12 │ Bob │ London │ hr │ 78 │ │ 21 │ Emma │ London │ it │ 84 │ │ 22 │ Grace │ Berlin │ it │ 90 │ │ 23 │ Henry │ London │ it │ 104 │ │ 24 │ Irene │ Berlin │ it │ 104 │ │ 25 │ Frank │ Berlin │ it │ 120 │ │ 31 │ Cindy │ Berlin │ sales │ 96 │ │ 32 │ Dave │ London │ sales │ 96 │ │ 33 │ Alice │ Berlin │ sales │ 100 │ └────┴───────┴────────┴────────────┴────────┘ playground • download</description></item><item><title>Cherry-Picked Features from Go 1.20</title><link>https://antonz.org/go-1-20/</link><pubDate>Tue, 07 Feb 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/go-1-20/</guid><description>Go 1.20 brought a lot of new features and improvements. In this post, I&amp;rsquo;d like to review the ones that caught my eye. This is by no means an exhaustive list; for that, see the official release notes.
These are the topics for review:
Multi-errors &amp;lsquo;Context Canceled&amp;rsquo; Cause New Date Formats Slice to Array Conversion Other Notable Changes Each section has a playground link, so check those out.</description></item><item><title>Regular Expressions in SQLite</title><link>https://antonz.org/sqlean-regexp/</link><pubDate>Sat, 04 Feb 2023 11:20:00 +0000</pubDate><guid>https://antonz.org/sqlean-regexp/</guid><description>Regular expressions are probably the most powerful text processing tool without programming.
SQLite does not support regular expressions by default. But you can easily enable them using the regexp extension.
Note. Unlike other DBMS, adding extensions in SQLite is a breeze. Download a file, run one database command — and you are good to go.
With regexp, matching a string against a pattern becomes as easy as:
-- count messages containing digits select count(*) from messages where msg_text regexp &amp;#39;\d+&amp;#39;; -- 42 Pattern matching and text replacement There are three main tasks people usually solve using regular expressions:</description></item><item><title>Why Use SQL Window Functions</title><link>https://antonz.org/why-use-sql-window-functions/</link><pubDate>Tue, 31 Jan 2023 08:30:00 +0000</pubDate><guid>https://antonz.org/why-use-sql-window-functions/</guid><description>This is an excerpt from my book SQL Window Functions Explained. The book is a clear and visual introduction to the topic with lots of practical exercises.
​In short, window functions assist in building great analytical reports without Excel.
The easiest way to explain it is through concrete examples. We will work with a toy employee table:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Diane │ London │ hr │ 70 │ │ 12 │ Bob │ London │ hr │ 78 │ │ 21 │ Emma │ London │ it │ 84 │ │ 22 │ Grace │ Berlin │ it │ 90 │ │ 23 │ Henry │ London │ it │ 104 │ │ 24 │ Irene │ Berlin │ it │ 104 │ │ 25 │ Frank │ Berlin │ it │ 120 │ │ 31 │ Cindy │ Berlin │ sales │ 96 │ │ 32 │ Dave │ London │ sales │ 96 │ │ 33 │ Alice │ Berlin │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘ Let&amp;rsquo;s look at some tasks that are convenient to solve with the help of SQL window functions.</description></item><item><title>SQL Window Functions Explained</title><link>https://antonz.org/sql-window-functions-book/</link><pubDate>Sun, 22 Jan 2023 18:00:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-book/</guid><description>Window functions are probably the most confusing section of SQL. You might think, &amp;ldquo;So what? They just came up with some additional functions&amp;rdquo;. Not really. &amp;ldquo;Window functions&amp;rdquo; is a separate language built into regular SQL. And it&amp;rsquo;s more complicated than everything you know about SELECTs.
In short, window functions assist in making great analytical reports without Excel. Maybe you want to calculate monthly sales percentages over the year? Window functions. Split marketing channels into effective and ineffective ones?</description></item><item><title>Atomic operations composition in Go</title><link>https://antonz.org/atomics-composition/</link><pubDate>Tue, 17 Jan 2023 09:20:00 +0000</pubDate><guid>https://antonz.org/atomics-composition/</guid><description>An atomic operation in a concurrent program is a great thing. Such operation transforms into a single processor instruction, so it does not require locks. You can safely call it from different goroutines and receive a predictable result.
But what happens if you misuse atomics? Let&amp;rsquo;s figure it out.
Atomicity Let&amp;rsquo;s look at a function that increments a counter:
var counter int32 func increment() { counter += 1 // random sleep up to 10 ms sleep(10) counter += 1 } If we call it 100 times in a single goroutine:</description></item><item><title>Idempotent Close in Go</title><link>https://antonz.org/idempotent-close/</link><pubDate>Wed, 11 Jan 2023 11:00:00 +0000</pubDate><guid>https://antonz.org/idempotent-close/</guid><description>Idempotence is when a repeated call to an operation on an object does not result in changes or errors. Idempotence is a handy development tool.
Let&amp;rsquo;s see how idempotence helps to free the occupied resources safely.
Idempotent Close Suppose we have a gate:
type Gate struct{ // internal state // ... } The NewGate() constructor opens the gate, acquires some system resources, and returns an instance of the Gate.</description></item><item><title>Speed of algorithms (with cats)</title><link>https://antonz.org/big-o/</link><pubDate>Wed, 21 Dec 2022 16:50:00 +0000</pubDate><guid>https://antonz.org/big-o/</guid><description>Let&amp;rsquo;s see how programmers evaluate fast and slow algorithms. Since the topic is pretty boring, we&amp;rsquo;ll use silly cat examples.
Constant time: O(1) This is your best option. The algorithm speed does not depend on the number of cats.
🐾 Example
You are the lucky owner of N cats. Every kitten knows their name. If you call "Felix!", only one will come running, and the rest of the N-1 fluffs don't care.</description></item><item><title>User-Defined Functions in SQLite</title><link>https://antonz.org/sqlean-define/</link><pubDate>Thu, 08 Sep 2022 15:30:00 +0000</pubDate><guid>https://antonz.org/sqlean-define/</guid><description>Most database engines provide a lot of built-in functions. Still, sometimes they are not enough, and people turn to writing their own — user-defined — functions in plain SQL or some SQL-based language (like pl/sql in Oracle or pl/pgsql in Postgres).
SQLite does not support user-defined functions by default. But you can easily enable them using the define extension.
Note. Unlike other DBMS, adding extensions in SQLite is a breeze. Download a file, run one database command — and you are good to go.</description></item><item><title>JSON Lines</title><link>https://antonz.org/json-lines/</link><pubDate>Thu, 04 Aug 2022 18:30:00 +0000</pubDate><guid>https://antonz.org/json-lines/</guid><description>Worked with the JSON Lines format the other day. It&amp;rsquo;s a CSV on steroids:
each entry is a separate line, as in CSV; at the same time it is a full-fledged JSON. For example:
{ &amp;#34;id&amp;#34;:11, &amp;#34;name&amp;#34;:&amp;#34;Diane&amp;#34;, &amp;#34;city&amp;#34;:&amp;#34;London&amp;#34;, &amp;#34;department&amp;#34;:&amp;#34;hr&amp;#34;, &amp;#34;salary&amp;#34;:70 } { &amp;#34;id&amp;#34;:12, &amp;#34;name&amp;#34;:&amp;#34;Bob&amp;#34;, &amp;#34;city&amp;#34;:&amp;#34;London&amp;#34;, &amp;#34;department&amp;#34;:&amp;#34;hr&amp;#34;, &amp;#34;salary&amp;#34;:78 } { &amp;#34;id&amp;#34;:21, &amp;#34;name&amp;#34;:&amp;#34;Emma&amp;#34;, &amp;#34;city&amp;#34;:&amp;#34;London&amp;#34;, &amp;#34;department&amp;#34;:&amp;#34;it&amp;#34;, &amp;#34;salary&amp;#34;:84 } { &amp;#34;id&amp;#34;:22, &amp;#34;name&amp;#34;:&amp;#34;Grace&amp;#34;, &amp;#34;city&amp;#34;:&amp;#34;Berlin&amp;#34;, &amp;#34;department&amp;#34;:&amp;#34;it&amp;#34;, &amp;#34;salary&amp;#34;:90} { &amp;#34;id&amp;#34;:23, &amp;#34;name&amp;#34;:&amp;#34;Henry&amp;#34;, &amp;#34;city&amp;#34;:&amp;#34;London&amp;#34;, &amp;#34;department&amp;#34;:&amp;#34;it&amp;#34;, &amp;#34;salary&amp;#34;:104} Great stuff:</description></item></channel></rss>