<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>All posts on Anton Zhiyanov</title><link>https://antonz.org/posts/</link><description>Recent content in All posts on Anton Zhiyanov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://antonz.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AI SQLite Assistant</title><link>https://antonz.org/sqlime-ai/</link><pubDate>Thu, 16 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/sqlime-ai/</guid><description>While trying to trick AI into saying ethically questionable things may be fun for some of us, I prefer more practical and useful scenarios.
So, as of today, Sqlime — an online SQLite playground — includes the &amp;ldquo;Ask AI&amp;rdquo; feature.
AI can explain, teach, and troubleshoot your SQL without leaving the playground:
Write a question as a comment above the query. Click &amp;ldquo;Ask AI&amp;rdquo;. Receive a not-so-fast, but often useful answer from AI.</description></item><item><title>ChatGPT Bot in Python</title><link>https://antonz.org/pokitoki/</link><pubDate>Sat, 11 Mar 2023 12:30:00 +0000</pubDate><guid>https://antonz.org/pokitoki/</guid><description>In the last few months, people have been releasing a record number of AI-powered software. Of course I could not stay out of it.
And so the pokitoki project was born. It&amp;rsquo;s a a Telegram chat bot built using the ChatGPT (aka GPT-3.5) language model from OpenAI.
Notable features:
Both one-on-one and group chats. Direct questions or mentions. Ask again by retrying or editing the last message. Follow-up questions. Personal chats The bot acts as your personal assistant:</description></item><item><title>Interactive SQL Examples in JavaScript</title><link>https://antonz.org/interactive-sql-examples/</link><pubDate>Sun, 05 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/interactive-sql-examples/</guid><description>Reading about SQL is fun, but trying out live examples is even better! So I created JavaScript widgets that turn static SQL code in your articles into interactive examples.
Here is a working example. Give it a try:
select * from employees limit 5; And here are the four steps to creating executable SQL examples in your own articles or documentation:
1. Include the widgets You&amp;rsquo;ll need three JavaScript files:</description></item><item><title>Reading and Writing Files in SQLite</title><link>https://antonz.org/sqlean-fileio/</link><pubDate>Sun, 26 Feb 2023 15:00:00 +0000</pubDate><guid>https://antonz.org/sqlean-fileio/</guid><description>Sometimes it&amp;rsquo;s useful to load a dataset from an external file or export query results to a file.
SQLite does not support file I/O operations by default. However, you can easily enable them using the sqlean-fileio extension.
Note. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.
sqlean-fileio solves common import/export tasks such as:</description></item><item><title>Comparing by Offset with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-offset/</link><pubDate>Thu, 16 Feb 2023 14:00:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-offset/</guid><description>This is an excerpt from my book SQL Window Functions Explained. The book is a clear and visual introduction to the topic with lots of practical exercises.
Comparing by offset means looking at the difference between neighboring values. For example, comparing the countries that occupy the 5th and 6th places in the world GDP rating — how different are they? What about 1st and 6th place?
Sometimes we compare with boundaries instead of neighbors.</description></item><item><title>Building a Pivot Table in SQLite</title><link>https://antonz.org/sqlite-pivot-table/</link><pubDate>Thu, 09 Feb 2023 14:00:00 +0000</pubDate><guid>https://antonz.org/sqlite-pivot-table/</guid><description>Suppose we have a sales table with product incomes for the years 2020-2023:
┌─────────┬──────┬────────┐ │ product │ year │ income │ ├─────────┼──────┼────────┤ │ alpha │ 2020 │ 100 │ │ alpha │ 2021 │ 120 │ │ alpha │ 2022 │ 130 │ │ alpha │ 2023 │ 140 │ │ beta │ 2020 │ 10 │ │ beta │ 2021 │ 20 │ │ beta │ 2022 │ 40 │ │ beta │ 2023 │ 80 │ │ gamma │ 2020 │ 80 │ │ gamma │ 2021 │ 75 │ │ gamma │ 2022 │ 78 │ │ gamma │ 2023 │ 80 │ └─────────┴──────┴────────┘ playground • download</description></item><item><title>Ranking Data with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-ranking/</link><pubDate>Wed, 08 Feb 2023 13:30:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-ranking/</guid><description>This is an excerpt from my book SQL Window Functions Explained. The book is a clear and visual introduction to the topic with lots of practical exercises.
Ranking means coming up with all kinds of ratings, starting from the winners of the World Swimming Championships and ending with the Forbes 500.
We will rank records from the toy employees table:
┌────┬───────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼───────┼────────┼────────────┼────────┤ │ 11 │ Diane │ London │ hr │ 70 │ │ 12 │ Bob │ London │ hr │ 78 │ │ 21 │ Emma │ London │ it │ 84 │ │ 22 │ Grace │ Berlin │ it │ 90 │ │ 23 │ Henry │ London │ it │ 104 │ │ 24 │ Irene │ Berlin │ it │ 104 │ │ 25 │ Frank │ Berlin │ it │ 120 │ │ 31 │ Cindy │ Berlin │ sales │ 96 │ │ 32 │ Dave │ London │ sales │ 96 │ │ 33 │ Alice │ Berlin │ sales │ 100 │ └────┴───────┴────────┴────────────┴────────┘ playground • download</description></item><item><title>Cherry-Picked Features from Go 1.20</title><link>https://antonz.org/go-1-20/</link><pubDate>Tue, 07 Feb 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/go-1-20/</guid><description>Go 1.20 brought a lot of new features and improvements. In this post, I&amp;rsquo;d like to review the ones that caught my eye. This is by no means an exhaustive list; for that, see the official release notes.
These are the topics for review:
Multi-errors &amp;lsquo;Context Canceled&amp;rsquo; Cause New Date Formats Slice to Array Conversion Other Notable Changes Each section has a playground link, so check those out.</description></item><item><title>Regular Expressions in SQLite</title><link>https://antonz.org/sqlean-regexp/</link><pubDate>Sat, 04 Feb 2023 11:20:00 +0000</pubDate><guid>https://antonz.org/sqlean-regexp/</guid><description>Regular expressions are probably the most powerful text processing tool without programming.
SQLite does not support regular expressions by default. However, you can easily enable them using the sqlean-regexp extension.
Note. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.
With sqlean-regexp, matching a string against a pattern becomes as easy as:
-- count messages containing digits select count(*) from messages where msg_text regexp &amp;#39;\d+&amp;#39;; -- 42 Pattern matching and text replacement There are three main tasks people usually solve using regular expressions:</description></item><item><title>Why Use SQL Window Functions</title><link>https://antonz.org/why-use-sql-window-functions/</link><pubDate>Tue, 31 Jan 2023 08:30:00 +0000</pubDate><guid>https://antonz.org/why-use-sql-window-functions/</guid><description>This is an excerpt from my book SQL Window Functions Explained. The book is a clear and visual introduction to the topic with lots of practical exercises.
​In short, window functions assist in building great analytical reports without Excel.
The easiest way to explain it is through concrete examples. We will work with a toy employee table:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Diane │ London │ hr │ 70 │ │ 12 │ Bob │ London │ hr │ 78 │ │ 21 │ Emma │ London │ it │ 84 │ │ 22 │ Grace │ Berlin │ it │ 90 │ │ 23 │ Henry │ London │ it │ 104 │ │ 24 │ Irene │ Berlin │ it │ 104 │ │ 25 │ Frank │ Berlin │ it │ 120 │ │ 31 │ Cindy │ Berlin │ sales │ 96 │ │ 32 │ Dave │ London │ sales │ 96 │ │ 33 │ Alice │ Berlin │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘ Let&amp;rsquo;s look at some tasks that are convenient to solve with the help of SQL window functions.</description></item></channel></rss>