<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>All posts on Anton Zhiyanov</title><link>https://antonz.org/posts/</link><description>Recent content in All posts on Anton Zhiyanov</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 May 2022 17:00:00 +0000</lastBuildDate><atom:link href="https://antonz.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Flying Pig, or Protocols in Python</title><link>https://antonz.org/protocol/</link><pubDate>Tue, 31 May 2022 17:00:00 +0000</pubDate><guid>https://antonz.org/protocol/</guid><description>Let&amp;rsquo;s say you&amp;rsquo;ve developed a utility that sends everything flying:
def launch(thing): thing.fly() Well, not exactly everything. Things with the fly() method, to be precise. With a single handy function we launch Frank (he&amp;rsquo;s a pigeon), an airplane, and even Superman:
class Frank: def fly(self): print(&amp;#34;💩&amp;#34;) class Plane: def fly(self): print(&amp;#34;Flight delayed&amp;#34;) class Superman: def fly(self): print(&amp;#34;ε===(っ≧ω≦)っ&amp;#34;) Whoosh:
f = Frank() launch(f) # 💩 p = Plane() launch(p) # Flight delayed s = Superman() launch(s) # ε===(っ≧ω≦)っ It&amp;rsquo;s not that our heroes are particularly successful at coping with the task, but the launch works for them.</description></item><item><title>Random numbers and sequences in Python</title><link>https://antonz.org/random/</link><pubDate>Mon, 23 May 2022 15:30:00 +0000</pubDate><guid>https://antonz.org/random/</guid><description>Everybody knows about random.randint(a, b) in Python, which returns a ≤ n ≤ b:
random.randint(10, 99) # 59 But the random module has so much more to offer.
Like selecting a number from a range with a step:
random.randrange(10, 99, 3) # 91 Or a random sequence element:
numbers = [7, 9, 13, 42, 64, 99] random.choice(numbers) # 42 Or multiple elements:
numbers = range(99, 10, -1) random.choices(numbers, k=3) # [32, 62, 76] How about choosing some elements more often than others?</description></item><item><title>Common Table Expressions in SQL</title><link>https://antonz.org/cte/</link><pubDate>Fri, 20 May 2022 16:50:00 +0000</pubDate><guid>https://antonz.org/cte/</guid><description>Rule #1 for writing well-readable SQL queries is to use common table expressions (CTE). People are afraid of them, but they really shouldn&amp;rsquo;t. Let&amp;rsquo;s learn CTEs in three minutes, so you don&amp;rsquo;t have to read a weighty SQL book or take an online course.
Problem Let&amp;rsquo;s say we have a table with monthly sales for two years:
┌──────┬───────┬───────┬──────────┬─────────┐ │ year │ month │ price │ quantity │ revenue │ ├──────┼───────┼───────┼──────────┼─────────┤ │ 2019 │ 1 │ 60 │ 200 │ 12000 │ │ 2019 │ 2 │ 60 │ 660 │ 39600 │ │ 2019 │ 3 │ 60 │ 400 │ 24000 │ │ 2019 │ 4 │ 60 │ 300 │ 18000 │ │ 2019 │ 5 │ 60 │ 440 │ 26400 │ │ 2019 │ 6 │ 60 │ 540 │ 32400 │ │ 2019 │ 7 │ 60 │ 440 │ 26400 │ │ 2019 │ 8 │ 60 │ 440 │ 26400 │ │ 2019 │ 9 │ 60 │ 250 │ 15000 │ │ 2019 │ 10 │ 60 │ 420 │ 25200 │ │ .</description></item><item><title>Temporary tables in SQLite</title><link>https://antonz.org/temp-tables/</link><pubDate>Wed, 18 May 2022 20:30:00 +0000</pubDate><guid>https://antonz.org/temp-tables/</guid><description>Sometimes you want to combine data from multiple tables into one and query the results. For example, join vacancies together with employers and regions:
select v.*, e.name, a.name from vacancy as v join employer as e on e.id = v.employer_id join area as a on a.id = v.area_id The question is how to reference the combined dataset in further queries. There are three ways of doing that:
Common Table Expressions (CTEs) Views Temporary tables A Common Table Expression is basically a named subquery:</description></item><item><title>JSON and virtual columns in SQLite</title><link>https://antonz.org/json-virtual-columns/</link><pubDate>Sun, 15 May 2022 11:25:00 +0000</pubDate><guid>https://antonz.org/json-virtual-columns/</guid><description>Generated columns have another great use case.
Let&amp;rsquo;s say you decide to keep a log of events that occur in the system. There are different types of events, each with its own set of fields. For example, sign-in:
{ &amp;#34;timestamp&amp;#34;: &amp;#34;2022-05-15T09:31:00Z&amp;#34;, &amp;#34;object&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;object_id&amp;#34;: 11, &amp;#34;action&amp;#34;: &amp;#34;login&amp;#34;, &amp;#34;details&amp;#34;: { &amp;#34;ip&amp;#34;: &amp;#34;192.168.0.1&amp;#34; } } Or account deposit:
{ &amp;#34;timestamp&amp;#34;: &amp;#34;2022-05-15T09:32:00Z&amp;#34;, &amp;#34;object&amp;#34;: &amp;#34;account&amp;#34;, &amp;#34;object_id&amp;#34;: 12, &amp;#34;action&amp;#34;: &amp;#34;deposit&amp;#34;, &amp;#34;details&amp;#34;: { &amp;#34;amount&amp;#34;: &amp;#34;1000&amp;#34;, &amp;#34;currency&amp;#34;: &amp;#34;USD&amp;#34; } } You decide to store the raw JSON, as normalization is non-trivial.</description></item><item><title>Compact objects in Python</title><link>https://antonz.org/compact-objects/</link><pubDate>Fri, 13 May 2022 20:25:00 +0000</pubDate><guid>https://antonz.org/compact-objects/</guid><description>Python is an object language. This is nice and cozy until you are out of memory holding 10 million objects at once. Let&amp;rsquo;s talk about how to reduce appetite.
Visit the Playground to try out the code samples
Tuples Imagine you have a simple Pet object with the name (string) and price (integer) attributes. Intuitively, it seems that the most compact representation is a tuple:
(&amp;#34;Frank the Pigeon&amp;#34;, 50000) Let&amp;rsquo;s measure how much memory this beauty eats:</description></item><item><title>Python Standard Library changes in recent years</title><link>https://antonz.org/python-stdlib-changes/</link><pubDate>Wed, 11 May 2022 12:40:00 +0000</pubDate><guid>https://antonz.org/python-stdlib-changes/</guid><description>With each major Python release, all the attention goes to the new language features: the walrus operator, dictionary merging, pattern matching. There is also a lot of writing about asyncio and typing modules — they are developing rapidly and are obviously important for the core team.
The rest of the standard library modules receive undeservedly little attention. I want to fix this and tell you about the novelties introduced in versions 3.</description></item><item><title>Storing state in the URL</title><link>https://antonz.org/storing-state/</link><pubDate>Sun, 08 May 2022 11:30:00 +0000</pubDate><guid>https://antonz.org/storing-state/</guid><description>If you are developing a web application, sooner or later you will face the problem of saving the local system state for the user.
Imagine you sell elite potatoes over the Internet. The buyer visits the website and enters the search criteria:
strictly from Bolivia or South Africa, harvest of 2022, tuber size from 3 to 7 cm, preferably in the form of a sea seal. The buyer then receives a list of 300 items (seal-shaped potatoes are quite popular in South Africa), split into 6 pages of 50 items each.</description></item><item><title>Generated columns in SQLite</title><link>https://antonz.org/generated-columns/</link><pubDate>Sat, 07 May 2022 17:10:00 +0000</pubDate><guid>https://antonz.org/generated-columns/</guid><description>Sometimes an SQL query field is calculated based on other table columns. Imagine a table with income and tax_rate columns:
┌────────┬──────────┐ │ income │ tax_rate │ ├────────┼──────────┤ │ 70 │ 0.22 │ │ 84 │ 0.22 │ │ 90 │ 0.24 │ └────────┴──────────┘ You can calculate the annual tax:
select id, income * tax_rate as tax from people; In order not to repeat these calculations everywhere, it is convenient to create a virtual generated column:</description></item><item><title>Page iterator in Python</title><link>https://antonz.org/page-iterator/</link><pubDate>Mon, 02 May 2022 13:00:00 +0000</pubDate><guid>https://antonz.org/page-iterator/</guid><description>Suppose you are counting stats for a huge dataset of toys sold across the country over the past year:
reader = fetch_toys() for item in reader: process_single(item) process_single() takes 10 ms, so 400 million toys will be processed in 46 days 😱
After a number of intense conversations, you manage to convince the developers that it&amp;rsquo;s not very fast. process_batch() function enters the scene. It processes 10,000 toys in 1 second.</description></item></channel></rss>