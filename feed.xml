<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anton Zhiyanov</title><description>Everything about SQLite, Python, open data and awesome software.</description><link>https://antonz.org/</link><image><url>https://antonz.org/assets/favicon/favicon.png</url><title>Anton Zhiyanov</title><link>https://antonz.org/</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Sep 2022 08:50:00 +0000</lastBuildDate><atom:link href="https://antonz.org/index.xml" rel="self" type="application/rss+xml"/><item><title>SQLite Weekly</title><link>https://antonz.org/sqlite-weekly/</link><pubDate>Wed, 14 Sep 2022 08:50:00 +0000</pubDate><guid>https://antonz.org/sqlite-weekly/</guid><description>Weekly SQLite news, articles and extensions.</description><content:encoded><![CDATA[<p>SQLite is getting a lot of attention lately. That&rsquo;s great!</p>
<p>So I decided what we are missing is a weekly newsletter. And immediately started one. Every week I will publish important news, notable articles, handy extensions, tricky questions, useful code samples and other awesome SQLite-related stuff.</p>
<p>The first issue is already out.</p>
<p>I really don&rsquo;t like newsletter services, but I do love open source. That&rsquo;s why SQLite Weekly is hosted on GitHub. I see this as a win-win for everyone:</p>
<ul>
<li>Easy for me to write.</li>
<li>Comfortable for others to read.</li>
<li>Enables collaboration.</li>
<li>No privacy issues.</li>
<li>Email notifications and a built-in RSS feed.</li>
</ul>
<p>Watch the repo to get an email when the next issue is published. Maybe star it too if you like the idea:</p>
<p>★ <a href="https://github.com/nalgeon/sqlite-weekly"><strong>SQLite Weekly</strong></a></p>
]]></content:encoded></item><item><title>User-defined functions in SQLite</title><link>https://antonz.org/sqlean-define/</link><pubDate>Thu, 08 Sep 2022 15:30:00 +0000</pubDate><guid>https://antonz.org/sqlean-define/</guid><description>Write functions in plain SQL.</description><content:encoded><![CDATA[<p><em>Write functions in plain SQL using the &lsquo;define&rsquo; extension.</em></p>
<p>SQLite does not directly support user-defined functions. Sure, one can write a function in C or Python and register it within SQLite. But not in SQL itself.</p>
<p>Luckily for us, SQLite provides an extension mechanism. One of such extensions — <code>define</code> — allows writing functions in regular SQL.</p>
<p>With <code>define</code> writing a custom function becomes as easy as:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">define</span>(<span style="color:#c41a16">&#39;sumn&#39;</span>, <span style="color:#c41a16">&#39;:n * (:n + 1) / 2&#39;</span>);
</code></pre></div><p>And then using it as any built-in function:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">sumn</span>(<span style="color:#1c01ce">5</span>);
<span style="color:#177500">-- 15
</span></code></pre></div><p>User-defined functions can take multiple parameters and call other functions.</p>
<p>Generate a random <code>N</code> such that <code>a ≤ N ≤ b</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">define</span>(<span style="color:#c41a16">&#39;randint&#39;</span>, <span style="color:#c41a16">&#39;:a + abs(random()) % (:b - :a + 1)&#39;</span>);
<span style="color:#a90d91">select</span> <span style="color:#000">randint</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">99</span>);
<span style="color:#177500">-- 42
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">randint</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">99</span>);
<span style="color:#177500">-- 17
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">randint</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">99</span>);
<span style="color:#177500">-- 29
</span></code></pre></div><p>List user-defined functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">sqlean_define</span>;
</code></pre></div><p>Delete a function:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">undefine</span>(<span style="color:#c41a16">&#39;sumn&#39;</span>);
</code></pre></div><p>There is even a way to return multiple values from a function!</p>
<p>→ <a href="https://github.com/nalgeon/sqlean/blob/main/docs/define.md"><strong>See the docs for details</strong></a></p>
]]></content:encoded></item><item><title>JSON Lines</title><link>https://antonz.org/json-lines/</link><pubDate>Thu, 04 Aug 2022 18:30:00 +0000</pubDate><guid>https://antonz.org/json-lines/</guid><description>CSV on steroids.</description><content:encoded><![CDATA[<p>Worked with the <a href="https://jsonlines.org/">JSON Lines</a> format the other day. It&rsquo;s a CSV on steroids:</p>
<ul>
<li>each entry is a separate line, as in CSV;</li>
<li>at the same time it is a full-fledged JSON.</li>
</ul>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{ <span style="color:#000">&#34;id&#34;</span>:<span style="color:#1c01ce">11</span>, <span style="color:#000">&#34;name&#34;</span>:<span style="color:#c41a16">&#34;Diane&#34;</span>, <span style="color:#000">&#34;city&#34;</span>:<span style="color:#c41a16">&#34;London&#34;</span>, <span style="color:#000">&#34;department&#34;</span>:<span style="color:#c41a16">&#34;hr&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>:<span style="color:#1c01ce">70</span> }
{ <span style="color:#000">&#34;id&#34;</span>:<span style="color:#1c01ce">12</span>, <span style="color:#000">&#34;name&#34;</span>:<span style="color:#c41a16">&#34;Bob&#34;</span>, <span style="color:#000">&#34;city&#34;</span>:<span style="color:#c41a16">&#34;London&#34;</span>, <span style="color:#000">&#34;department&#34;</span>:<span style="color:#c41a16">&#34;hr&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>:<span style="color:#1c01ce">78</span> }
{ <span style="color:#000">&#34;id&#34;</span>:<span style="color:#1c01ce">21</span>, <span style="color:#000">&#34;name&#34;</span>:<span style="color:#c41a16">&#34;Emma&#34;</span>, <span style="color:#000">&#34;city&#34;</span>:<span style="color:#c41a16">&#34;London&#34;</span>, <span style="color:#000">&#34;department&#34;</span>:<span style="color:#c41a16">&#34;it&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>:<span style="color:#1c01ce">84</span> }
{ <span style="color:#000">&#34;id&#34;</span>:<span style="color:#1c01ce">22</span>, <span style="color:#000">&#34;name&#34;</span>:<span style="color:#c41a16">&#34;Grace&#34;</span>, <span style="color:#000">&#34;city&#34;</span>:<span style="color:#c41a16">&#34;Berlin&#34;</span>, <span style="color:#000">&#34;department&#34;</span>:<span style="color:#c41a16">&#34;it&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>:<span style="color:#1c01ce">90</span>}
{ <span style="color:#000">&#34;id&#34;</span>:<span style="color:#1c01ce">23</span>, <span style="color:#000">&#34;name&#34;</span>:<span style="color:#c41a16">&#34;Henry&#34;</span>, <span style="color:#000">&#34;city&#34;</span>:<span style="color:#c41a16">&#34;London&#34;</span>, <span style="color:#000">&#34;department&#34;</span>:<span style="color:#c41a16">&#34;it&#34;</span>, <span style="color:#000">&#34;salary&#34;</span>:<span style="color:#1c01ce">104</span>}
</code></pre></div><p>Great stuff:</p>
<ul>
<li>Suitable for objects of complex structure (unlike csv);</li>
<li>Easy to stream read without loading the entire file into memory (unlike json);</li>
<li>Easy to append new entries to an existing file (unlike json).</li>
</ul>
<p>JSON can also be streamed. But look how much easier it is with JSON Lines:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">json</span>
<span style="color:#a90d91">from</span> <span style="color:#000">typing</span> <span style="color:#a90d91">import</span> <span style="color:#000">Iterator</span>


<span style="color:#a90d91">def</span> <span style="color:#000">jl_reader</span>(<span style="color:#000">fname</span>: <span style="color:#a90d91">str</span>) <span style="color:#000">-&gt;</span> <span style="color:#000">Iterator</span>[<span style="color:#a90d91">dict</span>]:
    <span style="color:#a90d91">with</span> <span style="color:#a90d91">open</span>(<span style="color:#000">fname</span>) <span style="color:#a90d91">as</span> <span style="color:#000">file</span>:
        <span style="color:#a90d91">for</span> <span style="color:#000">line</span> <span style="color:#000">in</span> <span style="color:#000">file</span>:
            <span style="color:#000">obj</span> <span style="color:#000">=</span> <span style="color:#000">json</span><span style="color:#000">.</span><span style="color:#000">loads</span>(<span style="color:#000">line</span><span style="color:#000">.</span><span style="color:#000">strip</span>())
            <span style="color:#a90d91">yield</span> <span style="color:#000">obj</span>


<span style="color:#a90d91">if</span> <span style="color:#000">__name__</span> <span style="color:#000">==</span> <span style="color:#c41a16">&#34;__main__&#34;</span>:
    <span style="color:#000">reader</span> <span style="color:#000">=</span> <span style="color:#000">jl_reader</span>(<span style="color:#c41a16">&#34;employees.jl&#34;</span>)
    <span style="color:#a90d91">for</span> <span style="color:#000">employee</span> <span style="color:#000">in</span> <span style="color:#000">reader</span>:
        <span style="color:#a90d91">id</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>[<span style="color:#c41a16">&#34;id&#34;</span>]
        <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>[<span style="color:#c41a16">&#34;name&#34;</span>]
        <span style="color:#000">dept</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>[<span style="color:#c41a16">&#34;department&#34;</span>]
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;#</span><span style="color:#c41a16">{</span><span style="color:#a90d91">id</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> - </span><span style="color:#c41a16">{</span><span style="color:#000">name</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> (</span><span style="color:#c41a16">{</span><span style="color:#000">dept</span><span style="color:#c41a16">}</span><span style="color:#c41a16">)&#34;</span>)
</code></pre></div><pre tabindex="0"><code>#11 - Diane (hr)
#12 - Bob (hr)
#21 - Emma (it)
#22 - Grace (it)
#23 - Henry (it)
</code></pre><p><a href="https://replit.com/@antonz/json-lines#main.py">playground</a></p>
<p>Great fit for logs and data processing pipelines.</p>
]]></content:encoded></item><item><title>Expressive Ellipsis in Python</title><link>https://antonz.org/ellipsis/</link><pubDate>Fri, 03 Jun 2022 10:50:00 +0000</pubDate><guid>https://antonz.org/ellipsis/</guid><description>What is Ellipsis and how it is used.</description><content:encoded><![CDATA[<p>One of the lesser-known things in Python is the ellipsis:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">Flyer</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#000">...</span>
</code></pre></div><p>This code works. The <code>...</code> (aka <code>Ellipsis</code>) is a real object that can be used in code.</p>
<p><code>Ellipsis</code> is the only instance of the <code>EllipsisType</code> type (similar to how <code>None</code> is the only instance of the <code>NoneType</code> type):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">...</span> <span style="color:#000">is</span> <span style="color:#5b269a">Ellipsis</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">True</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#5b269a">Ellipsis</span> <span style="color:#000">is</span> <span style="color:#000">...</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">True</span>
</code></pre></div><p>Python core devs mostly use <code>...</code> to show that a type, method, or function has no implementation — as in the <code>fly()</code> example.</p>
<p>And in <a href="https://docs.python.org/3/library/typing.html">type hints</a>:</p>
<blockquote>
<p>It is possible to declare the return type of a callable without specifying the call signature by substituting a literal ellipsis for the list of arguments in the type hint: <code>Callable[..., ReturnType]</code></p>
</blockquote>
<blockquote>
<p>To specify a variable-length tuple of homogeneous type, use literal ellipsis, e.g. <code>Tuple[int, ...]</code>. A plain <code>Tuple</code> is equivalent to <code>Tuple[Any, ...]</code>, and in turn to tuple.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># numbers  is a tuple of integer numbers</span>
<span style="color:#177500"># summator is a function that accepts arbitrary parameters</span>
<span style="color:#177500">#          and returns an integer</span>
<span style="color:#a90d91">def</span> <span style="color:#000">print_sum</span>(<span style="color:#000">numbers</span>: <span style="color:#a90d91">tuple</span>[<span style="color:#a90d91">int</span>, <span style="color:#000">...</span>], <span style="color:#000">summator</span>: <span style="color:#000">Callable</span>[<span style="color:#000">...</span>, <span style="color:#a90d91">int</span>]):
    <span style="color:#000">total</span> <span style="color:#000">=</span> <span style="color:#000">summator</span>(<span style="color:#000">numbers</span>)
    <span style="color:#a90d91">print</span>(<span style="color:#000">total</span>)

<span style="color:#000">print_sum</span>((<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>), <span style="color:#a90d91">sum</span>)
<span style="color:#177500"># 6</span>
</code></pre></div><p>Other developers use Ellipsis for all sorts of bizarre things ツ</p>
]]></content:encoded></item><item><title>Flying Pig, or Protocols in Python</title><link>https://antonz.org/protocol/</link><pubDate>Tue, 31 May 2022 17:00:00 +0000</pubDate><guid>https://antonz.org/protocol/</guid><description>Structural subtyping using protocols.</description><content:encoded><![CDATA[<p>Let&rsquo;s say you&rsquo;ve developed a utility that sends everything flying:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">launch</span>(<span style="color:#000">thing</span>):
    <span style="color:#000">thing</span><span style="color:#000">.</span><span style="color:#000">fly</span>()
</code></pre></div><p>Well, not exactly <em>everything</em>. Things with the <code>fly()</code> method, to be precise. With a single handy function we launch Frank (he&rsquo;s a pigeon), an airplane, and even Superman:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">Frank</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">&#34;💩&#34;</span>)

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Plane</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">&#34;Flight delayed&#34;</span>)

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Superman</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">&#34;ε===(っ≧ω≦)っ&#34;</span>)
</code></pre></div><p>Whoosh:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">f</span> <span style="color:#000">=</span> <span style="color:#000">Frank</span>()
<span style="color:#000">launch</span>(<span style="color:#000">f</span>)
<span style="color:#177500"># 💩</span>

<span style="color:#000">p</span> <span style="color:#000">=</span> <span style="color:#000">Plane</span>()
<span style="color:#000">launch</span>(<span style="color:#000">p</span>)
<span style="color:#177500"># Flight delayed</span>

<span style="color:#000">s</span> <span style="color:#000">=</span> <span style="color:#000">Superman</span>()
<span style="color:#000">launch</span>(<span style="color:#000">s</span>)
<span style="color:#177500"># ε===(っ≧ω≦)っ</span>
</code></pre></div><p>It&rsquo;s not that our heroes are particularly successful at coping with the task, but the launch works for them.</p>
<p>So far, so good. But sometimes (especially when the program grows) the developer wants to add a little rigor. Make it clear that the <code>thing</code> parameter in <code>launch()</code> is not any object, but necessarily a flying thing with the <code>fly()</code> method. What is the best way to do this?</p>
<h2 id="using-a-description">Using a description</h2>
<p>If you prefer to avoid types, then you will go with a variable name or a docstring:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">launch</span>(<span style="color:#000">flyer</span>):
    <span style="color:#c41a16">&#34;&#34;&#34;Launces a flyer (an object with a `fly()` method)&#34;&#34;&#34;</span>
    <span style="color:#000">flyer</span><span style="color:#000">.</span><span style="color:#000">fly</span>()
</code></pre></div><p>The problem is that the more complex the code, the more often the &ldquo;descriptive&rdquo; approach fails.</p>
<h2 id="using-a-base-class">Using a base class</h2>
<p>Thanks to some 1990s java programming skills, you end up with a small hierarchy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">Flyer</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>():
        <span style="color:#000">...</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Frank</span>(<span style="color:#000">Flyer</span>):
    <span style="color:#177500"># ...</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Plane</span>(<span style="color:#000">Flyer</span>):
    <span style="color:#177500"># ...</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Superman</span>(<span style="color:#000">Flyer</span>):
    <span style="color:#177500"># ...</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">launch</span>(<span style="color:#000">thing</span>: <span style="color:#000">Flyer</span>):
    <span style="color:#000">thing</span><span style="color:#000">.</span><span style="color:#000">fly</span>()
</code></pre></div><p>This method works:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mypy flyer.py
Success: no issues found in <span style="color:#1c01ce">1</span> <span style="color:#a90d91">source</span> file
</code></pre></div><p>But, as the Python devs say, it is terribly &ldquo;unpythonic&rdquo;:</p>
<blockquote>
<p>The problem is that a class has to be explicitly marked, which is unpythonic and unlike what one would normally do in idiomatic dynamically typed Python code.</p>
</blockquote>
<p>Indeed. Not only have we modified three classes instead of one function. Not only have we introduced an inheritance hierarchy to our code. But also Frank, the plane and Superman are now burdened by the shared knowledge that they are Flyers. They never asked for this, you know.</p>
<h2 id="using-a-protocol">Using a protocol</h2>
<p>The quote above is from <a href="https://peps.python.org/pep-0544/">PEP 544</a> (Python Enhancement Proposal), which was implemented in Python 3.8. Starting with this version, Python recieved <em>protocols</em>.</p>
<p>Protocols describe behavior. Here is our Flyer:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">typing</span> <span style="color:#a90d91">import</span> <span style="color:#000">Protocol</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Flyer</span>(<span style="color:#000">Protocol</span>):
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#000">...</span>
</code></pre></div><p>We use a protocol to specify that an object should have a specific behavior. The <code>launch()</code> function can only launch Flyers:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">launch</span>(<span style="color:#000">thing</span>: <span style="color:#000">Flyer</span>):
    <span style="color:#000">thing</span><span style="color:#000">.</span><span style="color:#000">fly</span>()
</code></pre></div><p>The objects themselves do not need to know about the protocol. It is enough that they implement the right behavior:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">Frank</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#177500"># ...</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Plane</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#177500"># ...</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Superman</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">fly</span>(<span style="color:#5b269a">self</span>):
        <span style="color:#177500"># ...</span>
</code></pre></div><p>Protocols are static duck typing:</p>
<ul>
<li>the interface is explicitly described in the protocol: a flyer has the <code>fly()</code> method;</li>
<li>but it is implemented implicitly, according to the &ldquo;duck&rdquo; principle: Superman has the <code>fly()</code> method — so he&rsquo;s a flyer.</li>
</ul>
<p>Let&rsquo;s check:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mypy flyer.py
Success: no issues found in <span style="color:#1c01ce">1</span> <span style="color:#a90d91">source</span> file
</code></pre></div><p>Perfect!</p>
<h2 id="summary">Summary</h2>
<p>If your code should work consistently with different types, find their common behavior and specify it in the protocol. Use the protocol type for static code validation using mypy.</p>
<p>Avoid pigeons, planes, and superheroes whenever possible. They are nothing but problems.</p>
]]></content:encoded></item><item><title>Random numbers and sequences in Python</title><link>https://antonz.org/random/</link><pubDate>Mon, 23 May 2022 15:30:00 +0000</pubDate><guid>https://antonz.org/random/</guid><description>There is much more than just randint()</description><content:encoded><![CDATA[<p>Everybody knows about <code>random.randint(a, b)</code> in Python, which returns a ≤ n ≤ b:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">99</span>)
<span style="color:#177500"># 59</span>
</code></pre></div><p>But the <code>random</code> module has so much more to offer.</p>
<p>Like selecting a number from a range <strong>with a step</strong>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randrange</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">99</span>, <span style="color:#1c01ce">3</span>)
<span style="color:#177500"># 91</span>
</code></pre></div><p>Or a random <strong>sequence element</strong>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">numbers</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">7</span>, <span style="color:#1c01ce">9</span>, <span style="color:#1c01ce">13</span>, <span style="color:#1c01ce">42</span>, <span style="color:#1c01ce">64</span>, <span style="color:#1c01ce">99</span>]
<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choice</span>(<span style="color:#000">numbers</span>)
<span style="color:#177500"># 42</span>
</code></pre></div><p>Or <strong>multiple</strong> elements:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">numbers</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">99</span>, <span style="color:#1c01ce">10</span>, <span style="color:#000">-</span><span style="color:#1c01ce">1</span>)
<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choices</span>(<span style="color:#000">numbers</span>, <span style="color:#000">k</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
<span style="color:#177500"># [32, 62, 76]</span>
</code></pre></div><p>How about choosing some elements <strong>more often</strong> than others? Sure:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">numbers</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">7</span>, <span style="color:#1c01ce">9</span>, <span style="color:#1c01ce">13</span>, <span style="color:#1c01ce">42</span>, <span style="color:#1c01ce">64</span>, <span style="color:#1c01ce">99</span>]
<span style="color:#000">weights</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">1</span>]

<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choices</span>(<span style="color:#000">numbers</span>, <span style="color:#000">weights</span>, <span style="color:#000">k</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
<span style="color:#177500"># [42, 13, 7]</span>

<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choices</span>(<span style="color:#000">numbers</span>, <span style="color:#000">weights</span>, <span style="color:#000">k</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
<span style="color:#177500"># [7, 7, 7]</span>

<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choices</span>(<span style="color:#000">numbers</span>, <span style="color:#000">weights</span>, <span style="color:#000">k</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
<span style="color:#177500"># [13, 7, 7]</span>
</code></pre></div><p>Wanna see a sample <strong>without repetitions</strong>? No problem:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">numbers</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">7</span>, <span style="color:#1c01ce">9</span>, <span style="color:#1c01ce">13</span>, <span style="color:#1c01ce">42</span>, <span style="color:#1c01ce">64</span>, <span style="color:#1c01ce">99</span>]
<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">sample</span>(<span style="color:#000">numbers</span>, <span style="color:#000">k</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
<span style="color:#177500"># [42, 99, 7]</span>
</code></pre></div><p>Or even <strong>shuffle</strong> the whole sequence:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">numbers</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>, <span style="color:#1c01ce">4</span>, <span style="color:#1c01ce">5</span>]
<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">shuffle</span>(<span style="color:#000">numbers</span>)
<span style="color:#177500"># [3, 2, 1, 5, 4]</span>
</code></pre></div><p>There are also countless <strong>real-valued</strong> distributions like <code>uniform()</code>, <code>gauss()</code>, <code>expovariate()</code>, <code>paretovariate()</code> and many more. Not gonna get into the specifics now — <a href="https://docs.python.org/3/library/random.html#real-valued-distributions">see for yourself</a> if your are a statistics fan.</p>
<p>Last but not least. When testing, <strong>seed</strong> the generator with a constant so that it gives reproducible results:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">seed</span>(<span style="color:#1c01ce">42</span>)
</code></pre></div><p>On the contrary, use <code>seed()</code> without arguments in production. Python will then use the sources of randomness provided by the operating system.</p>
]]></content:encoded></item><item><title>Common Table Expressions in SQL</title><link>https://antonz.org/cte/</link><pubDate>Fri, 20 May 2022 16:50:00 +0000</pubDate><guid>https://antonz.org/cte/</guid><description>Use them instead of subqueries.</description><content:encoded><![CDATA[<p>Rule #1 for writing well-readable SQL queries is to use <em>common table expressions</em> (CTE). People are afraid of them, but they really shouldn&rsquo;t. Let&rsquo;s learn CTEs in three minutes, so you don&rsquo;t have to read a weighty SQL book or take an online course.</p>
<h2 id="problem">Problem</h2>
<p>Let&rsquo;s say we have a table with monthly sales for two years:</p>
<pre tabindex="0"><code>┌──────┬───────┬───────┬──────────┬─────────┐
│ year │ month │ price │ quantity │ revenue │
├──────┼───────┼───────┼──────────┼─────────┤
│ 2019 │ 1     │ 60    │ 200      │ 12000   │
│ 2019 │ 2     │ 60    │ 660      │ 39600   │
│ 2019 │ 3     │ 60    │ 400      │ 24000   │
│ 2019 │ 4     │ 60    │ 300      │ 18000   │
│ 2019 │ 5     │ 60    │ 440      │ 26400   │
│ 2019 │ 6     │ 60    │ 540      │ 32400   │
│ 2019 │ 7     │ 60    │ 440      │ 26400   │
│ 2019 │ 8     │ 60    │ 440      │ 26400   │
│ 2019 │ 9     │ 60    │ 250      │ 15000   │
│ 2019 │ 10    │ 60    │ 420      │ 25200   │
│ ...  │ ...   │ ...   │ ...      │ ...     │
└──────┴───────┴───────┴──────────┴─────────┘
</code></pre><p><a href="https://sqlime.org/#gist:858c409b81ae3a676580cba6745d68ea">playground</a></p>
<p>We want to select only those months for which revenue exceeded the monthly average for the year.</p>
<p>To begin with, let&rsquo;s calculate the average monthly revenue by year:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>,
  <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬─────────┐
│ year │ avg_rev │
├──────┼─────────┤
│ 2019 │ 25125.0 │
│ 2020 │ 48625.0 │
└──────┴─────────┘
</code></pre><p>Now we can select only those records in which <code>revenue</code> is not less than <code>avg_rev</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>,
  <span style="color:#000">sales</span>.<span style="color:#a90d91">month</span>,
  <span style="color:#000">sales</span>.<span style="color:#000">revenue</span>,
  <span style="color:#000">round</span>(<span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#a90d91">join</span> (
    <span style="color:#a90d91">select</span>
      <span style="color:#a90d91">year</span>,
      <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
    <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
    <span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">totals</span>
  <span style="color:#a90d91">on</span> <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">totals</span>.<span style="color:#a90d91">year</span>
<span style="color:#a90d91">where</span> <span style="color:#000">sales</span>.<span style="color:#000">revenue</span> <span style="color:#000">&gt;=</span> <span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬─────────┬─────────┐
│ year │ month │ revenue │ avg_rev │
├──────┼───────┼─────────┼─────────┤
│ 2019 │ 2     │ 39600   │ 25125.0 │
│ 2019 │ 5     │ 26400   │ 25125.0 │
│ 2019 │ 6     │ 32400   │ 25125.0 │
│ 2019 │ 7     │ 26400   │ 25125.0 │
│ ...  │ ...   │ ...     │ ...     │
└──────┴───────┴─────────┴─────────┘
</code></pre><p>We solved the task using a subquery:</p>
<ul>
<li>the inner query calculates the average monthly revenue;</li>
<li>the outer query joins with it and filters the results.</li>
</ul>
<p>The query as a whole turned out to be a bit complicated. If you revisit it in a month, you&rsquo;ll probably spend some time &ldquo;unraveling&rdquo; things. The problem is that such nested queries have to be read from the inside out:</p>
<ul>
<li>find the innermost query and comprehend it;</li>
<li>join it with the next outer query;</li>
<li>join them with the next outer query;</li>
<li>and so on.</li>
</ul>
<p>It is OK when there are only two levels, as in our example. In practice, I often encounter three- and four-level subqueries. A pain to read and understand.</p>
<h2 id="solution">Solution</h2>
<p>Instead of a subquery, we can use a <em>common table expression</em> (CTE). Every subquery <code>X</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">a</span>, <span style="color:#000">b</span>, <span style="color:#a90d91">c</span>
<span style="color:#a90d91">from</span> (<span style="color:#000">X</span>)
<span style="color:#a90d91">where</span> <span style="color:#000">e</span> <span style="color:#000">=</span> <span style="color:#000">f</span>
</code></pre></div><p>Can be converted to CTE:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">cte</span> <span style="color:#a90d91">as</span> (<span style="color:#000">X</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">a</span>, <span style="color:#000">b</span>, <span style="color:#a90d91">c</span>
<span style="color:#a90d91">from</span> <span style="color:#000">cte</span>
<span style="color:#a90d91">where</span> <span style="color:#000">e</span> <span style="color:#000">=</span> <span style="color:#000">f</span>
</code></pre></div><p>In our example:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">totals</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#a90d91">year</span>,
    <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>
)

<span style="color:#a90d91">select</span>
  <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>,
  <span style="color:#000">sales</span>.<span style="color:#a90d91">month</span>,
  <span style="color:#000">sales</span>.<span style="color:#000">revenue</span>,
  <span style="color:#000">round</span>(<span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> <span style="color:#a90d91">on</span> <span style="color:#000">totals</span>.<span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>
<span style="color:#a90d91">where</span> <span style="color:#000">sales</span>.<span style="color:#000">revenue</span> <span style="color:#000">&gt;=</span> <span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>;
</code></pre></div><p>With a table expression, the query becomes flat — it&rsquo;s much easier to perceive it this way. Besides, we can reuse the table expression as if it were a regular table:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">totals</span> <span style="color:#a90d91">as</span> (...)
<span style="color:#a90d91">select</span> ... <span style="color:#a90d91">from</span> <span style="color:#000">sales_ru</span> <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> ...
<span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
<span style="color:#a90d91">select</span> ... <span style="color:#a90d91">from</span> <span style="color:#000">sales_us</span> <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> ...
</code></pre></div><p>SQL table expressions are somewhat similar to functions in a regular programming language — they reduce the overall complexity:</p>
<ul>
<li>You can write an unreadable sheet of code, or you can break the code into understandable individual functions and compose a program out of them.</li>
<li>You can build a tower of nested subqueries, or you can extract them into CTEs and reference from the main query.</li>
</ul>
<h2 id="cte-vs-subquery">CTE vs subquery</h2>
<p>There is a myth that &ldquo;CTEs are slow&rdquo;. It came from old versions of PostgreSQL (11 and earlier), which always <em>materialized</em> CTE — calculated the full result of a table expression and stored it until the end of the query.</p>
<p>This is usually a good thing: the engine calculates the result once, and then uses it several times during the main query. But sometimes materialization prevented the engine from optimizing the query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">cte</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">foo</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">cte</span> <span style="color:#a90d91">where</span> <span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#1c01ce">500000</span>;
</code></pre></div><p>The query selects exactly one record by ID, but materialization creates a copy of the <em>entire table</em> in memory. Because of this, the query is terribly slow.</p>
<p>PostgreSQL 12+ and other modern DBMS have become smarter and no longer do so. Materialization is used when it does more good than harm. Plus, many DBMSs allow you to explicitly control this behavior through the <code>MATERIALIZED</code> / <code>NOT MATERIALIZED</code> instructions.</p>
<p>So CTEs work no slower than subqueries. And if in doubt, you can try both — a subquery and a table expression — and compare the query plan and execution time.</p>
<p>How does one know when to use a subquery and when to use CTE? I came up with a simple rule that has never failed me yet:</p>
<blockquote class="big">
<p>Always use CTE</p>
</blockquote>
<p>That&rsquo;s what I wish you.</p>
<p>P.S. There are also <em>recursive</em> CTEs, famous for their complexity and terrible naming (they have almost nothing in common with regular CTEs). Let&rsquo;s talk about them some other day.</p>
]]></content:encoded></item><item><title>Temporary tables in SQLite</title><link>https://antonz.org/temp-tables/</link><pubDate>Wed, 18 May 2022 20:30:00 +0000</pubDate><guid>https://antonz.org/temp-tables/</guid><description>For faster exploratory data analysis.</description><content:encoded><![CDATA[<p>Sometimes you want to combine data from multiple tables into one and query the results. For example, join vacancies together with employers and regions:</p>
<p><img src="combine-then-query.png" alt="Combine, then query"></p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">v</span>.<span style="color:#000">*</span>, <span style="color:#000">e</span>.<span style="color:#000">name</span>, <span style="color:#000">a</span>.<span style="color:#000">name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">vacancy</span> <span style="color:#a90d91">as</span> <span style="color:#000">v</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">employer</span> <span style="color:#a90d91">as</span> <span style="color:#000">e</span> <span style="color:#a90d91">on</span> <span style="color:#000">e</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">employer_id</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">area</span> <span style="color:#a90d91">as</span> <span style="color:#000">a</span> <span style="color:#a90d91">on</span> <span style="color:#000">a</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">area_id</span>
</code></pre></div><p>The question is how to reference the combined dataset in further queries. There are three ways of doing that:</p>
<ol>
<li>Common Table Expressions (CTEs)</li>
<li>Views</li>
<li>Temporary tables</li>
</ol>
<p><img src="cte.png" alt="CTE"></p>
<p>A <strong>Common Table Expression</strong> is basically a named subquery:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">combined_cte</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span> <span style="color:#000">v</span>.<span style="color:#000">*</span>, <span style="color:#000">e</span>.<span style="color:#000">name</span>, <span style="color:#000">a</span>.<span style="color:#000">name</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">vacancy</span> <span style="color:#a90d91">as</span> <span style="color:#000">v</span>
    <span style="color:#a90d91">join</span> <span style="color:#000">employer</span> <span style="color:#a90d91">as</span> <span style="color:#000">e</span> <span style="color:#a90d91">on</span> <span style="color:#000">e</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">employer_id</span>
    <span style="color:#a90d91">join</span> <span style="color:#000">area</span> <span style="color:#a90d91">as</span> <span style="color:#000">a</span> <span style="color:#a90d91">on</span> <span style="color:#000">a</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">area_id</span>
)
<span style="color:#a90d91">select</span> ...
<span style="color:#a90d91">from</span> <span style="color:#000">combined_cte</span>
<span style="color:#a90d91">where</span> ...
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> ...
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> ...
</code></pre></div><p>The CTE is repeated in each query and computed on the fly. So if the subquery for the combined dataset is slow, the entire query will be even slower.</p>
<p><img src="view.png" alt="View"></p>
<p>A <strong>view</strong> works like a CTE, but you can reference it by name and not repeat the subquery every time. Views are computed on the fly, similar to CTEs.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- 1) create once
</span><span style="color:#177500"></span><span style="color:#a90d91">create</span> <span style="color:#a90d91">view</span> <span style="color:#000">combined_view</span> <span style="color:#a90d91">as</span>
<span style="color:#a90d91">select</span> <span style="color:#000">v</span>.<span style="color:#000">*</span>, <span style="color:#000">e</span>.<span style="color:#000">name</span>, <span style="color:#000">a</span>.<span style="color:#000">name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">vacancy</span> <span style="color:#a90d91">as</span> <span style="color:#000">v</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">employer</span> <span style="color:#a90d91">as</span> <span style="color:#000">e</span> <span style="color:#a90d91">on</span> <span style="color:#000">e</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">employer_id</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">area</span> <span style="color:#a90d91">as</span> <span style="color:#000">a</span> <span style="color:#a90d91">on</span> <span style="color:#000">a</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">area_id</span>;

<span style="color:#177500">-- 2) use everywhere
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> ...
<span style="color:#a90d91">from</span> <span style="color:#000">combined_view</span>
<span style="color:#a90d91">where</span> ...
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> ...
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> ...
</code></pre></div><p>PostgreSQL and others have materialized views, which store data on disk. But not SQLite.</p>
<p><img src="temp-table.png" alt="Temporary table"></p>
<p>A <strong>temporary table</strong> is like a real table: it stores data on disk, and you can build indexes. But it exists only while the database connection is open.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- 1) create once
</span><span style="color:#177500"></span><span style="color:#a90d91">create</span> <span style="color:#000">temp</span> <span style="color:#a90d91">table</span> <span style="color:#000">combined_temp</span> <span style="color:#a90d91">as</span>
<span style="color:#a90d91">select</span> <span style="color:#000">v</span>.<span style="color:#000">*</span>, <span style="color:#000">e</span>.<span style="color:#000">name</span>, <span style="color:#000">a</span>.<span style="color:#000">name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">vacancy</span> <span style="color:#a90d91">as</span> <span style="color:#000">v</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">employer</span> <span style="color:#a90d91">as</span> <span style="color:#000">e</span> <span style="color:#a90d91">on</span> <span style="color:#000">e</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">employer_id</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">area</span> <span style="color:#a90d91">as</span> <span style="color:#000">a</span> <span style="color:#a90d91">on</span> <span style="color:#000">a</span>.<span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#000">v</span>.<span style="color:#000">area_id</span>;

<span style="color:#177500">-- 2) use everywhere
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> ...
<span style="color:#a90d91">from</span> <span style="color:#000">combined_temp</span>
<span style="color:#a90d91">where</span> ...
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> ...
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> ...
</code></pre></div><p>Technically, SQLite stores temporary tables in a separate <code>temp</code> database. It keeps that database in a separate file on disk, visible only to the current database connection. The temporary database is deleted automatically as soon as the connection is closed.</p>
<div class="boxed">
<p><strong>Temporary database location</strong></p>
<p>On unix-like systems, the directory for storing the temp database can be one of the following:</p>
<ol>
<li>The directory set by <code>PRAGMA temp_store_directory</code> (deprecated)</li>
<li>The <code>SQLITE_TMPDIR</code> environment variable</li>
<li>The <code>TMPDIR</code> environment variable</li>
<li><code>/var/tmp</code></li>
<li><code>/usr/tmp</code></li>
<li><code>/tmp</code></li>
<li>The current working directory (<code>.</code>)</li>
</ol>
<p>SQLite picks the first one with both write and execute permissions.</p>
<p>To store the temp database in memory, set <code>PRAGMA temp_store = MEMORY</code>.</p>
<p><a href="https://sqlite.org/tempfiles.html">documentation</a></p>
</div>
<p>Temporary tables are great for experimenting when you&rsquo;re just getting to know the data. Do whatever you want — everything will be forgotten after disconnecting from the database ツ</p>
]]></content:encoded></item><item><title>JSON and virtual columns in SQLite</title><link>https://antonz.org/json-virtual-columns/</link><pubDate>Sun, 15 May 2022 11:25:00 +0000</pubDate><guid>https://antonz.org/json-virtual-columns/</guid><description>Faster JSON handling in a relational database.</description><content:encoded><![CDATA[<p><a href="/generated-columns/">Generated columns</a> have another great use case.</p>
<p><img src="json-data.png" alt="JSON data"></p>
<p>Let&rsquo;s say you decide to keep a log of events that occur in the system. There are different types of events, each with its own set of fields. For example, sign-in:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#000">&#34;timestamp&#34;</span>: <span style="color:#c41a16">&#34;2022-05-15T09:31:00Z&#34;</span>,
    <span style="color:#000">&#34;object&#34;</span>: <span style="color:#c41a16">&#34;user&#34;</span>,
    <span style="color:#000">&#34;object_id&#34;</span>: <span style="color:#1c01ce">11</span>,
    <span style="color:#000">&#34;action&#34;</span>: <span style="color:#c41a16">&#34;login&#34;</span>,
    <span style="color:#000">&#34;details&#34;</span>: {
        <span style="color:#000">&#34;ip&#34;</span>: <span style="color:#c41a16">&#34;192.168.0.1&#34;</span>
    }
}
</code></pre></div><p>Or account deposit:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#000">&#34;timestamp&#34;</span>: <span style="color:#c41a16">&#34;2022-05-15T09:32:00Z&#34;</span>,
    <span style="color:#000">&#34;object&#34;</span>: <span style="color:#c41a16">&#34;account&#34;</span>,
    <span style="color:#000">&#34;object_id&#34;</span>: <span style="color:#1c01ce">12</span>,
    <span style="color:#000">&#34;action&#34;</span>: <span style="color:#c41a16">&#34;deposit&#34;</span>,
    <span style="color:#000">&#34;details&#34;</span>: {
        <span style="color:#000">&#34;amount&#34;</span>: <span style="color:#c41a16">&#34;1000&#34;</span>,
        <span style="color:#000">&#34;currency&#34;</span>: <span style="color:#c41a16">&#34;USD&#34;</span>
    }
}
</code></pre></div><p><img src="json-functions.png" alt="JSON functions"></p>
<p>You decide to store the raw JSON, as normalization is non-trivial. You create an <code>events</code> table with a single <code>value</code> field:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">value</span> <span style="color:#a90d91">from</span> <span style="color:#000">events</span>;
</code></pre></div><pre tabindex="0"><code>{&quot;timestamp&quot;:&quot;2022-05-15T09:31:00Z&quot;,&quot;object&quot;:&quot;user&quot;,&quot;object_id&quot;:11,&quot;action&quot;:&quot;login&quot;,&quot;details&quot;:{&quot;ip&quot;:&quot;192.168.0.1&quot;}}
{&quot;timestamp&quot;:&quot;2022-05-15T09:32:00Z&quot;,&quot;object&quot;:&quot;account&quot;,&quot;object_id&quot;:12,&quot;action&quot;:&quot;deposit&quot;,&quot;details&quot;:{&quot;amount&quot;:&quot;1000&quot;,&quot;currency&quot;:&quot;USD&quot;}}
{&quot;timestamp&quot;:&quot;2022-05-15T09:33:00Z&quot;,&quot;object&quot;:&quot;company&quot;,&quot;object_id&quot;:13,&quot;action&quot;:&quot;edit&quot;,&quot;details&quot;:{&quot;fields&quot;:[&quot;address&quot;,&quot;phone&quot;]}}
</code></pre><p>And select events for a specific object:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.object&#39;</span>) <span style="color:#a90d91">as</span> <span style="color:#a90d91">object</span>,
  <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.action&#39;</span>) <span style="color:#a90d91">as</span> <span style="color:#000">action</span>
<span style="color:#a90d91">from</span> <span style="color:#000">events</span>
<span style="color:#a90d91">where</span> <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.object_id&#39;</span>) <span style="color:#000">=</span> <span style="color:#1c01ce">11</span>;
</code></pre></div><pre tabindex="0"><code>┌────────┬────────┐
│ object │ action │
├────────┼────────┤
│ user   │ login  │
└────────┴────────┘
</code></pre><p>So far, so good. But <code>json_extract()</code> parses the text on each call, so for hundreds of thousands of records the query is slow. What should you do?</p>
<p><img src="json-columns.png" alt="JSON columns"></p>
<p>Define virtual columns:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">events</span>
<span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#000">object_id</span> <span style="color:#a90d91">integer</span>
<span style="color:#a90d91">as</span> (<span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.object_id&#39;</span>));

<span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">events</span>
<span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#a90d91">object</span> <span style="color:#a90d91">text</span>
<span style="color:#a90d91">as</span> (<span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.object&#39;</span>));

<span style="color:#a90d91">alter</span> <span style="color:#a90d91">table</span> <span style="color:#000">events</span>
<span style="color:#a90d91">add</span> <span style="color:#a90d91">column</span> <span style="color:#000">action</span> <span style="color:#a90d91">text</span>
<span style="color:#a90d91">as</span> (<span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.action&#39;</span>));
</code></pre></div><p>Build an index:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">index</span> <span style="color:#000">events_object_id</span> <span style="color:#a90d91">on</span> <span style="color:#000">events</span>(<span style="color:#000">object_id</span>);
</code></pre></div><p>Now the query works instantly:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#a90d91">object</span>, <span style="color:#000">action</span>
<span style="color:#a90d91">from</span> <span style="color:#000">events</span>
<span style="color:#a90d91">where</span> <span style="color:#000">object_id</span> <span style="color:#000">=</span> <span style="color:#1c01ce">11</span>;
</code></pre></div><p>Thanks to virtual columns, we almost have a NoSQL database ツ</p>
<p><a href="https://sqlime.org/#gist:c284f7c22684eb74b5dab92d98f7d773">Playground</a></p>
]]></content:encoded></item><item><title>Compact objects in Python</title><link>https://antonz.org/compact-objects/</link><pubDate>Fri, 13 May 2022 20:25:00 +0000</pubDate><guid>https://antonz.org/compact-objects/</guid><description>Tuple vs dataclass, until numpy interferes</description><content:encoded><![CDATA[<p>Python is an object language. This is nice and cozy until you are out of memory holding 10 million objects at once. Let&rsquo;s talk about how to reduce appetite.</p>
<p><em>Visit the <a href="https://colab.research.google.com/drive/16GK-Xbv_kOvDC9Hfa_0O8E0Nyo4L9JwO?usp=sharing">Playground</a> to try out the code samples</em></p>
<h2 id="tuples">Tuples</h2>
<p>Imagine you have a simple <code>Pet</code> object with the <code>name</code> (string) and <code>price</code> (integer) attributes. Intuitively, it seems that the most compact representation is a tuple:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">(<span style="color:#c41a16">&#34;Frank the Pigeon&#34;</span>, <span style="color:#1c01ce">50000</span>)
</code></pre></div><p>Let&rsquo;s measure how much memory this beauty eats:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">random</span>
<span style="color:#a90d91">from</span> <span style="color:#000">pympler.asizeof</span> <span style="color:#a90d91">import</span> <span style="color:#000">asizeof</span>

<span style="color:#a90d91">def</span> <span style="color:#000">fields</span>():
    <span style="color:#000">name_gen</span> <span style="color:#000">=</span> (<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choice</span>(<span style="color:#000">string</span><span style="color:#000">.</span><span style="color:#000">ascii_uppercase</span>) <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">10</span>))
    <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;&#34;</span><span style="color:#000">.</span><span style="color:#000">join</span>(<span style="color:#000">name_gen</span>)
    <span style="color:#000">price</span> <span style="color:#000">=</span> <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">10000</span>, <span style="color:#1c01ce">99999</span>)
    <span style="color:#a90d91">return</span> (<span style="color:#000">name</span>, <span style="color:#000">price</span>)

<span style="color:#a90d91">def</span> <span style="color:#000">measure</span>(<span style="color:#000">name</span>, <span style="color:#000">fn</span>, <span style="color:#000">n</span><span style="color:#000">=</span><span style="color:#1c01ce">10_000</span>):
    <span style="color:#000">pets</span> <span style="color:#000">=</span> [<span style="color:#000">fn</span>() <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#000">n</span>)]
    <span style="color:#000">size</span> <span style="color:#000">=</span> <span style="color:#a90d91">round</span>(<span style="color:#000">asizeof</span>(<span style="color:#000">pets</span>) <span style="color:#000">/</span> <span style="color:#000">n</span>)
    <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;Pet size (</span><span style="color:#c41a16">{</span><span style="color:#000">name</span><span style="color:#c41a16">}</span><span style="color:#c41a16">) = </span><span style="color:#c41a16">{</span><span style="color:#000">size</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> bytes&#34;</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">size</span>

<span style="color:#000">baseline</span> <span style="color:#000">=</span> <span style="color:#000">measure</span>(<span style="color:#c41a16">&#34;tuple&#34;</span>, <span style="color:#000">fields</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (tuple) = 161 bytes
</code></pre><p>161 bytes. Let&rsquo;s use it as a baseline for further comparison.</p>
<h2 id="dataclasses-vs-named-tuples">Dataclasses vs named tuples</h2>
<p>But who works with tuples these days? You would probably choose a dataclass:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">dataclasses</span> <span style="color:#a90d91">import</span> <span style="color:#000">dataclass</span>

<span style="color:#000">@dataclass</span>
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetData</span>:
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>

<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#000">PetData</span>(<span style="color:#000">*</span><span style="color:#000">fields</span>())
<span style="color:#000">measure</span>(<span style="color:#c41a16">&#34;dataclass&#34;</span>, <span style="color:#000">fn</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (dataclass) = 257 bytes
x1.60 to baseline
</code></pre><p>Thing is, it&rsquo;s 1.6 times larger than a tuple.</p>
<p>Let&rsquo;s try a named tuple then:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">typing</span> <span style="color:#a90d91">import</span> <span style="color:#000">NamedTuple</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetTuple</span>(<span style="color:#000">NamedTuple</span>):
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>


<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#000">PetTuple</span>(<span style="color:#000">*</span><span style="color:#000">fields</span>())
<span style="color:#000">measure</span>(<span style="color:#c41a16">&#34;named tuple&#34;</span>, <span style="color:#000">fn</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (named tuple) = 161 bytes
x1.00 to baseline
</code></pre><p>Looks like a dataclass, works like a tuple. Perfect. Or not?</p>
<h2 id="slots">Slots</h2>
<p>Python 3.10 received dataclasses with slots:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">@dataclass</span>(<span style="color:#000">slots</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetData</span>:
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>


<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#000">PetData</span>(<span style="color:#000">*</span><span style="color:#000">fields</span>())
<span style="color:#000">measure</span>(<span style="color:#c41a16">&#34;dataclass w/slots&#34;</span>, <span style="color:#000">fn</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (dataclass w/slots) = 153 bytes
x0.95 to baseline
</code></pre><p>Wow! Slots magic creates special skinny objects without an underlying dictionary, unlike regular Python objects. Such dataclass is even lighter than a tuple.</p>
<p>What if 3.10 is out of the question yet? Use <code>NamedTuple</code>. Or add a slots dunder manually:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">@dataclass</span>
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetData</span>:
    <span style="color:#000">__slots__</span> <span style="color:#000">=</span> (<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;price&#34;</span>)
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>
</code></pre></div><p>Slot objects have their own shortcomings. But they are great for simple cases (without inheritance and other complex stuff).</p>
<h2 id="numpy-arrays">numpy arrays</h2>
<p>The real winner, of course, is the <code>numpy</code> array:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">string</span>
<span style="color:#a90d91">import</span> <span style="color:#000">numpy</span> <span style="color:#a90d91">as</span> <span style="color:#000">np</span>

<span style="color:#000">PetNumpy</span> <span style="color:#000">=</span> <span style="color:#000">np</span><span style="color:#000">.</span><span style="color:#000">dtype</span>([(<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;S10&#34;</span>), (<span style="color:#c41a16">&#34;price&#34;</span>, <span style="color:#c41a16">&#34;i4&#34;</span>)])
<span style="color:#000">generator</span> <span style="color:#000">=</span> (<span style="color:#000">fields</span>() <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#000">n</span>))
<span style="color:#000">pets</span> <span style="color:#000">=</span> <span style="color:#000">np</span><span style="color:#000">.</span><span style="color:#000">fromiter</span>(<span style="color:#000">generator</span>, <span style="color:#000">dtype</span><span style="color:#000">=</span><span style="color:#000">PetNumpy</span>)
<span style="color:#000">size</span> <span style="color:#000">=</span> <span style="color:#a90d91">round</span>(<span style="color:#000">asizeof</span>(<span style="color:#000">pets</span>) <span style="color:#000">/</span> <span style="color:#000">n</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (numpy array) = 14 bytes
x0.09 to baseline
</code></pre><p>This is not a flawless victory, though. If names are unicode (<code>U</code> type instead of <code>S</code>), the advantage is not so impressive:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">PetNumpy</span> <span style="color:#000">=</span> <span style="color:#000">np</span><span style="color:#000">.</span><span style="color:#000">dtype</span>([(<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;U10&#34;</span>), (<span style="color:#c41a16">&#34;price&#34;</span>, <span style="color:#c41a16">&#34;i4&#34;</span>)])
</code></pre></div><pre tabindex="0"><code>Pet size (numpy U10) = 44 bytes
x0.27 to baseline
</code></pre><p>If the name length is not strictly 10 characters, but varies, say, up to 50 characters (<code>U50</code> instead of <code>U10</code>) — the advantage disappears completely:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">fields</span>():
    <span style="color:#000">name_len</span> <span style="color:#000">=</span> <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">50</span>)
    <span style="color:#000">name_gen</span> <span style="color:#000">=</span> (<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choice</span>(<span style="color:#000">string</span><span style="color:#000">.</span><span style="color:#000">ascii_uppercase</span>) <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#000">name_len</span>))
    <span style="color:#177500"># ...</span>

<span style="color:#000">PetNumpy</span> <span style="color:#000">=</span> <span style="color:#000">np</span><span style="color:#000">.</span><span style="color:#000">dtype</span>([(<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;U50&#34;</span>), (<span style="color:#c41a16">&#34;price&#34;</span>, <span style="color:#c41a16">&#34;i4&#34;</span>)])
</code></pre></div><pre tabindex="0"><code>Pet size (tuple) = 179 bytes

Pet size (numpy U50) = 204 bytes
x1.14 to baseline
</code></pre><h2 id="others">Others</h2>
<p>Let&rsquo;s consider alternatives for completeness.</p>
<p>A <strong>regular class</strong> is no different than a dataclass:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetClass</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">__init__</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>, <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>):
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">name</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">price</span> <span style="color:#000">=</span> <span style="color:#000">price</span>
</code></pre></div><pre tabindex="0"><code>Pet size (class) = 257 bytes
x1.60 to baseline
</code></pre><p>And a <strong>frozen</strong> (immutable) dataclass too:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">@dataclass</span>(<span style="color:#000">frozen</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetDataFrozen</span>:
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>
</code></pre></div><pre tabindex="0"><code>Pet size (frozen dataclass) = 257 bytes
x1.60 to baseline
</code></pre><p>A <strong>dict</strong> is even worse:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">names</span> <span style="color:#000">=</span> (<span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;price&#34;</span>)
<span style="color:#000">fn</span> <span style="color:#000">=</span> <span style="color:#a90d91">lambda</span>: <span style="color:#a90d91">dict</span>(<span style="color:#a90d91">zip</span>(<span style="color:#000">names</span>, <span style="color:#000">fields</span>()))
<span style="color:#000">measure</span>(<span style="color:#c41a16">&#34;dict&#34;</span>, <span style="color:#000">fn</span>)
</code></pre></div><pre tabindex="0"><code>Pet size (dict) = 355 bytes
x1.98 to baseline
</code></pre><p><strong>Pydantic model</strong> sets an anti-record (no wonder, it uses inheritance):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">pydantic</span> <span style="color:#a90d91">import</span> <span style="color:#000">BaseModel</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetModel</span>(<span style="color:#000">BaseModel</span>):
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">price</span>: <span style="color:#a90d91">int</span>
</code></pre></div><pre tabindex="0"><code>Pet size (pydantic) = 385 bytes
x2.39 to baseline
</code></pre><p class="align-center">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Compact (and not so compact) objects in Python:</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure><img alt="Tuple" src="tuple.png"></figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure><img alt="Dataclass" src="dataclass.png"></figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure><img alt="Named tuple" src="named-tuple.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure><img alt="Dataclass with slots" src="dataclass-slots.png"></figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure><img alt="Manual slots" src="manual-slots.png"></figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure><img alt="numpy array" src="np-array.png"></figure>
</div>
</div>
]]></content:encoded></item></channel></rss>