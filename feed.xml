<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anton Zhiyanov</title><description>Everything about SQLite, Python, open data and awesome software.</description><link>https://antonz.org/</link><image><url>https://antonz.org/assets/favicon/favicon.png</url><title>Anton Zhiyanov</title><link>https://antonz.org/</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Jun 2023 21:30:00 +0000</lastBuildDate><atom:link href="https://antonz.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Python's sqlite3 with extensions</title><link>https://antonz.org/sqlean-py/</link><pubDate>Thu, 15 Jun 2023 21:30:00 +0000</pubDate><guid>https://antonz.org/sqlean-py/</guid><description>A drop-in replacement for the sqlite3 module, bundled with essential extensions.</description><content:encoded><![CDATA[<p>Adding SQLite extensions with Python&rsquo;s <code>sqlite3</code> module is a breeze. Download a file, call a few functions, and you are good to go. Unless you try to do it on macOS, where <code>sqlite3</code> is compiled without extension support.</p>
<p>I wanted to make the process even easier (and of course solve the macOS problem). So I created the <a href="https://github.com/nalgeon/sqlean.py"><code>sqlean.py</code></a> package: a drop-in replacement for the standard library&rsquo;s <code>sqlite3</code> module, bundled with the <a href="/sqlean/">essential extensions</a>.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
    <figure><img src="poster.png" alt="Extensions"/></figure>
</div>
</div>
<h2 id="installation-and-usage">Installation and usage</h2>
<p>All you need to do is <code>pip install</code> the package:</p>
<pre tabindex="0"><code>pip install sqlean.py
</code></pre><p>And use it just like you&rsquo;d use <code>sqlite3</code>:</p>
<pre tabindex="0"><code>import sqlean as sqlite3

# has the same API as the default `sqlite3` module
conn = sqlite3.connect(&quot;:memory:&quot;)
conn.execute(&quot;create table employees(id, name)&quot;)

# and comes with the `sqlean` extensions
cur = conn.execute(&quot;select median(value) from generate_series(1, 99)&quot;)
print(cur.fetchone())
# (50.0,)

conn.close()
</code></pre><p>Note that the package name is <code>sqlean.py</code>, while the code imports are just <code>sqlean</code>. The <code>sqlean</code> package name was taken by some zomby project and the author seemed to be unavailable, so I had to add the <code>.py</code> suffix.</p>
<h2 id="extensions">Extensions</h2>
<p><code>sqlean.py</code> contains 12 essential SQLite extensions:</p>
<ul>
<li><a href="/sqlean-encode/">crypto</a>: Hashing, encoding and decoding data</li>
<li><a href="/sqlean-define/">define</a>: User-defined functions and dynamic SQL</li>
<li><a href="/sqlean-fileio/">fileio</a>: Reading and writing files</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/fuzzy.md">fuzzy</a>: Fuzzy string matching and phonetics</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/ipaddr.md">ipaddr</a>: IP address manipulation</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/math.md">math</a>: Math functions</li>
<li><a href="/sqlean-regexp/">regexp</a>: Regular expressions</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/stats.md">stats</a>: Math statistics</li>
<li><a href="/sqlean-text/">text</a>: Advanced string functions</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/unicode.md">unicode</a>: Unicode support</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/uuid.md">uuid</a>: Universally Unique IDentifiers</li>
<li><a href="https://github.com/nalgeon/sqlean/blob/main/docs/vsv.md">vsv</a>: CSV files as virtual tables</li>
</ul>
<h2 id="platforms">Platforms</h2>
<p>The package is available for the following operating systems:</p>
<ul>
<li>Windows (64-bit)</li>
<li>Linux (64-bit)</li>
<li>macOS (both Intel and Apple processors)</li>
</ul>
<p>You can also compile it from source if necessary.</p>
<p>See the <a href="https://github.com/nalgeon/sqlean.py">package repo</a> for details.</p>
]]></content:encoded></item><item><title>Covering Index in SQL</title><link>https://antonz.org/sql-covering-index/</link><pubDate>Mon, 12 Jun 2023 14:30:00 +0000</pubDate><guid>https://antonz.org/sql-covering-index/</guid><description>Allows executing queries without touching the table.</description><content:encoded><![CDATA[<p>A covering index is the fastest way to select data from a table.</p>
<p>Let&rsquo;s see how it works using a query that selects employees with a certain salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">salary</span> <span style="color:#000">=</span> <span style="color:#1c01ce">90</span>;
</code></pre></div><h2 id="no-index-vs-using-an-index">No index vs. Using an index</h2>
<p>If there is no index, the database engine goes through the entire table (this is called a &ldquo;full scan&rdquo;):</p>
<pre tabindex="0"><code>QUERY PLAN
`--SCAN employees
</code></pre><p>Let&rsquo;s create an index by salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">index</span> <span style="color:#000">employees_idx</span>
<span style="color:#a90d91">on</span> <span style="color:#000">employees</span> (<span style="color:#000">salary</span>);
</code></pre></div><p>Now the database engine finds records by salary in the index (this is faster than going through the entire table). And for each record found, it accesses the table to get the <code>id</code> and <code>name</code> values:</p>
<pre tabindex="0"><code>QUERY PLAN
`--SEARCH employees USING INDEX employees_idx (salary=?)
</code></pre><h2 id="using-a-covering-index">Using a covering index</h2>
<p>Let&rsquo;s create a covering index (which covers all selected columns):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">index</span> <span style="color:#000">employees_idx</span>
<span style="color:#a90d91">on</span> <span style="color:#000">employees</span> (<span style="color:#000">salary</span>, <span style="color:#000">id</span>, <span style="color:#000">name</span>);
</code></pre></div><p>Now the database engine works only with the index, without accessing the table at all. This is even faster:</p>
<pre tabindex="0"><code>QUERY PLAN
`--SEARCH employees USING COVERING INDEX employees_idx (salary=?)
</code></pre><p>However, simply covering all columns used in a query may not be enough. The order of the columns should allow for a fast search using the index.</p>
<p>Suppose we build an index with the same set of columns, but in a different order:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">index</span> <span style="color:#000">employees_idx</span>
<span style="color:#a90d91">on</span> <span style="color:#000">employees</span> (<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>);
</code></pre></div><p>Now the database engine won&rsquo;t be able to quickly find records with <code>salary</code> = <code>90</code>. It may still use the index, but it will be a full index scan instead of a search (which is slow).</p>
<pre tabindex="0"><code>QUERY PLAN
`--SCAN employees USING COVERING INDEX employees_idx
</code></pre><p>(note SCAN instead of SEARCH here)</p>
<p>Covering indexes cost more when the data in the table changes, so don&rsquo;t create them for every type of query. Often this is one of the last optimizations after everything else has been done.</p>
]]></content:encoded></item><item><title>Blogging Myths You Should Care About</title><link>https://antonz.org/blogging-myths/</link><pubDate>Fri, 09 Jun 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/blogging-myths/</guid><description>If you are an average blogger and not Julia Evans.</description><content:encoded><![CDATA[<p>Okay, here are some REAL blogging myths:</p>
<ol>
<li>People will actually read your blog.</li>
<li>You&rsquo;ll reach your target audience.</li>
<li>You&rsquo;ll have meaningful conversations.</li>
<li>Your blog will help you get a job.</li>
</ol>
<p>In all cases, the answer is NO.</p>
<p>If you want to blog just because you like writing, that&rsquo;s a great option. But blogging is not about popularity. There are exceptions, of course, like Julia Evans. But your chances of gaining that kind of audience are close to zero.</p>
<p>A blog is like any other product. &ldquo;Build it and they will come&rdquo; no longer works — you need excellent marketing to get people to notice you and start reading. If you&rsquo;re a mediocre marketer (like most technical people), don&rsquo;t set yourself unrealistic expectations.</p>
<p>You spent a week writing an excellent, detailed, clear technical article — and only got a few dozen views? This is typical. If that bothers you, then blogging is not for you.</p>
<p>Of course, no one will comment. Share with others? Pffft.</p>
<p>Your true audience (those who care) is about 1% of your subscribers. 1000 followers on Twitter? Your audience is 10 people. 10000 email subscribers? 100 people.</p>
<p>Yes, there are exceptions. No, you should not hope to be one of them.</p>
<p>The conclusion is simple. If you are willing to write a blog for yourself, it will bring joy and benefit. But if you hope for an audience, it will bring pain and disappointment.</p>
<p>That&rsquo;s just the way it is for us average bloggers.</p>
]]></content:encoded></item><item><title>More String Functions in SQLite</title><link>https://antonz.org/sqlean-text/</link><pubDate>Wed, 07 Jun 2023 14:00:00 +0000</pubDate><guid>https://antonz.org/sqlean-text/</guid><description>A rich set of string functions, from `slice`, `contains` and `count` to `split_part`, `translate` and `repeat`.</description><content:encoded><![CDATA[<p>SQLite includes basic text functions like <code>instr</code>, <code>substr</code> and <code>replace</code> (and even <code>trim</code> in later versions), which can get you quite far. But I&rsquo;ve always wanted a more complete set, like the one in PostgreSQL, Python or Go.</p>
<p>So I&rsquo;ve created a <code>sqlean-text</code> extension that provides 25 string functions, from <code>slice</code>, <code>contains</code> and <code>count</code> to <code>split_part</code>, <code>translate</code> and <code>repeat</code>.</p>
<blockquote>
<p><strong>Note</strong>. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.</p>
</blockquote>
<p>Many functions are postgres-compatible (i.e. they have the same alias and logic as in PostgreSQL). It can be useful when migrating from SQLite to PostgreSQL or vice versa.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Text functions" src="functions.png">
  <figcaption>SQLite already has some text functions, but working with a full set is much nicer.</figcaption>
</figure>
</div>
</div>
<p>Note that some unicode-related functions like <code>upper</code> and <code>lower</code> are in the separate <a href="https://github.com/nalgeon/sqlean/blob/main/docs/unicode.md">unicode</a> extension. Regular expression functions are in the separate <a href="/sqlean-regexp/">regexp</a> extension.</p>
<h2 id="substrings-and-slicing">Substrings and slicing</h2>
<pre tabindex="0"><code>text_substring(str, start [,length])
</code></pre><p>Extracts a substring of <code>length</code> characters starting at the <code>start</code> position.</p>
<pre tabindex="0"><code>text_slice(str, start [,end])
</code></pre><p>Extracts a substring from the <code>start</code> position inclusive to the <code>end</code> position non-inclusive.</p>
<pre tabindex="0"><code>text_left(str, length)
</code></pre><p>Extracts a substring of <code>length</code> characters from the beginning of the string.</p>
<pre tabindex="0"><code>text_right(str, length)
</code></pre><p>Extracts a substring of <code>length</code> characters from the end of the string.</p>
<h2 id="search-and-match">Search and match</h2>
<pre tabindex="0"><code>text_index(str, other)
</code></pre><p>Returns the first index of the <code>other</code> substring in the original string.</p>
<pre tabindex="0"><code>text_last_index(str, other)
</code></pre><p>Returns the last index of the <code>other</code> substring in the original string.</p>
<pre tabindex="0"><code>text_contains(str, other)
</code></pre><p>Checks if the string contains the <code>other</code> substring.</p>
<pre tabindex="0"><code>text_has_prefix(str, other)
</code></pre><p>Checks if the string starts with the <code>other</code> substring.</p>
<pre tabindex="0"><code>text_has_suffix(str, other)
</code></pre><p>Checks if the string ends with the <code>other</code> substring.</p>
<pre tabindex="0"><code>text_count(str, other)
</code></pre><p>Counts how many times the <code>other</code> substring is contained in the original string.</p>
<h2 id="split-and-join">Split and join</h2>
<pre tabindex="0"><code>text_split(str, sep, n)
</code></pre><p>Splits a string by a separator and returns the n-th part.</p>
<pre tabindex="0"><code>text_concat(str, ...)
</code></pre><p>Concatenates strings.</p>
<pre tabindex="0"><code>text_join(sep, str, ...)
</code></pre><p>Joins strings using the separator.</p>
<pre tabindex="0"><code>text_repeat(str, count)
</code></pre><p>Concatenates the string to itself a given number of times.</p>
<h2 id="trim-and-pad">Trim and pad</h2>
<pre tabindex="0"><code>text_ltrim(str [,chars])
</code></pre><p>Trims certain characters from the beginning of the string.</p>
<pre tabindex="0"><code>text_rtrim(str [,chars])
</code></pre><p>Trims certain characters from the end of the string.</p>
<pre tabindex="0"><code>text_trim(str [,chars])
</code></pre><p>Trims certain characters from the beginning and end of the string.</p>
<pre tabindex="0"><code>text_lpad(str, length [,fill])
</code></pre><p>Pads the string to the specified length by prepending certain characters.</p>
<pre tabindex="0"><code>text_rpad(str, length [,fill])
</code></pre><p>Pads the string to the specified length by appending certain characters.</p>
<h2 id="other-modifications">Other modifications</h2>
<pre tabindex="0"><code>text_replace(str, old, new [,count])
</code></pre><p>Replaces <code>old</code> substrings with <code>new</code> substrings in the original string, but not more than <code>count</code> times.</p>
<pre tabindex="0"><code>text_translate(str, from, to)
</code></pre><p>Replaces each string character that matches a character in the <code>from</code> set with the corresponding character in the <code>to</code> set.</p>
<pre tabindex="0"><code>text_reverse(str)
</code></pre><p>Reverses the order of the characters in the string.</p>
<h2 id="string-properties">String properties</h2>
<pre tabindex="0"><code>text_length(str)
</code></pre><p>Returns the number of characters in the string.</p>
<pre tabindex="0"><code>text_size(str)
</code></pre><p>Returns the number of bytes in the string.</p>
<pre tabindex="0"><code>text_bitsize(str)
</code></pre><p>Returns the number of bits in the string.</p>
<h2 id="installation-and-usage">Installation and Usage</h2>
<ol>
<li>
<p>Download the <a href="https://github.com/nalgeon/sqlean/releases/latest">latest release</a></p>
</li>
<li>
<p>Use with SQLite command-line interface:</p>
</li>
</ol>
<pre tabindex="0"><code>sqlite&gt; .load ./text
sqlite&gt; select reverse('hello');
</code></pre><p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/install.md">How to Install an Extension</a> for usage with IDE, Python, etc.</p>
<p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/text.md">Extension Documentation</a> for reference.</p>
]]></content:encoded></item><item><title>SQL Recipe: Compare with Neighbors</title><link>https://antonz.org/sql-compare-neighbors/</link><pubDate>Sat, 03 Jun 2023 15:00:00 +0000</pubDate><guid>https://antonz.org/sql-compare-neighbors/</guid><description>Calculate the difference between each record and the previous or next one.</description><content:encoded><![CDATA[<p><em>This post is part of the &ldquo;SQL Recipes&rdquo; series, where I provide short patterns for solving common SQL data analysis tasks.</em></p>
<p>Suppose we want to compare each data record with its neighbors based on some column value. For example:</p>
<ul>
<li>Compare sales from one month to the previous month (month-over-month or MoM change) or to the same month a year ago (year-over-year or YoY change).</li>
<li>Compare financial results for a given period to the same period in the previous year (like-for-like or LFL analysis).</li>
<li>Observe the daily difference in stock prices to understand market trends.</li>
<li>Calculate the difference in traffic between days of the week to plan capacity changes.</li>
</ul>
<p>The solution is to use the <code>lag()</code> function over an SQL window ordered by target columns.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s compare the company&rsquo;s <code>expenses</code> for each month to the previous month in absolute terms:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>,
  <span style="color:#000">expense</span>,
  <span style="color:#000">expense</span> <span style="color:#000">-</span> <span style="color:#000">lag</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>The <code>lag(value, offset)</code> function returns the <code>value</code> of the record that is <code>offset</code> rows behind the current one. By default, the offset is 1 and can be omitted.</p>
<p>Now let&rsquo;s calculate the relative change from month to month:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#000">round</span>(
    (<span style="color:#000">expense</span> <span style="color:#000">-</span> <span style="color:#000">lag</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>)<span style="color:#000">*</span><span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#000">lag</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;diff %&#34;</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><h2 id="alternatives">Alternatives</h2>
<p>Suppose we want to compare quarterly <code>sales</code> with the previous year. This is where the <code>offset</code> parameter comes in handy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#a90d91">data</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#a90d91">year</span>, <span style="color:#000">quarter</span>,
    <span style="color:#000">lag</span>(<span style="color:#000">amount</span>, <span style="color:#1c01ce">4</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>,
    <span style="color:#000">amount</span> <span style="color:#a90d91">as</span> <span style="color:#a90d91">current</span>,
    <span style="color:#000">round</span>(<span style="color:#000">amount</span><span style="color:#000">*</span><span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#000">lag</span>(<span style="color:#000">amount</span>, <span style="color:#1c01ce">4</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;increase %&#34;</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#000">quarter</span>)
)
<span style="color:#a90d91">select</span>
  <span style="color:#000">quarter</span>,
  <span style="color:#000">prev</span> <span style="color:#a90d91">as</span> <span style="color:#000">y2019</span>,
  <span style="color:#a90d91">current</span> <span style="color:#a90d91">as</span> <span style="color:#000">y2020</span>,
  <span style="color:#c41a16">&#34;increase %&#34;</span>
<span style="color:#a90d91">from</span> <span style="color:#a90d91">data</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">quarter</span>;
</code></pre></div><p>Looking back 4 quarters with <code>lag(amount, 4)</code> gives us the same quarter but from the previous year.</p>
<p>There is also a <code>lead()</code> function. It works just like <code>lag()</code>, except that it looks forward instead of backward.</p>
<h2 id="compatibility">Compatibility</h2>
<p>All major vendors support the <code>lag()</code> and <code>lead()</code> window functions. Some of them, such as MS SQL and Oracle, do not support the <code>window</code> clause. In these cases, we can inline the window definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#000">expense</span> <span style="color:#000">-</span> <span style="color:#000">lag</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> (
    <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>We can also rewrite the query without window functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">cur</span>.<span style="color:#a90d91">year</span>, <span style="color:#000">cur</span>.<span style="color:#a90d91">month</span>, <span style="color:#000">cur</span>.<span style="color:#000">expense</span>,
  <span style="color:#000">cur</span>.<span style="color:#000">expense</span> <span style="color:#000">-</span> <span style="color:#000">prev</span>.<span style="color:#000">expense</span> <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span> <span style="color:#000">cur</span>
<span style="color:#a90d91">left</span> <span style="color:#a90d91">join</span> <span style="color:#000">expenses</span> <span style="color:#000">prev</span> <span style="color:#a90d91">on</span>
  <span style="color:#000">cur</span>.<span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">prev</span>.<span style="color:#a90d91">year</span> <span style="color:#a90d91">and</span>
  <span style="color:#000">cur</span>.<span style="color:#a90d91">month</span> <span style="color:#000">-</span> <span style="color:#1c01ce">1</span> <span style="color:#000">=</span> <span style="color:#000">prev</span>.<span style="color:#a90d91">month</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">cur</span>.<span style="color:#a90d91">year</span>, <span style="color:#000">cur</span>.<span style="color:#a90d91">month</span>;
</code></pre></div><br>
<p>Want to learn more about window functions? Read my book — <a href="/sql-window-functions-book/"><strong>SQL Window Functions Explained</strong></a></p>
<p><sqlime-db name="employees" path="data.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Base64 and other encodings in SQLite</title><link>https://antonz.org/sqlean-encode/</link><pubDate>Thu, 01 Jun 2023 18:30:00 +0000</pubDate><guid>https://antonz.org/sqlean-encode/</guid><description>Encoding binary data into a textual representation and vice versa.</description><content:encoded><![CDATA[<p>You&rsquo;ve probably heard about hexadecimal encoding in SQLite:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">hex</span>(<span style="color:#c41a16">&#39;hello&#39;</span>);
<span style="color:#177500">-- 68656C6C6F
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">unhex</span>(<span style="color:#c41a16">&#39;68656C6C6F&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p>SQLite does not support other encoding algorithms by default. However, you can easily enable them using the <code>sqlean-crypto</code> extension (not related to cryptocurrency in any way).</p>
<blockquote>
<p><strong>Note</strong>. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.</p>
</blockquote>
<p><code>sqlean-crypto</code> adds two functions:</p>
<ul>
<li><code>encode(data, algo)</code> encodes binary data into a textual representation using the specified algorithm.</li>
<li><code>decode(text, algo)</code> decodes binary data from a textual representation using the specified algorithm.</li>
</ul>
<p>Supported algorithms: <code>base32</code>, <code>base64</code>, <code>base85</code>, <code>hex</code> and <code>url</code>.</p>
<p><a href="https://en.wikipedia.org/wiki/Base32">Base32</a> uses 32 human-readable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base32&#39;</span>);
<span style="color:#177500">-- NBSWY3DP
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;NBSWY3DP&#39;</span>, <span style="color:#c41a16">&#39;base32&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Base64">Base64</a> uses 64 printable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base64&#39;</span>);
<span style="color:#177500">-- aGVsbG8=
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;aGVsbG8=&#39;</span>, <span style="color:#c41a16">&#39;base64&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Ascii85">Base85</a> (aka Ascii85) uses 85 printable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base85&#39;</span>);
<span style="color:#177500">-- BOu!rDZ
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;BOu!rDZ&#39;</span>, <span style="color:#c41a16">&#39;base85&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Hexadecimal">Hexadecimal</a> uses 16 characters (0-9 and A-F) to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;hex&#39;</span>);
<span style="color:#177500">-- 68656c6c6f
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;68656c6c6f&#39;</span>, <span style="color:#c41a16">&#39;hex&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/URL_encoding">URL encoding</a> replaces non-alphanumeric characters in a string with their corresponding percent-encoded values:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hel lo!&#39;</span>, <span style="color:#c41a16">&#39;url&#39;</span>);
<span style="color:#177500">-- hel%20lo%21
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;hel%20lo%21&#39;</span>, <span style="color:#c41a16">&#39;url&#39;</span>);
<span style="color:#177500">-- hel lo!
</span></code></pre></div><h2 id="installation-and-usage">Installation and Usage</h2>
<ol>
<li>
<p>Download the <a href="https://github.com/nalgeon/sqlean/releases/latest">latest release</a></p>
</li>
<li>
<p>Use with SQLite command-line interface:</p>
</li>
</ol>
<pre tabindex="0"><code>sqlite&gt; .load ./crypto
sqlite&gt; select encode('hello', 'base64');
</code></pre><p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/install.md">How to Install an Extension</a> for usage with IDE, Python, etc.</p>
<p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/crypto.md">Extension Documentation</a> for reference.</p>
]]></content:encoded></item><item><title>LIMIT vs. FETCH in SQL</title><link>https://antonz.org/sql-fetch/</link><pubDate>Tue, 30 May 2023 18:00:00 +0000</pubDate><guid>https://antonz.org/sql-fetch/</guid><description>According to the standard, we should use be using FETCH.</description><content:encoded><![CDATA[<p>Fun fact: There is no <code>limit</code> clause in the SQL standard.</p>
<p>Everyone uses <code>limit</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">limit</span> <span style="color:#1c01ce">5</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
│ 24 │ Irene │ it         │ 104    │
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
└────┴───────┴────────────┴────────┘
</code></pre><p>And yet, according to the standard, we should be using <code>fetch</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><p><code>fetch first N rows only</code> does exactly what <code>limit N</code> does. But <code>fetch</code> can do more.</p>
<h2 id="limit-with-ties">Limit with ties</h2>
<p>Suppose we want to select the top 5 employees by salary, but also select anyone with the same salary as the last (5th) employee. Here comes <code>with ties</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">with</span> <span style="color:#000">ties</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
│ 24 │ Irene │ it         │ 104    │
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
│ 32 │ Dave  │ sales      │ 96     │
└────┴───────┴────────────┴────────┘
</code></pre><h2 id="relative-limit">Relative limit</h2>
<p>Suppose we want to select the top 10% of employees by salary. <code>percent</code> to the rescue:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">10</span> <span style="color:#000">percent</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
└────┴───────┴────────────┴────────┘
</code></pre><p>(there are 20 employees, so 10% is 2 records)</p>
<h2 id="offset-with-fetch">Offset with fetch</h2>
<p>Suppose we want to skip the first 3 employees and select the next 5. No problem: <code>fetch</code> plays nicely with <code>offset</code>, as does <code>limit</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">offset</span> <span style="color:#1c01ce">3</span> <span style="color:#a90d91">rows</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">next</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
│ 32 │ Dave  │ sales      │ 96     │
│ 22 │ Grace │ it         │ 90     │
│ 21 │ Emma  │ it         │ 84     │
└────┴───────┴────────────┴────────┘
</code></pre><p><code>next</code> here is just a syntactic sugar, a synonym for <code>first</code> in the previous examples. We can use <code>first</code> and get exactly the same result:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">offset</span> <span style="color:#1c01ce">3</span> <span style="color:#a90d91">rows</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><p>Oh, and by the way, <code>row</code> and <code>rows</code> are also synonyms.</p>
<h2 id="database-support">Database support</h2>
<p>The following DBMS support <code>fetch</code>:</p>
<ul>
<li>PostgreSQL 8.4+</li>
<li>Oracle 12c+</li>
<li>MS SQL 2012+</li>
<li>DB2 9+</li>
</ul>
<p>However, only Oracle supports <code>percent</code> fetching.</p>
<p>MySQL and SQLite do not support <code>fetch</code> at all.</p>
<p>P.S. Interested in mastering advanced SQL? Check out my book — <a href="/sql-window-functions-book">SQL Window Functions Explained</a></p>
]]></content:encoded></item><item><title>SQL Recipe: Segmenting Data</title><link>https://antonz.org/sql-segmenting/</link><pubDate>Tue, 23 May 2023 15:30:00 +0000</pubDate><guid>https://antonz.org/sql-segmenting/</guid><description>Assigning each record to a specific segment based on the value of one or more columns.</description><content:encoded><![CDATA[<p><em>This post is part of the &ldquo;SQL Recipes&rdquo; series, where I provide short patterns for solving common SQL data analysis tasks.</em></p>
<p>Suppose we want to divide our data into several segments based on the value of one or more columns (e.g., to assign customers or products to different groups for marketing purposes).</p>
<p>The solution is to use the <code>ntile()</code> function over an SQL window ordered by target columns.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s divide the <code>employees</code> into three groups according to their salary:</p>
<ul>
<li>high-paid,</li>
<li>medium-paid,</li>
<li>low-paid.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>ntile(n)</code> function splits all records into <code>n</code> groups and returns the group number for each record. If the total number of records (10 in our case) is not divisible by the group size (3), then the former groups will be larger than the latter.</p>
<h2 id="alternatives">Alternatives</h2>
<p><code>ntile()</code> always tries to split the data so that the groups are of the same size. So records with the same value may end up in different (adjacent) groups:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">2</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">tile</span>;
</code></pre></div><p>To avoid this, we can use the following (much more complicated) formula instead of <code>ntile(n)</code>:</p>
<pre tabindex="0"><code>1 + ((rank() over w) - 1) * N / count(*) over () as tile
</code></pre><p>For <code>n = 2</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#1c01ce">1</span> <span style="color:#000">+</span> ((<span style="color:#000">rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>) <span style="color:#000">*</span> <span style="color:#1c01ce">2</span> <span style="color:#000">/</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><h2 id="compatibility">Compatibility</h2>
<p>All major vendors support the <code>ntile()</code> window function. Some of them, such as MS SQL and Oracle, do not support the <code>window</code> clause. In these cases, we can inline the window definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> (
    <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>We can also rewrite the query without window functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ceil</span>(
    (<span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e2</span> <span style="color:#a90d91">where</span> <span style="color:#000">e2</span>.<span style="color:#000">salary</span> <span style="color:#000">&gt;</span> <span style="color:#000">e1</span>.<span style="color:#000">salary</span>) <span style="color:#000">*</span> <span style="color:#1c01ce">3</span> <span style="color:#000">/</span>
    (<span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>)
  ) <span style="color:#000">+</span> <span style="color:#1c01ce">1</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e1</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><br>
<p>Want to learn more about window functions? Read my book — <a href="/sql-window-functions-book/"><strong>SQL Window Functions Explained</strong></a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>SQL Cheat Sheet</title><link>https://antonz.org/sql-cheatsheet/</link><pubDate>Sun, 14 May 2023 13:00:00 +0000</pubDate><guid>https://antonz.org/sql-cheatsheet/</guid><description>For those who knew SQL, but kinda forgot it.</description><content:encoded><![CDATA[<p>This is a short cheat sheet for those who were once familiar with SQL selects, but haven&rsquo;t given it much practice since. The examples are interactive, so you can both read and practice.</p>
<p>We will use the toy <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><h2 id="basics">Basics</h2>
<p>The basic building blocks of an SQL query.</p>
<h3 id="select--from-">select &hellip; from &hellip;</h3>
<p>Selects rows from the specified table, keeping only the listed columns in each row.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
</code></pre></div><h3 id="where">where</h3>
<p>Select only rows that meet the conditions.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;Berlin&#39;</span>;
</code></pre></div><p>There are different types of conditions:</p>
<ul>
<li>strict equality: <code>city = 'Berling'</code></li>
<li>inequality: <code>salary &gt; 100</code></li>
<li>range inclusion: <code>id between 20 and 29</code></li>
<li>set inclusion: <code>department in ('hr', 'it')</code></li>
<li>pattern matching: <code>name like 'A%'</code></li>
<li>null value checking: <code>city is null</code></li>
</ul>
<p>Conditions can be combined with <code>or</code> (to select rows that match <em>any</em> of the conditions):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;hr&#39;</span> <span style="color:#a90d91">or</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;it&#39;</span>;
</code></pre></div><p>Or with <code>and</code> (to select rows that match <em>all</em> of the conditions):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span> <span style="color:#a90d91">and</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;it&#39;</span>;
</code></pre></div><h3 id="distinct">distinct</h3>
<p>Selects only unique values (i.e., no repetitions) listed in the <code>select</code> columns.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#000">department</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
</code></pre></div><h3 id="order-by">order by</h3>
<p>Sorts the results according to the specified columns.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Sorts from smallest to largest by default, but does the opposite if you add <code>desc</code>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><h3 id="limit">limit</h3>
<p>Returns only the first N rows of the result set. Typically used with <code>order by</code>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
<span style="color:#a90d91">limit</span> <span style="color:#1c01ce">5</span>;
</code></pre></div><h2 id="grouping">Grouping</h2>
<p>Grouping data and calculating aggregates.</p>
<h3 id="group-by">group by</h3>
<p>Combines rows with the same value in specified columns. It is used in conjunction with one of several aggregate functions:</p>
<p><code>count(*)</code> counts the number of rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- number of employees in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>sum(column)</code> calculates the sum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- total salary fund in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>avg(column)</code> calculates the average of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- average salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">avg</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>max(column)</code> calculates the maximum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- maximum salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">max</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>min(column)</code> calculates the minimum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- minimum salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">min</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p>We can group by multiple columns:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- average salary in each department for each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span>
  <span style="color:#000">city</span>, <span style="color:#000">department</span>,
  <span style="color:#000">round</span>(<span style="color:#a90d91">avg</span>(<span style="color:#000">salary</span>)) <span style="color:#a90d91">as</span> <span style="color:#000">avg_salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>, <span style="color:#000">department</span>;
</code></pre></div><h3 id="having">having</h3>
<p>Filters rows from the result <em>after</em> the <code>group by</code> is executed — unlike <code>where</code>, which filters out rows <em>before</em> the <code>group by</code> is executed.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- departments with more than 3 employees
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">department</span>, <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
<span style="color:#a90d91">having</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">&gt;</span> <span style="color:#1c01ce">3</span>;
</code></pre></div><h2 id="table-join">Table join</h2>
<p>Merging multiple tables in the query result.</p>
<p>Suppose there are two tables — <code>jobs</code> and <code>companies</code>.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Jobs and companies" src="./join-3.png">
</figure>
</div>
</div>
<p>In the <code>jobs</code> table there is a company identifier called <code>company_id</code>. However, the name of the company is in the other table — <code>companies</code>.</p>
<h3 id="inner-join">Inner JOIN</h3>
<p>We want to select records from the <code>jobs</code> table, but we also want to add the company name to them. We can do this by using a table <code>join</code> operation:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Inner JOIN" src="./join-1.png">
</figure>
</div>
</div>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">jobs</span>.<span style="color:#000">id</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">name</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span>,
  <span style="color:#000">companies</span>.<span style="color:#000">name</span> <span style="color:#a90d91">as</span> <span style="color:#000">company_name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">jobs</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">companies</span> <span style="color:#a90d91">on</span> <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span> <span style="color:#000">=</span> <span style="color:#000">companies</span>.<span style="color:#000">id</span>;
</code></pre></div><p>For each row in the <code>jobs</code> table, the database engine looks in the <code>companies</code> table, finds the value where <code>id = jobs.company_id</code>, extracts the <code>name</code>, and adds it to the result. If no matching value is found (as in the case of &ldquo;UI Designer&rdquo; with a company ID of <code>99</code>), the row is not included in the result.</p>
<h3 id="outer-join-left-join">Outer JOIN (LEFT JOIN)</h3>
<p>The outer join is very similar to an inner join.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Outer join" src="./join-2.png">
</figure>
</div>
</div>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">jobs</span>.<span style="color:#000">id</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">name</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span>,
  <span style="color:#000">companies</span>.<span style="color:#000">name</span> <span style="color:#a90d91">as</span> <span style="color:#000">company_name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">jobs</span>
  <span style="color:#a90d91">left</span> <span style="color:#a90d91">join</span> <span style="color:#000">companies</span> <span style="color:#a90d91">on</span> <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span> <span style="color:#000">=</span> <span style="color:#000">companies</span>.<span style="color:#000">id</span>;
</code></pre></div><p>The difference is that even if the row with <code>id = jobs.company_id</code> (&ldquo;UI Designer&rdquo; in our example) is not found in the <code>companies</code> table, the row from <code>jobs</code> will still appear in the result. The company name will be <code>null</code> in this case.</p>
<p>An inner JOIN can be thought of as saying:</p>
<blockquote>
<p>Given these two tables, I want to see records that match based on the specified criteria.</p>
</blockquote>
<p>An outer (left) JOIN, on the other hand, says:</p>
<blockquote>
<p>Given these two tables, I want to see records that match based on the specified criteria. I also want to see all records from the left table that do not match the right table.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>We covered the basics of SQL for selecting data:</p>
<ul>
<li>Query parts: columns, tables, filtering, sorting.</li>
<li>Data grouping and aggregation functions.</li>
<li>Table joins.</li>
</ul>
<p>Of course, SQL has many more capabilities, but that&rsquo;s another story.</p>
<p><sqlime-db name="sample" path="./sample.sql"></sqlime-db>
<sqlime-examples db="sample" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>SQL Recipe: Ranking Records</title><link>https://antonz.org/sql-ranking/</link><pubDate>Thu, 11 May 2023 15:50:00 +0000</pubDate><guid>https://antonz.org/sql-ranking/</guid><description>Assigning a rank to each row based on the value of one or more columns.</description><content:encoded><![CDATA[<p><em>This post is part of the &ldquo;SQL Recipes&rdquo; series, where I provide short patterns for solving common SQL data analysis tasks.</em></p>
<p>Suppose we want to create a ranking, where the position of each record is determined by the value of one or more columns.</p>
<p>The solution is to use the <code>rank()</code> function over an SQL window ordered by target columns.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s rank <code>employees</code> by salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>rank()</code> function assigns each employee a rank according to their salary (<code>order by salary desc</code>). Note that employees with the same salary receive the same rank (Henry and Irene, Cindy and Dave).</p>
<h2 id="alternatives">Alternatives</h2>
<p>We can use <code>dense_rank()</code> instead of <code>rank()</code> to avoid &ldquo;gaps&rdquo; in the ranking:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Note that Alice is ranked #3 and Grace is ranked #5, whereas previously they were ranked #4 and #7, respectively.</p>
<h2 id="compatibility">Compatibility</h2>
<p>All major vendors support the <code>rank()</code> and <code>dense_rank()</code> window functions. Some of them, such as MS SQL and Oracle, do not support the <code>window</code> clause. In these cases, we can inline the window definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">rank</span>() <span style="color:#000">over</span> (
    <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>We can also rewrite the query without window functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  (
    <span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
    <span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e2</span>
    <span style="color:#a90d91">where</span> <span style="color:#000">e2</span>.<span style="color:#000">salary</span> <span style="color:#000">&gt;</span> <span style="color:#000">e1</span>.<span style="color:#000">salary</span>
  ) <span style="color:#000">+</span> <span style="color:#1c01ce">1</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">e1</span>.<span style="color:#000">name</span>, <span style="color:#000">e1</span>.<span style="color:#000">department</span>, <span style="color:#000">e1</span>.<span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e1</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">e1</span>.<span style="color:#000">id</span>;
</code></pre></div><br>
<p>Want to learn more about window functions? Read my book — <a href="/sql-window-functions-book/"><strong>SQL Window Functions Explained</strong></a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item></channel></rss>