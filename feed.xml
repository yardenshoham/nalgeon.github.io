<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anton Zhiyanov</title><description>Everything about SQLite, Python, open data and awesome software.</description><link>https://antonz.org/</link><image><url>https://antonz.org/assets/favicon/favicon.png</url><title>Anton Zhiyanov</title><link>https://antonz.org/</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Jun 2023 18:30:00 +0000</lastBuildDate><atom:link href="https://antonz.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Base64 and other encodings in SQLite</title><link>https://antonz.org/sqlean-encode/</link><pubDate>Thu, 01 Jun 2023 18:30:00 +0000</pubDate><guid>https://antonz.org/sqlean-encode/</guid><description>Encoding binary data into a textual representation and vice versa.</description><content:encoded><![CDATA[<p>You&rsquo;ve probably heard about hexadecimal encoding in SQLite:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">hex</span>(<span style="color:#c41a16">&#39;hello&#39;</span>);
<span style="color:#177500">-- 68656C6C6F
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">unhex</span>(<span style="color:#c41a16">&#39;68656C6C6F&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p>SQLite does not support other encoding algorithms by default. However, you can easily enable them using the <code>sqlean-crypto</code> extension (not related to cryptocurrency in any way).</p>
<blockquote>
<p><strong>Note</strong>. Unlike other DBMS, adding extensions to SQLite is a breeze. Download a file, run one database command — and you are good to go.</p>
</blockquote>
<p><code>sqlean-crypto</code> adds two functions:</p>
<ul>
<li><code>encode(data, algo)</code> encodes binary data into a textual representation using the specified algorithm.</li>
<li><code>decode(text, algo)</code> decodes binary data from a textual representation using the specified algorithm.</li>
</ul>
<p>Supported algorithms: <code>base32</code>, <code>base64</code>, <code>base85</code>, <code>hex</code> and <code>url</code>.</p>
<p><a href="https://en.wikipedia.org/wiki/Base32">Base32</a> uses 32 human-readable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base32&#39;</span>);
<span style="color:#177500">-- NBSWY3DP
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;NBSWY3DP&#39;</span>, <span style="color:#c41a16">&#39;base32&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Base64">Base64</a> uses 64 printable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base64&#39;</span>);
<span style="color:#177500">-- aGVsbG8=
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;aGVsbG8=&#39;</span>, <span style="color:#c41a16">&#39;base64&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Ascii85">Base85</a> (aka Ascii85) uses 85 printable characters to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;base85&#39;</span>);
<span style="color:#177500">-- BOu!rDZ
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;BOu!rDZ&#39;</span>, <span style="color:#c41a16">&#39;base85&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/Hexadecimal">Hexadecimal</a> uses 16 characters (0-9 and A-F) to represent binary data:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hello&#39;</span>, <span style="color:#c41a16">&#39;hex&#39;</span>);
<span style="color:#177500">-- 68656c6c6f
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;68656c6c6f&#39;</span>, <span style="color:#c41a16">&#39;hex&#39;</span>);
<span style="color:#177500">-- hello
</span></code></pre></div><p><a href="https://en.wikipedia.org/wiki/URL_encoding">URL encoding</a> replaces non-alphanumeric characters in a string with their corresponding percent-encoded values:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">encode</span>(<span style="color:#c41a16">&#39;hel lo!&#39;</span>, <span style="color:#c41a16">&#39;url&#39;</span>);
<span style="color:#177500">-- hel%20lo%21
</span><span style="color:#177500"></span>
<span style="color:#a90d91">select</span> <span style="color:#000">decode</span>(<span style="color:#c41a16">&#39;hel%20lo%21&#39;</span>, <span style="color:#c41a16">&#39;url&#39;</span>);
<span style="color:#177500">-- hel lo!
</span></code></pre></div><h2 id="installation-and-usage">Installation and Usage</h2>
<ol>
<li>
<p>Download the <a href="https://github.com/nalgeon/sqlean/releases/latest">latest release</a></p>
</li>
<li>
<p>Use with SQLite command-line interface:</p>
</li>
</ol>
<pre tabindex="0"><code>sqlite&gt; .load ./crypto
sqlite&gt; select encode('hello', 'base64');
</code></pre><p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/install.md">How to Install an Extension</a> for usage with IDE, Python, etc.</p>
<p>See <a href="https://github.com/nalgeon/sqlean/blob/main/docs/crypto.md">Extension Documentation</a> for reference.</p>
]]></content:encoded></item><item><title>LIMIT vs. FETCH in SQL</title><link>https://antonz.org/sql-fetch/</link><pubDate>Tue, 30 May 2023 18:00:00 +0000</pubDate><guid>https://antonz.org/sql-fetch/</guid><description>According to the standard, we should use be using FETCH.</description><content:encoded><![CDATA[<p>Fun fact: There is no <code>limit</code> clause in the SQL standard.</p>
<p>Everyone uses <code>limit</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">limit</span> <span style="color:#1c01ce">5</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
│ 24 │ Irene │ it         │ 104    │
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
└────┴───────┴────────────┴────────┘
</code></pre><p>And yet, according to the standard, we should be using <code>fetch</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><p><code>fetch first N rows only</code> does exactly what <code>limit N</code> does. But <code>fetch</code> can do more.</p>
<h2 id="limit-with-ties">Limit with ties</h2>
<p>Suppose we want to select the top 5 employees by salary, but also select anyone with the same salary as the last (5th) employee. Here comes <code>with ties</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">with</span> <span style="color:#000">ties</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
│ 24 │ Irene │ it         │ 104    │
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
│ 32 │ Dave  │ sales      │ 96     │
└────┴───────┴────────────┴────────┘
</code></pre><h2 id="relative-limit">Relative limit</h2>
<p>Suppose we want to select the top 10% of employees by salary. <code>percent</code> to the rescue:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">10</span> <span style="color:#000">percent</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 25 │ Frank │ it         │ 120    │
│ 23 │ Henry │ it         │ 104    │
└────┴───────┴────────────┴────────┘
</code></pre><p>(there are 20 employees, so 10% is 2 records)</p>
<h2 id="offset-with-fetch">Offset with fetch</h2>
<p>Suppose we want to skip the first 3 employees and select the next 5. No problem: <code>fetch</code> plays nicely with <code>offset</code>, as does <code>limit</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">offset</span> <span style="color:#1c01ce">3</span> <span style="color:#a90d91">rows</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">next</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬───────┬────────────┬────────┐
│ id │ name  │ department │ salary │
├────┼───────┼────────────┼────────┤
│ 33 │ Alice │ sales      │ 100    │
│ 31 │ Cindy │ sales      │ 96     │
│ 32 │ Dave  │ sales      │ 96     │
│ 22 │ Grace │ it         │ 90     │
│ 21 │ Emma  │ it         │ 84     │
└────┴───────┴────────────┴────────┘
</code></pre><p><code>next</code> here is just a syntactic sugar, a synonym for <code>first</code> in the previous examples. We can use <code>first</code> and get exactly the same result:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
<span style="color:#a90d91">offset</span> <span style="color:#1c01ce">3</span> <span style="color:#a90d91">rows</span>
<span style="color:#a90d91">fetch</span> <span style="color:#a90d91">first</span> <span style="color:#1c01ce">5</span> <span style="color:#a90d91">rows</span> <span style="color:#a90d91">only</span>;
</code></pre></div><p>Oh, and by the way, <code>row</code> and <code>rows</code> are also synonyms.</p>
<h2 id="database-support">Database support</h2>
<p>The following DBMS support <code>fetch</code>:</p>
<ul>
<li>PostgreSQL 8.4+</li>
<li>Oracle 12c+</li>
<li>MS SQL 2012+</li>
<li>DB2 9+</li>
</ul>
<p>However, only Oracle supports <code>percent</code> fetching.</p>
<p>MySQL and SQLite do not support <code>fetch</code> at all.</p>
<p>P.S. Interested in mastering advanced SQL? Check out my book — <a href="/sql-window-functions-book">SQL Window Functions Explained</a></p>
]]></content:encoded></item><item><title>Segmenting Data in SQL</title><link>https://antonz.org/sql-segmenting/</link><pubDate>Tue, 23 May 2023 15:30:00 +0000</pubDate><guid>https://antonz.org/sql-segmenting/</guid><description>Assigning each record to a specific segment based on the value of one or more columns.</description><content:encoded><![CDATA[<p><em>This post is part of the &ldquo;SQL Recipe&rdquo; series, where I provide short patterns for solving common SQL data analysis tasks.</em></p>
<p>Suppose we want to divide our data into several segments based on the value of one or more columns (e.g., to assign customers or products to different groups for marketing purposes).</p>
<p>The solution is to use the <code>ntile()</code> function over an SQL window ordered by target columns.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s divide the <code>employees</code> into three groups according to their salary:</p>
<ul>
<li>high-paid,</li>
<li>medium-paid,</li>
<li>low-paid.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>ntile(n)</code> function splits all records into <code>n</code> groups and returns the group number for each record. If the total number of records (10 in our case) is not divisible by the group size (3), then the former groups will be larger than the latter.</p>
<h2 id="alternatives">Alternatives</h2>
<p><code>ntile()</code> always tries to split the data so that the groups are of the same size. So records with the same value may end up in different (adjacent) groups:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">2</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">tile</span>;
</code></pre></div><p>To avoid this, we can use the following (much more complicated) formula instead of <code>ntile(n)</code>:</p>
<pre tabindex="0"><code>1 + ((rank() over w) - 1) * N / count(*) over () as tile
</code></pre><p>For <code>n = 2</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#1c01ce">1</span> <span style="color:#000">+</span> ((<span style="color:#000">rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>) <span style="color:#000">*</span> <span style="color:#1c01ce">2</span> <span style="color:#000">/</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><h2 id="compatibility">Compatibility</h2>
<p>All major vendors support the <code>ntile()</code> window function. Some of them, such as MS SQL and Oracle, do not support the <code>window</code> clause. In these cases, we can inline the window definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> (
    <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><p>We can also rewrite the query without window functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ceil</span>(
    (<span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e2</span> <span style="color:#a90d91">where</span> <span style="color:#000">e2</span>.<span style="color:#000">salary</span> <span style="color:#000">&gt;</span> <span style="color:#000">e1</span>.<span style="color:#000">salary</span>) <span style="color:#000">*</span> <span style="color:#1c01ce">3</span> <span style="color:#000">/</span>
    (<span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>)
  ) <span style="color:#000">+</span> <span style="color:#1c01ce">1</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e1</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><br>
<p>Want to learn more about window functions? Read my book — <a href="/sql-window-functions-book/"><strong>SQL Window Functions Explained</strong></a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>SQL Cheat Sheet</title><link>https://antonz.org/sql-cheatsheet/</link><pubDate>Sun, 14 May 2023 13:00:00 +0000</pubDate><guid>https://antonz.org/sql-cheatsheet/</guid><description>For those who knew SQL, but kinda forgot it.</description><content:encoded><![CDATA[<p>This is a short cheat sheet for those who were once familiar with SQL selects, but haven&rsquo;t given it much practice since. The examples are interactive, so you can both read and practice.</p>
<p>We will use the toy <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><h2 id="basics">Basics</h2>
<p>The basic building blocks of an SQL query.</p>
<h3 id="select--from-">select &hellip; from &hellip;</h3>
<p>Selects rows from the specified table, keeping only the listed columns in each row.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
</code></pre></div><h3 id="where">where</h3>
<p>Select only rows that meet the conditions.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;Berlin&#39;</span>;
</code></pre></div><p>There are different types of conditions:</p>
<ul>
<li>strict equality: <code>city = 'Berling'</code></li>
<li>inequality: <code>salary &gt; 100</code></li>
<li>range inclusion: <code>id between 20 and 29</code></li>
<li>set inclusion: <code>department in ('hr', 'it')</code></li>
<li>pattern matching: <code>name like 'A%'</code></li>
<li>null value checking: <code>city is null</code></li>
</ul>
<p>Conditions can be combined with <code>or</code> (to select rows that match <em>any</em> of the conditions):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;hr&#39;</span> <span style="color:#a90d91">or</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;it&#39;</span>;
</code></pre></div><p>Or with <code>and</code> (to select rows that match <em>all</em> of the conditions):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span> <span style="color:#a90d91">and</span> <span style="color:#000">department</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;it&#39;</span>;
</code></pre></div><h3 id="distinct">distinct</h3>
<p>Selects only unique values (i.e., no repetitions) listed in the <code>select</code> columns.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#a90d91">distinct</span> <span style="color:#000">department</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>;
</code></pre></div><h3 id="order-by">order by</h3>
<p>Sorts the results according to the specified columns.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Sorts from smallest to largest by default, but does the opposite if you add <code>desc</code>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><h3 id="limit">limit</h3>
<p>Returns only the first N rows of the result set. Typically used with <code>order by</code>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
<span style="color:#a90d91">limit</span> <span style="color:#1c01ce">5</span>;
</code></pre></div><h2 id="grouping">Grouping</h2>
<p>Grouping data and calculating aggregates.</p>
<h3 id="group-by">group by</h3>
<p>Combines rows with the same value in specified columns. It is used in conjunction with one of several aggregate functions:</p>
<p><code>count(*)</code> counts the number of rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- number of employees in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>sum(column)</code> calculates the sum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- total salary fund in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>avg(column)</code> calculates the average of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- average salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">avg</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>max(column)</code> calculates the maximum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- maximum salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">max</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p><code>min(column)</code> calculates the minimum of the <code>column</code> values among the rows with the same <code>group by</code> column value.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- minimum salary in each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">city</span>, <span style="color:#a90d91">min</span>(<span style="color:#000">salary</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>;
</code></pre></div><p>We can group by multiple columns:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- average salary in each department for each city
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span>
  <span style="color:#000">city</span>, <span style="color:#000">department</span>,
  <span style="color:#000">round</span>(<span style="color:#a90d91">avg</span>(<span style="color:#000">salary</span>)) <span style="color:#a90d91">as</span> <span style="color:#000">avg_salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">city</span>, <span style="color:#000">department</span>;
</code></pre></div><h3 id="having">having</h3>
<p>Filters rows from the result <em>after</em> the <code>group by</code> is executed — unlike <code>where</code>, which filters out rows <em>before</em> the <code>group by</code> is executed.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#177500">-- departments with more than 3 employees
</span><span style="color:#177500"></span><span style="color:#a90d91">select</span> <span style="color:#000">department</span>, <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
<span style="color:#a90d91">having</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">&gt;</span> <span style="color:#1c01ce">3</span>;
</code></pre></div><h2 id="table-join">Table join</h2>
<p>Merging multiple tables in the query result.</p>
<p>Suppose there are two tables — <code>jobs</code> and <code>companies</code>.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Jobs and companies" src="./join-3.png">
</figure>
</div>
</div>
<p>In the <code>jobs</code> table there is a company identifier called <code>company_id</code>. However, the name of the company is in the other table — <code>companies</code>.</p>
<h3 id="inner-join">Inner JOIN</h3>
<p>We want to select records from the <code>jobs</code> table, but we also want to add the company name to them. We can do this by using a table <code>join</code> operation:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Inner JOIN" src="./join-1.png">
</figure>
</div>
</div>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">jobs</span>.<span style="color:#000">id</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">name</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span>,
  <span style="color:#000">companies</span>.<span style="color:#000">name</span> <span style="color:#a90d91">as</span> <span style="color:#000">company_name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">jobs</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">companies</span> <span style="color:#a90d91">on</span> <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span> <span style="color:#000">=</span> <span style="color:#000">companies</span>.<span style="color:#000">id</span>;
</code></pre></div><p>For each row in the <code>jobs</code> table, the database engine looks in the <code>companies</code> table, finds the value where <code>id = jobs.company_id</code>, extracts the <code>name</code>, and adds it to the result. If no matching value is found (as in the case of &ldquo;UI Designer&rdquo; with a company ID of <code>99</code>), the row is not included in the result.</p>
<h3 id="outer-join-left-join">Outer JOIN (LEFT JOIN)</h3>
<p>The outer join is very similar to an inner join.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Outer join" src="./join-2.png">
</figure>
</div>
</div>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">jobs</span>.<span style="color:#000">id</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">name</span>,
  <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span>,
  <span style="color:#000">companies</span>.<span style="color:#000">name</span> <span style="color:#a90d91">as</span> <span style="color:#000">company_name</span>
<span style="color:#a90d91">from</span> <span style="color:#000">jobs</span>
  <span style="color:#a90d91">left</span> <span style="color:#a90d91">join</span> <span style="color:#000">companies</span> <span style="color:#a90d91">on</span> <span style="color:#000">jobs</span>.<span style="color:#000">company_id</span> <span style="color:#000">=</span> <span style="color:#000">companies</span>.<span style="color:#000">id</span>;
</code></pre></div><p>The difference is that even if the row with <code>id = jobs.company_id</code> (&ldquo;UI Designer&rdquo; in our example) is not found in the <code>companies</code> table, the row from <code>jobs</code> will still appear in the result. The company name will be <code>null</code> in this case.</p>
<p>An inner JOIN can be thought of as saying:</p>
<blockquote>
<p>Given these two tables, I want to see records that match based on the specified criteria.</p>
</blockquote>
<p>An outer (left) JOIN, on the other hand, says:</p>
<blockquote>
<p>Given these two tables, I want to see records that match based on the specified criteria. I also want to see all records from the left table that do not match the right table.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>We covered the basics of SQL for selecting data:</p>
<ul>
<li>Query parts: columns, tables, filtering, sorting.</li>
<li>Data grouping and aggregation functions.</li>
<li>Table joins.</li>
</ul>
<p>Of course, SQL has many more capabilities, but that&rsquo;s another story.</p>
<p><sqlime-db name="sample" path="./sample.sql"></sqlime-db>
<sqlime-examples db="sample" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Ranking Records in SQL</title><link>https://antonz.org/sql-ranking/</link><pubDate>Thu, 11 May 2023 15:50:00 +0000</pubDate><guid>https://antonz.org/sql-ranking/</guid><description>Assigning a rank to each row based on the value of one or more columns.</description><content:encoded><![CDATA[<p><em>This post is part of the &ldquo;SQL Recipe&rdquo; series, where I provide short patterns for solving common SQL data analysis tasks.</em></p>
<p>Suppose we want to create a ranking, where the position of each record is determined by the value of one or more columns.</p>
<p>The solution is to use the <code>rank()</code> function over an SQL window ordered by target columns.</p>
<h2 id="example">Example</h2>
<p>Let&rsquo;s rank <code>employees</code> by salary:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>rank()</code> function assigns each employee a rank according to their salary (<code>order by salary desc</code>). Note that employees with the same salary receive the same rank (Henry and Irene, Cindy and Dave).</p>
<h2 id="alternatives">Alternatives</h2>
<p>We can use <code>dense_rank()</code> instead of <code>rank()</code> to avoid &ldquo;gaps&rdquo; in the ranking:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Note that Alice is ranked #3 and Grace is ranked #5, whereas previously they were ranked #4 and #7, respectively.</p>
<h2 id="compatibility">Compatibility</h2>
<p>All major vendors support the <code>rank()</code> and <code>dense_rank()</code> window functions. Some of them, such as MS SQL and Oracle, do not support the <code>window</code> clause. In these cases, we can inline the window definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">rank</span>() <span style="color:#000">over</span> (
    <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">id</span>;
</code></pre></div><p>We can also rewrite the query without window functions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  (
    <span style="color:#a90d91">select</span> <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>)
    <span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e2</span>
    <span style="color:#a90d91">where</span> <span style="color:#000">e2</span>.<span style="color:#000">salary</span> <span style="color:#000">&gt;</span> <span style="color:#000">e1</span>.<span style="color:#000">salary</span>
  ) <span style="color:#000">+</span> <span style="color:#1c01ce">1</span> <span style="color:#a90d91">as</span> <span style="color:#c41a16">&#34;rank&#34;</span>,
  <span style="color:#000">e1</span>.<span style="color:#000">name</span>, <span style="color:#000">e1</span>.<span style="color:#000">department</span>, <span style="color:#000">e1</span>.<span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span> <span style="color:#a90d91">as</span> <span style="color:#000">e1</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#c41a16">&#34;rank&#34;</span>, <span style="color:#000">e1</span>.<span style="color:#000">id</span>;
</code></pre></div><br>
<p>Want to learn more about window functions? Read my book — <a href="/sql-window-functions-book/"><strong>SQL Window Functions Explained</strong></a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Rolling Aggregates with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-rolling-aggregates/</link><pubDate>Mon, 01 May 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-rolling-aggregates/</guid><description>Moving averages, cumulative totals and other sliding aggregates.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Previously we&rsquo;ve covered <a href="/sql-window-functions-ranking/">ranking</a>, <a href="/sql-window-functions-offset/">offset</a> and <a href="/sql-window-functions-aggregation/">aggregate</a> window functions.</p>
<p>​Rolling aggregates (also known as sliding or moving aggregates) are just totals — sum, average, count etc. But instead of calculating them across all elements, we take a different approach.</p>
<p>Let&rsquo;s look at some examples. We&rsquo;ll use the <code>expenses</code> table, which contains the monthly income and expenses of the company our employees work for. To make examples concise, we&rsquo;ll only consider the first nine months of 2020:</p>
<pre tabindex="0"><code>select
  year, month, income, expense
from expenses
where year = 2020 and month &lt;= 9
order by month;
</code></pre><pre tabindex="0"><code>┌──────┬───────┬────────┬─────────┐
│ year │ month │ income │ expense │
├──────┼───────┼────────┼─────────┤
│ 2020 │ 1     │ 94     │ 82      │
│ 2020 │ 2     │ 94     │ 75      │
│ 2020 │ 3     │ 94     │ 104     │
│ 2020 │ 4     │ 100    │ 94      │
│ 2020 │ 5     │ 100    │ 99      │
│ 2020 │ 6     │ 100    │ 105     │
│ 2020 │ 7     │ 100    │ 95      │
│ 2020 │ 8     │ 100    │ 110     │
│ 2020 │ 9     │ 104    │ 104     │
└──────┴───────┴────────┴─────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#moving-average">Moving average</a></li>
<li><a href="#frame">Frame</a></li>
<li><a href="#cumulative-total">Cumulative total</a></li>
<li><a href="#default-frame">Default frame</a></li>
<li><a href="#rolling-aggregates-functions">Rolling aggregates functions</a></li>
</ul>
<h2 id="moving-average">Moving average</h2>
<p>Judging by the data, the income is growing: 94 in January → 104 in September. But are the expenses growing as well? It&rsquo;s hard to tell right away: expenses vary from month to month. To smooth out these spikes, we&rsquo;ll use the &ldquo;3-month average&rdquo; — the average between the previous, current, and next month&rsquo;s expenses for each month:</p>
<ul>
<li>moving average for January = (January + February) / 2;</li>
<li>for February = (January + February + March) / 3;</li>
<li>for March = (February + March + April) / 3;</li>
<li>for April = (March + April + May) / 3;</li>
<li>and so on.</li>
</ul>
<p>Let&rsquo;s calculate the moving average for all months:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before moving average"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="avg-after.png" width="300" alt="After moving average"/></figure>
</div>
</div>
<p>The <code>roll_avg</code> column contains the expenses moving average for three months (previous, current, and following). Now it is clear that expenses are steadily growing.</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>Let&rsquo;s sort the table by month:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last. At each step, we will calculate the average among the previous, current, and next values from the <code>expense</code> column:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="avg/03.png" width="300" alt="Moving average step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="avg/04.png" width="300" alt="Moving average step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="avg/05.png" width="300" alt="Moving average step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="avg/06.png" width="300" alt="Moving average step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="avg/07.png" width="300" alt="Moving average step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="avg.gif" width="300" alt="Moving average animation"/>
</figure>
</div>
</div>
<p>The blue frame shifts down at each step — this is how we get the moving average. To describe this in SQL, we need to revisit the concept of <em>frames</em> that we encountered in the <a href="/sql-window-functions-offset/">Comparing by Offset</a> chapter:</p>
<ol>
<li>The window consists of one or more partitions (in our case, there is only one partition with the company&rsquo;s expenses).</li>
<li>Within the partition, records are ordered by specific columns (<code>order by year, month</code>).</li>
<li>Each record has its own frame.</li>
</ol>
<p>The frame at each step covers three records — previous, current and next:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expenses<br/>
    <figure><img src="current-row-1.png" width="300" alt="Current row 1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    expenses<br/>
    <figure><img src="current-row-2.png" width="300" alt="Current row 2"/></figure>
</div>
</div>
<p>Here&rsquo;s how to write it in SQL:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between 1 preceding and 1 following
)
</code></pre><p>The <code>rows</code> line is the frame definition. It literally says:</p>
<blockquote>
<p>Select rows from the previous one to the following one.</p>
</blockquote>
<p>We will deal with frames in detail in the next step, but for now, let&rsquo;s finish with our query.</p>
<p>Calculate the average expenses with the <code>avg()</code> function:</p>
<pre tabindex="0"><code>avg(expense) over w
</code></pre><p>Add rounding and bring everything together:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#000">round</span>(<span style="color:#a90d91">avg</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#1c01ce">1</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#1c01ce">1</span> <span style="color:#000">following</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>The expenses moving average is ready!</p>
<h2 id="frame">Frame</h2>
<p>In general, the frame is defined like this:</p>
<pre tabindex="0"><code>rows between X preceding and Y following
</code></pre><p>Where <code>X</code> is the number of rows before the current one, and <code>Y</code> is the number of rows after the current one:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-following-1.png" width="300" alt="Between 2 preceding and 1 following"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-following-2.png" width="300" alt="Between 1 preceding and 2 following"/></figure>
</div>
</div>
<p>If you specify the value <code>unbounded</code> instead of <code>X</code> or <code>Y</code> — this means &ldquo;from/to the partition boundary&rdquo;:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="unbounded-preceding.png" width="300" alt="Unbounded preceding"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="unbounded-following.png" width="300" alt="Unbounded following"/></figure>
</div>
</div>
<p>If you specify the value <code>current row</code> instead of <code>X preceding</code> or <code>Y following</code> — this means &ldquo;the current record&rdquo;:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="preceding-current.png" width="300" alt="Between 2 preceding and current row"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="current-following.png" width="300" alt="Between current row and 2 following"/></figure>
</div>
</div>
<p>The frame never goes beyond the partition boundaries. If the frame encounters a boundary, it is cut off:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <figure><img src="boundary-1.png" width="300" alt="Partition start"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <figure><img src="boundary-2.png" width="300" alt="Partition end"/></figure>
</div>
</div>
<p>Frames have much more capabilities, but we will limit ourselves to these for now. We will discuss the rest in the next part of the book — it is fully devoted to frames.</p>
<div class="boxed">
<h3>✎ Exercise: Frame definition (+2 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="cumulative-total">Cumulative total</h2>
<p>Thanks to the moving average, we know that income and expenses are growing. But how do they relate to each other? We want to understand whether the company is &ldquo;in the black&rdquo; or &ldquo;in the red&rdquo;, considering all the money earned and spent.</p>
<p>It is essential to see the values for each month, not only for the end of the year. If everything is OK at in September, but the company went negative in June — this is a potential problem (companies call this situation a &ldquo;cash gap&rdquo;).</p>
<p>Let&rsquo;s calculate income and expenses by month as a cumulative total:</p>
<ul>
<li>cumulative income for January = January;</li>
<li>for February = January + February;</li>
<li>for March = January + February + March;</li>
<li>for April = January + February + March + April;</li>
<li>and so on.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure>
  <img src="sum-after.png" width="450" alt="After cumulative sum"/>
</figure>
</div>
</div>
<p><code>t_</code> columns show cumulative values:</p>
<ul>
<li>income (<code>t_income</code>),</li>
<li>expenses (<code>t_expense</code>),</li>
<li>profit (<code>t_profit</code>).</li>
</ul>
<pre tabindex="0"><code>t_profit = t_income - t_expense
</code></pre><p>How do we calculate them?</p>
<p>Let&rsquo;s sort the table by month:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last. At each step, we will calculate the totals from the first row to the current row:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="sum/03.png" width="300" alt="Cumulative sum step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="sum/04.png" width="300" alt="Cumulative sum step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="sum/05.png" width="300" alt="Cumulative sum step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="sum/06.png" width="300" alt="Cumulative sum step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="sum/07.png" width="300" alt="Cumulative sum step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure>
  <img src="sum.gif" width="450" alt="Cumulative sum animation"/>
</figure>
</div>
</div>
<p>At each step, the frame covers rows from the first one to the current one. We already know how to define this frame in SQL:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between unbounded preceding and current row
)
</code></pre><p>Calculate total income and expenses with the <code>sum()</code> function:</p>
<pre tabindex="0"><code>sum(income) over w as t_income,
sum(expense) over w as t_expense,
</code></pre><p>Calculate profit as the difference between income and expenses:</p>
<pre tabindex="0"><code>(sum(income) over w) - (sum(expense) over w) as t_profit
</code></pre><p>All together:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  (<span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#000">-</span> (<span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">current</span> <span style="color:#a90d91">row</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>As you can see from <code>t_profit</code>, the company is doing well. In some months, expenses exceed income, but there is no gap due to the accumulated cash reserve.</p>
<div class="boxed">
<h3>✎ Exercise: Cumulative salary fund</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="default-frame">Default frame</h2>
<p>Let&rsquo;s take a query that calculates cumulative expenses:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">current</span> <span style="color:#a90d91">row</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>And remove the frame definition:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>You&rsquo;d expect the same <code>total</code> in all rows — total expenses for nine months. But instead, we&rsquo;ve got this:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expectation<br/>
                <pre><code>┌───────┬─────────┬───────┐
│ month │ expense │ total │
├───────┼─────────┼───────┤
│ 1     │ 82      │ 868   │
│ 2     │ 75      │ 868   │
│ 3     │ 104     │ 868   │
│ 4     │ 94      │ 868   │
│ 5     │ 99      │ 868   │
│ 6     │ 105     │ 868   │
│ 7     │ 95      │ 868   │
│ 8     │ 110     │ 868   │
│ 9     │ 104     │ 868   │
└───────┴─────────┴───────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-5">
    reality<br/>
                <pre><code>┌───────┬─────────┬───────┐
│ month │ expense │ total │
├───────┼─────────┼───────┤
│ 1     │ 82      │ 82    │
│ 2     │ 75      │ 157   │
│ 3     │ 104     │ 261   │
│ 4     │ 94      │ 355   │
│ 5     │ 99      │ 454   │
│ 6     │ 105     │ 559   │
│ 7     │ 95      │ 654   │
│ 8     │ 110     │ 764   │
│ 9     │ 104     │ 868   │
└───────┴─────────┴───────┘</code></pre>
</div>
</div>
<p>The query without a frame still calculated cumulative expenses — exactly as the query with a frame. How is this possible?</p>
<p>It&rsquo;s all about the presence of sorting in the window (<code>order by year, month</code>). The rule is as follows:</p>
<ul>
<li>if there is an <code>order by</code> in the window definition,</li>
<li>and an aggregation function is used,</li>
<li>and there is no frame definition,</li>
<li>then the default frame is used.</li>
</ul>
<p>The default frame in our query spreads from the first to the current record. Therefore, the results match the query with the explicit frame (<code>rows between unbounded preceding and current row</code>).</p>
<p>But it&rsquo;s not always the case. That&rsquo;s why I recommend specifying the frame explicitly until you understand the various frame types. Make your life easier — add a frame definition whenever you add an <code>order by</code> to the window.</p>
<p>If we remove the <code>order by</code> from the window, the aggregate turns from rolling into a regular one:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">total</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">where</span> <span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#1c01ce">2020</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">month</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">9</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><p>No surprises here.</p>
<h2 id="rolling-aggregates-functions">Rolling aggregates functions</h2>
<p>Rolling aggregates use the same functions as regular ones:</p>
<ul>
<li><code>min()</code> and <code>max()</code>,</li>
<li><code>count()</code>, <code>avg()</code> and <code>sum()</code>,</li>
<li><code>group_concat()</code>.</li>
</ul>
<p>The only difference is the presence of a frame in rolling aggregates.</p>
<p class="align-center">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Over the course of four articles, we have seen four types of tasks commonly solved with window functions in SQL:</p>
<ul>
<li><a href="/sql-window-functions-ranking/">Ranking</a> (various ratings).</li>
<li><a href="/sql-window-functions-offset/">Comparing by offset</a> (neighbors and boundaries).</li>
<li><a href="/sql-window-functions-aggregation/">Aggregation</a> (count, sum, and average).</li>
<li>Rolling aggregates (moving average and cumulative total).</li>
</ul>
<p>To learn more about window functions or to get some practice — buy my book <em>SQL Window Functions Explained</em>.</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>Aggregating Data with SQL Window Functions</title><link>https://antonz.org/sql-window-functions-aggregation/</link><pubDate>Sun, 30 Apr 2023 18:30:00 +0000</pubDate><guid>https://antonz.org/sql-window-functions-aggregation/</guid><description>Comparing individual values with totals and averages.</description><content:encoded><![CDATA[<p><em>This is an excerpt from my book <a href="/sql-window-functions-book">SQL Window Functions Explained</a>. The book is a clear and visual introduction to the topic with lots of practical exercises.</em></p>
<p>Previously we&rsquo;ve covered <a href="/sql-window-functions-ranking/">ranking</a> and <a href="/sql-window-functions-offset/">offset</a> window functions.</p>
<p>Aggregation means counting totals or averages (or other <em>aggregates</em>). For example, the average salary per city. Or the total number of gold medals for each country in the Olympic Games standings.</p>
<p>We will aggregate records from the <code>employees</code> table:</p>
<pre tabindex="0"><code>┌────┬───────┬────────┬────────────┬────────┐
│ id │ name  │  city  │ department │ salary │
├────┼───────┼────────┼────────────┼────────┤
│ 11 │ Diane │ London │ hr         │ 70     │
│ 12 │ Bob   │ London │ hr         │ 78     │
│ 21 │ Emma  │ London │ it         │ 84     │
│ 22 │ Grace │ Berlin │ it         │ 90     │
│ 23 │ Henry │ London │ it         │ 104    │
│ 24 │ Irene │ Berlin │ it         │ 104    │
│ 25 │ Frank │ Berlin │ it         │ 120    │
│ 31 │ Cindy │ Berlin │ sales      │ 96     │
│ 32 │ Dave  │ London │ sales      │ 96     │
│ 33 │ Alice │ Berlin │ sales      │ 100    │
└────┴───────┴────────┴────────────┴────────┘
</code></pre><p><a href="https://sqlime.org/#employees.db">playground</a> • <a href="/sql-window-functions-book/employees.sql">download</a></p>
<p>Table of contents:</p>
<ul>
<li><a href="#partitioned-aggregates">Partitioned aggregates</a></li>
<li><a href="#filtering-and-execution-order">Filtering and execution order</a></li>
<li><a href="#window-definition">Window definition</a></li>
<li><a href="#aggregation-functions">Aggregation functions</a></li>
<li><a href="#keep-it-up">Keep it up</a></li>
</ul>
<h2 id="partitioned-aggregates">Partitioned aggregates</h2>
<p>Each department has a salary fund — money spent monthly on paying employees' salaries. Let&rsquo;s see what percentage of this fund represents each employee&rsquo;s salary:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    before<br/>
    <figure><img src="before.png" width="300" alt="Before partition sum"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    after<br/>
    <figure><img src="sum-after.png" width="300" alt="After partition sum"/></figure>
</div>
</div>
<p>The <code>fund</code> column shows the department&rsquo;s salary fund, and the <code>perc</code> column shows the employee&rsquo;s salary share of that fund. As you can see, everything is more or less even in HR and Sales, but IT has a noticeable spread of salaries.</p>
<p>How do we go from &ldquo;before&rdquo; to &ldquo;after&rdquo;?</p>
<p>First, let&rsquo;s sort the table by department:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>, <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Now let&rsquo;s traverse from the first record to the last, computing the following values along the way:</p>
<ul>
<li><code>fund</code> — total departmental salary;</li>
<li><code>perc</code> — employee&rsquo;s salary as a percentage of the <code>fund</code>.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➀<br/>
    <figure><img src="sum/03.png" width="300" alt="Partition sum step #1"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➁<br/>
    <figure><img src="sum/04.png" width="300" alt="Partition sum step #2"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➂<br/>
    <figure><img src="sum/05.png" width="300" alt="Partition sum step #3"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    ➃<br/>
    <figure><img src="sum/06.png" width="300" alt="Partition sum step #4"/></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-5">
    ➄<br/>
    <figure><img src="sum/07.png" width="300" alt="Partition sum step #5"/></figure>
</div>
<div class="col-xs-12 col-sm-5">
    <p>and so on...</p>
</div>
</div>
<p>In a single gif:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img src="sum.gif" width="300" alt="Partition sum animation"/>
</figure>
</div>
</div>
<p>The window consists of several partitions, one partition per department. The order of records in a partition is not essential: we are counting the total <code>salary</code>, which does not depend on the order.</p>
<pre tabindex="0"><code>window w as (
  partition by department
)
</code></pre><p>We can use a regular <code>sum()</code> over the window to calculate the <code>fund</code>. And the <code>perc</code> will be calculated as <code>salary / fund</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>,
  <span style="color:#000">round</span>(<span style="color:#000">salary</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The <code>sum()</code> function works without surprises — it counts the sum of values for the entire partition to which the current row belongs.</p>
<div class="boxed">
<h3>✎ Exercise: City salary fund (+1 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="filtering-and-execution-order">Filtering and execution order</h2>
<p>Let&rsquo;s get back to the query that calculated the salary fund by department:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Let&rsquo;s say we want to leave only London employees in the report. We&rsquo;ll add a filter:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>The filter works. However, the <code>fund</code> values differ from the expected:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    expectation<br/>
    <pre><code>┌───────┬────────┬──────┐
│ name  │ salary │ fund │
├───────┼────────┼──────┤
│ Diane │ 70     │ 148  │
│ Bob   │ 78     │ 148  │
│ Emma  │ 84     │ 502  │
│ Henry │ 104    │ 502  │
│ Dave  │ 96     │ 292  │
└───────┴────────┴──────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-5">
    reality<br/>
    <pre><code>┌───────┬────────┬──────┐
│ name  │ salary │ fund │
├───────┼────────┼──────┤
│ Diane │ 70     │ 148  │
│ Bob   │ 78     │ 148  │
│ Emma  │ 84     │ 188  │
│ Henry │ 104    │ 188  │
│ Dave  │ 96     │ 96   │
└───────┴────────┴──────┘</code></pre>
</div>
</div>
<p>It&rsquo;s all about the order of operations. Here is the order in which the DB engine executes the query:</p>
<ol>
<li>Take the tables (<code>from</code>) and join them if necessary (<code>join</code>).</li>
<li>Filter the rows (<code>where</code>).</li>
<li>Group the rows (<code>group by</code>).</li>
<li>Filter the aggregated results (<code>having</code>).</li>
<li>Take specific columns from the result (<code>select</code>).</li>
<li>Calculate the values of window functions (<code>function() over window</code>).</li>
<li>Sort the results (<code>order by</code>).</li>
</ol>
<p>Windows are processed at the next-to-last step, after filtering and grouping the results. Therefore, in our query, the <code>fund</code> represents not the sum of all department salaries but the sum only for London employees.</p>
<p>The solution is to use a subquery with a window and filter it in the main query:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">emp</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#000">name</span>, <span style="color:#000">city</span>, <span style="color:#000">salary</span>,
    <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
  <span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">name</span>, <span style="color:#000">salary</span>, <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">emp</span> <span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;London&#39;</span>;
</code></pre></div><h2 id="window-definition">Window definition</h2>
<p>So far, we have described the window in the <code>window</code> clause and referred to it in the <code>over</code> clause:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>There is another way. SQL allows to omit the <code>window</code> clause and define the window directly inside <code>over</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>I prefer the <code>window</code> clause — it is easier to read, and you can explicitly reuse the window. But the <code>over</code> option is common in the documentation and examples, so do not be surprised when you see it.</p>
<p>By the way, the window definition can be empty:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>An empty window includes all rows, so:</p>
<ul>
<li><code>emp_count</code> amounts to the total number of employees,</li>
<li><code>fund</code> amounts to the total salary for all employees.</li>
</ul>
<div class="boxed">
<h3>✎ Exercise: Execution order (+1 more)</h3>
<p>Practice is crucial in turning abstract knowledge into skills, making theory alone insufficient. The book, unlike this article, contains a lot of exercises — that's why I recommend <a href="https://antonz.gumroad.com/l/sql-windows">getting it</a>.</p>
<p>If you are okay with just theory for now, let's continue.</p>
</div>
<h2 id="aggregation-functions">Aggregation functions</h2>
<p>Here are the aggregation window functions:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min(value)</code></td>
<td>returns the minimum <code>value</code> across all window rows</td>
</tr>
<tr>
<td><code>max(value)</code></td>
<td>returns the maximum <code>value</code></td>
</tr>
<tr>
<td><code>count(value)</code></td>
<td>returns the count of non-null <code>value</code>s</td>
</tr>
<tr>
<td><code>avg(value)</code></td>
<td>returns the average <code>value</code></td>
</tr>
<tr>
<td><code>sum(value)</code></td>
<td>returns the total <code>value</code></td>
</tr>
<tr>
<td><code>group_concat(value, separator)</code></td>
<td>returns a string combining <code>value</code>s using <code>separator</code> (SQLite and MySQL only)</td>
</tr>
<tr>
<td><code>string_agg(value, separator)</code></td>
<td>similar to <code>group_concat()</code> in PostgreSQL and MS SQL</td>
</tr>
</tbody>
</table>
<h2 id="keep-it-up">Keep it up</h2>
<p>You have learned how to calculate regular window aggregates. In the next chapter we will try <a href="/sql-window-functions-rolling-aggregates/">rolling aggregates</a>!</p>
<p>
    <a class="button" href="https://antonz.gumroad.com/l/sql-windows">
        Get the book
    </a>
</p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="div.highlight" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item><item><title>AI SQLite Assistant</title><link>https://antonz.org/sqlime-ai/</link><pubDate>Thu, 16 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/sqlime-ai/</guid><description>Ask AI to explain or troubleshoot your SQL query in a playground.</description><content:encoded><![CDATA[<p>While trying to trick AI into saying ethically questionable things may be fun for some of us, I prefer more practical and useful scenarios.</p>
<p>So, as of today, <a href="https://sqlime.org/">Sqlime</a> — an online SQLite playground — includes the &ldquo;Ask AI&rdquo; feature.</p>
<p>AI can explain, teach, and troubleshoot your SQL without leaving the playground:</p>
<ol>
<li>Write a question as a comment above the query.</li>
<li>Click &ldquo;Ask AI&rdquo;.</li>
<li>Receive a not-so-fast, but often useful answer from AI.</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./ask-ai-1.png" alt="Write a question" width="400" class="img-bordered-thin">
    <figcaption>ask a question<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./ask-ai-2.png" alt="Get an answer" width="400" class="img-bordered-thin">
    <figcaption>and receive an answer from AI<figcaption>
</figure>
</div>
</div>
<p>Try it out! All you need is an OpenAI API key.</p>
<p class="big">
<a href="https://sqlime.org/">Ask AI in Sqlime</a>
</p>
]]></content:encoded></item><item><title>ChatGPT Bot in Python</title><link>https://antonz.org/pokitoki/</link><pubDate>Sat, 11 Mar 2023 12:30:00 +0000</pubDate><guid>https://antonz.org/pokitoki/</guid><description>A Telegram chatbot that works via the official OpenAI API.</description><content:encoded><![CDATA[<p>In the last few months, people have been releasing a record number of AI-powered software. Of course I could not stay out of it.</p>
<p>And so the <a href="https://github.com/nalgeon/pokitoki"><strong>pokitoki</strong></a> project was born. It&rsquo;s a a Telegram chat bot built using the ChatGPT (GPT-3.5 or GPT-4) language model from OpenAI.</p>
<p>Notable features:</p>
<ul>
<li>Both one-on-one and group chats.</li>
<li>Direct questions, mentions, follow-ups.</li>
<li>Access external links (articles, code, data).</li>
<li>Shortcuts (custom AI commands).</li>
</ul>
<h2 id="personal-chats">Personal chats</h2>
<p>The bot acts as your personal assistant:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-1.png" alt="Sample chat" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>To allow other users to use the bot, list them in the <code>telegram_usernames</code> config property.</p>
<p>The bot has a terrible memory, so don&rsquo;t expect it to remember any chat context by default. You can, however, reply with a follow-up question (<code>Ctrl/Cmd + ↑</code>). Alternatively, use a plus sign to follow up:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-2.png" alt="Follow-up by reply" width="400" class="img-bordered-thin">
    <figcaption>follow up by replying<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-3.png" alt="Follow-up by plus sign" width="400" class="img-bordered-thin">
    <figcaption>or by writing a `+` sign<figcaption>
</figure>
</div>
</div>
<p>Available commands:</p>
<ul>
<li><code>/retry</code> - retry answering the last question</li>
<li><code>/help</code> - show help</li>
<li><code>/version</code> - show bot info</li>
</ul>
<h2 id="groups">Groups</h2>
<p>To get an answer from the bot in a group, mention it in a reply to a question, or ask a question directly:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-4.png" alt="Reply with mention" width="400" class="img-bordered-thin">
    <figcaption>reply with mention<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-5.png" alt="Direct question" width="400" class="img-bordered-thin">
    <figcaption>direct question<figcaption>
</figure>
</div>
</div>
<p>To make the bot reply to group members, list the group id in the <code>telegram_chat_ids</code> config property. Otherwise, the bot will ignore questions from group members unless they are listed in the <code>telegram_usernames</code> config property.</p>
<p>If you don&rsquo;t know the group id, run the <code>/version</code> bot command in a group to find it:</p>
<pre tabindex="0"><code>Chat information:
- id: -1001405001234
- title: My Favorite Group
- type: supergroup
...
</code></pre><h2 id="external-links">External links</h2>
<p>If you ask &ldquo;vanilla&rdquo; ChatGPT about external resources, it will either hallucinate or admit that it doesn&rsquo;t have access to remote content:</p>
<blockquote>
<p>Q: What is the content of <a href="https://sqlime.org/employees.sql?">https://sqlime.org/employees.sql?</a> Make no assumptions.</p>
<p>A: As an AI language model, I cannot access external URLs on the internet.</p>
</blockquote>
<p>The bot solves the problem by fetching the remote content and feeding it to the model:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-7.png" alt="External links" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>Currently only supports text content (articles, code, data), not PDFs, images or audio.</p>
<h2 id="shortcuts">Shortcuts</h2>
<p>Use short commands to save time and ask the bot to do something specific with your questions. For example, ask it to proofread your writing with a <code>!proofread</code> command:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-6.png" alt="Shortcuts" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<p>There are several built-in shortcuts:</p>
<ul>
<li><code>bugfix</code> fixes your code.</li>
<li><code>proofread</code> fixes your writing.</li>
<li><code>translate</code> translates your text into English.</li>
<li><code>summarize</code> gives a two paragraph summary of a text.</li>
</ul>
<p>You can add your own shortcuts. See <code>config.example.yml</code> for details.</p>
<h2 id="other-useful-features">Other useful features</h2>
<p>The convenience of working with a bot is made up of small details. Here are some situations where it can save you time and effort.</p>
<h3 id="forwarding">Forwarding</h3>
<p>Say you received a message from a colleague or read a post on a channel and want to ask a question. Simply forward the message to the bot and answer the clarifying question it asks:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-8.png" alt="Forwarding 1" width="400" class="img-bordered-thin">
    <figcaption>forward the message<figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-9.png" alt="Forwarding 2" width="400" class="img-bordered-thin">
    <figcaption>and specify the task<figcaption>
</figure>
</div>
</div>
<h3 id="reply-with-attachment">Reply with attachment</h3>
<p>Sometimes the AI&rsquo;s reply exceeds the maximum message length set by Telegram. In this case, the bot will not fail or spam you with messages. Instead, it will send the answer as an attached markdown file:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
    <img src="./chat-10.png" alt="Reply with attachment" width="400" class="img-bordered-thin">
</figure>
</div>
</div>
<h3 id="editing-questions">Editing questions</h3>
<p>To rephrase or add to the last question, edit it (<code>↑</code> shortcut). The bot will notice this and respond to the clarified question.</p>
<h2 id="bot-information">Bot information</h2>
<p>Use the <code>/version</code> commands to print detailed information about the current chat, bot, and AI model:</p>
<pre tabindex="0"><code>Chat information:
- id: -1001405001234
- title: My Favorite Group
- type: supergroup

Bot information:
- id: 5930739038
- name: @pokitokibot
- version: 70
- usernames: 6 users
- chat IDs: []
- access to messages: True

AI information:
- model: gpt-3.5-turbo
- history depth: 3
- shortcuts: ['bugfix', 'proofread', 'summarize', 'translate']
</code></pre><h2 id="setup">Setup</h2>
<ol>
<li>Get your <a href="https://openai.com/api/">OpenAI API</a> key</li>
<li>Get your Telegram bot token from <a href="https://t.me/BotFather">@BotFather</a></li>
<li>Copy <code>config.example.yml</code> to <code>config.yml</code> and specify your tokens there.</li>
<li>Start the bot:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker compose up --build --detach
</code></pre></div><p>To stop the bot:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker compose stop
</code></pre></div><p>For older Docker distributions, use <code>docker-compose</code> instead of <code>docker compose</code>.</p>
<p><a href="https://github.com/nalgeon/pokitoki">Source code on GitHub</a></p>
]]></content:encoded></item><item><title>Interactive SQL Examples in JavaScript</title><link>https://antonz.org/interactive-sql-examples/</link><pubDate>Sun, 05 Mar 2023 12:00:00 +0000</pubDate><guid>https://antonz.org/interactive-sql-examples/</guid><description>Turn static SQL code in your articles into executable examples.</description><content:encoded><![CDATA[<p>Reading about SQL is fun, but trying out live examples is even better! So I created JavaScript widgets that turn static SQL code in your articles into interactive examples.</p>
<p>Here is a working example. Give it a try:</p>
<pre class="example"><code>select * from employees
limit 5;</code></pre>
<p>And here are the four steps to creating executable SQL examples in your own articles or documentation:</p>
<h2 id="1-include-the-widgets">1. Include the widgets</h2>
<p>You&rsquo;ll need three JavaScript files:</p>
<ul>
<li><code>sqlite3.js</code> — SQLite compiled for the browser.</li>
<li><code>sqlime-db.js</code> — the database web component.</li>
<li><code>sqlime-examples.js</code> — the interactive example web component.</li>
</ul>
<p>Include them from CDN or (better) download and host locally:</p>
<pre tabindex="0"><code>&lt;script src=&quot;https://unpkg.com/@antonz/sqlite@3.40.0/dist/sqlite3.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/sqlime@0.1.2/dist/sqlime-db.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://unpkg.com/sqlime@0.1.2/dist/sqlime-examples.js&quot;&gt;&lt;/script&gt;
</code></pre><p>You&rsquo;ll also need to download and serve the SQLite WebAssembly file if you&rsquo;re hosting locally:</p>
<pre tabindex="0"><code>https://unpkg.com/@antonz/sqlite@3.40.0/dist/sqlite3.wasm
</code></pre><p><code>sqlite3.wasm</code> is used internally by the <code>sqlite3.js</code> script, so place them in the same folder.</p>
<p>I suggest you host SQLite locally because it weighs ≈1Mb, and CDNs tend to be quite slow with such large files.</p>
<p>You can install all of these using <code>npm</code>:</p>
<pre tabindex="0"><code>npm install @antonz/sqlite
npm install sqlime
</code></pre><blockquote>
<p><strong>Note</strong>. <code>@antonz/sqlite</code> is a copy of the official <a href="https://sqlite.org/wasm">SQLite Wasm</a> build, provided as an NPM package for convenience. You can download and use the build from the SQLite website if you prefer.</p>
</blockquote>
<h2 id="2-write-an-article-as-usual">2. Write an article as usual</h2>
<p>Suppose you are writing a short post about ranking data in SQL:</p>
<pre tabindex="0"><code>&lt;p&gt;To rank data in SQL, we use the
&lt;code&gt;rank()&lt;/code&gt; window function:&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;select
  rank() over w as &quot;rank&quot;,
  name, department, salary
from employees
window w as (order by salary desc)
order by &quot;rank&quot;, id;&lt;/pre&gt;

&lt;p&gt;the article goes on...&lt;/p&gt;
</code></pre><p>Which renders as ordinary HTML:</p>
<div class="boxed">
    <p>To rank data in SQL, we use the <code>rank()</code> window function:</p>
    <pre><code>select
  rank() over w as "rank",
  name, department, salary
from employees
window w as (order by salary desc)
order by "rank", id;</code></pre>
    <p>the article goes on...</p>
</div>
<h2 id="3-load-the-database">3. Load the database</h2>
<p>You can create a database from a binary SQLite file or SQL script. I&rsquo;ll go with the latter and use <a href="/sql-window-functions-book/employees.sql">employees.sql</a>, which creates the <code>employees</code> table and populates it with data.</p>
<p>Load the database using the <code>sqlime-db</code> web component:</p>
<pre tabindex="0"><code>&lt;sqlime-db name=&quot;employees&quot; path=&quot;./employees.sql&quot;&gt;&lt;/sqlime-db&gt;
</code></pre><ul>
<li><code>name</code> is the name we&rsquo;ll use later to refer to the database.</li>
<li><code>path</code> is the URL path to the SQL (or binary) database file.</li>
</ul>
<h2 id="4-init-the-examples">4. Init the examples</h2>
<p>The only thing left is to convert your HTML <code>pre</code> code snippets into interactive examples. Use the <code>sqlime-examples</code> web component to do this:</p>
<pre tabindex="0"><code>&lt;sqlime-examples db=&quot;employees&quot; selector=&quot;pre.example&quot; editable&gt;&lt;/sqlime-examples&gt;
</code></pre><ul>
<li><code>db</code> is the name of the database we defined earlier.</li>
<li><code>selector</code> is the CSS selector for your SQL code snippets.</li>
<li><code>editable</code> makes the examples editable (remove for read-only).</li>
</ul>
<p>And that&rsquo;s it!</p>
<div class="boxed">
    <p>To rank data in SQL, we use the <code>rank()</code> window function:</p>
    <pre class="example"><code>select
  rank() over w as "rank",
  name, department, salary
from employees
window w as (order by salary desc)
order by "rank", id;</code></pre>
    <p>the article goes on...</p>
</div>
<p><code>sqlime-examples</code> converts all the snippets with the specified selector, so you only need to include it once (unless you have multiple databases to run your examples on).</p>
<h2 id="summary">Summary</h2>
<p>Executable SQL examples are an excellent fit for any kind of documentation:</p>
<ul>
<li>They are more informative than static snippets.</li>
<li>They increase engagement and encourage experimentation,</li>
<li>They are lightweight, easy to set up, and do not require a server.</li>
</ul>
<p>Try adding interactive SQL to your articles, or ask a question <a href="https://github.com/nalgeon/sqlime">on GitHub</a> if you have one.</p>
<p>P.S. Want to see SQL examples in action? Check out my book — <a href="/sql-window-functions-book/">SQL Window Functions Explained</a></p>
<p><sqlime-db name="employees" path="/sql-window-functions-book/employees.sql"></sqlime-db>
<sqlime-examples db="employees" selector="pre.example" editable></sqlime-examples></p>
<script src="/assets/sqlime/sqlite3.js"></script>
<script src="/assets/sqlime/sqlime-db.js"></script>
<script src="/assets/sqlime/sqlime-examples.js"></script>
]]></content:encoded></item></channel></rss>